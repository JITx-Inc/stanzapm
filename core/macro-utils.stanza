;See License.txt for details about licensing.

defpackage macro-utils :
   import core
   import collections

;============================================================
;================== Public Interface ========================
;============================================================

public defn splice (item:List) :
   Splice(item)
public defn substitute (pattern, bindings:Collection<KeyValue<Symbol,?>>) :
   Substitute(pattern, bindings)
public defn nested (bindings:Collection<Collection<KeyValue<Symbol,?>>>) :
   Nested(bindings)
public defn repeated (bindings:Collection<KeyValue<Symbol, Collection>>) :
   Repeated(bindings)
public defn deep (item) :
   Deep(item)
public defn choice (index:Int) :
   Choice(index)
public defn choice (bool:True|False) :
   Choice(0 when bool else 1)
public defn fill-template (form, bindings:Collection<KeyValue<Symbol,?>>) :
   fill-template(substitute(form, bindings))

;============================================================
;=================== Utilities ==============================
;============================================================

public defn tagged-list? (form, tag:Symbol) -> True|False :
   match(form) :
      (t:Token) : tagged-list?(item(t), tag)
      (t:List) :
         if not empty?(t) :
            match(unwrap-token(head(t))) :
               (h:Symbol) : h == tag
               (h) : false
      (t) : false

;============================================================
;=================== Templates ==============================
;============================================================

defstruct Splice :
   item:List
   
defstruct Substitute :
   pattern
   bindings: Collection<KeyValue<Symbol,?>>

defstruct Nested :
   bindings: Collection<Collection<KeyValue<Symbol,?>>>

defstruct Choice :
   index: Int

defstruct Deep :
   item

defn Repeated (bindings:Collection<KeyValue<Symbol, Collection>>) :
   ;Collect keys and values
   val keys = Vector<Symbol>()
   val values = Vector<Vector<?>>()
   for entry in bindings do :
      add(keys, key(entry))
      add(values, to-vector<?>(value(entry)))

   if empty?(keys) :
      Nested(List())
   else :      
      ;Ensure that all values have same length
      val n = length(values[0])
      if not all?({length(_) == n}, values) :
         fatal("All entries in a collect template must have same length.")
    
      ;Make templates
      Nested $ to-list $ for i in 0 to n seq :
         to-list $ for (k in keys, v in values) seq :
            k => v[i]

defmethod print (o:OutputStream, x:Splice) :
   print(o, "SPLICE(%_)" % [item(x)])

defmethod print (o:OutputStream, x:Substitute) :
   print(o, "SUBSTITUTE(%_, %_)" % [pattern(x), bindings(x)])

defmethod print (o:OutputStream, x:Nested) :
   print(o, "NESTED(%_)" % [bindings(x)])

defmethod print (o:OutputStream, x:Choice) :
   print(o, "CHOICE(%_)" % [index(x)])

defmethod print (o:OutputStream, x:Deep) :
   print(o, "DEEP(%_)" % [item(x)])

;============================================================
;=============== Template Interpreter =======================
;============================================================

deftype Flag

public defn fill-template (form) :
   ;Top level fill interpreter
   ;Returns a completely filled template.
   defn fill (form, bs:List<KeyValue<Symbol,?>>) -> ? :
      match(form) :
         (form:Substitute) :
            val bs* = append(bindings(form), bs)
            substitute(pattern(form), bs*)
         (form:List) :
            fill-all(form, bs)
         (form:Splice) :
            Splice(fill(item(form), bs))
         (form:Token) :
            Token(fill(item(form), bs), info(form))
         (form) :
            form

   defn fill-all (form:List, bs:List<KeyValue<Symbol,?>>) -> List :
      if empty?(form) : List()
      else : attach(fill(head(form), bs), fill(tail(form), bs))

   ;Attach the given head to the given list
   ;according to the proper splicing rules.
   defn attach (h, rest:List) :
      match(h) :
         (h:Splice) : append(item(h), rest)
         (h) : cons(h, rest)

   defn get-binding (x:Symbol, bs:List<KeyValue<Symbol,?>>) :
      match(lookup?(bs, x, new Flag)) :
         (v:Flag) : None()
         (v:Deep) : One(item(v))
         (v) : One(v)

   defn deep (bs:List<KeyValue<Symbol,?>>) :
      to-list $ for b in bs filter :
         value(b) is Deep

   defn afns (xs:List) -> [List, List] :
      if empty?(xs) or not tagged-list?(head(xs), `@do-afn) :
         [List(), xs]
      else :
         val a-args = tail(unwrap-token(head(xs)))
         val [b-args, rest] = afns(tail(xs))
         [cons(a-args, b-args), rest]

   defn substitute (pattern, bs:List<KeyValue<Symbol,?>>) -> ? :
      match(pattern) :
         (pattern:Symbol) :
            head(substitute(pattern, List(), bs))
         (pattern:List) :
            if empty?(pattern) : pattern
            else : substitute(head(pattern), tail(pattern), bs)
         (pattern) :
            pattern
            
   defn substitute (h, rest, bs:List<KeyValue<Symbol,?>>) -> List :
      match(h) :
         (h:Symbol) :
            val v = get-binding(h, bs)
            if empty?(v) :
               cons(h, substitute(rest, bs))
            else :
               match(value!(v)) :
                  (h:Nested) :
                     val [afns, _] = afns(rest)
                     fatal("Nested template must be followed with a pattern.") when empty?(afns)
                     val subbed = for b in bindings(h) seq-cat :
                        substitute(head(afns), append(b, bs))
                     append(subbed, substitute(tail(rest), bs))   
                  (h:Choice) :
                     val [afns, tail] = afns(rest)
                     fatal("Choice template index (%_) out of bounds." % [index(h)]) when index(h) >= length(afns)
                     append(substitute(afns[index(h)], bs), substitute(tail, bs))
                  (h) :
                     val h* = fill(h, deep(bs))
                     attach(h*, substitute(rest, bs))
         (h) :
            cons(substitute(h, bs), substitute(rest, bs))

   fill(form, List())

