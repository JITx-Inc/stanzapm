;See License.txt for details about licensing.

defpackage macro-utils :
   import core
   import collections

;v = splice(v)
;  | sub(t, [`x => v ...])
;  | nested([[`x => v ...] ...])
;  | deep(v)
;  | choice(n)
;  | 42

;============================================================
;================== Public Interface ========================
;============================================================

public defn splice (item) :
   Splice(item)
public defn substitute (pattern, bindings:Collection<KeyValue<Symbol,?>>) :
   Substitute(pattern, bindings)
public defn nested (bindings:Collection<Collection<KeyValue<Symbol,?>>>) :
   Nested(bindings)
public defn repeated (bindings:Collection<KeyValue<Symbol, Collection>>) :
   Repeated(bindings)
public defn deep (item) :
   Deep(item)
public defn choice (index:Int) :
   Choice(index)
public defn choice (bool:True|False) :
   Choice(0 when bool else 1)
public defn fill-template (form, bindings:Collection<KeyValue<Symbol,?>>) :
   fill-template(substitute(form, bindings))

;============================================================
;=================== Utilities ==============================
;============================================================

public defn tagged-list? (form, tag:Symbol) -> True|False :
   match(form) :
      (t:Token) : tagged-list?(item(t), tag)
      (t:List) :
         if not empty?(t) :
            match(unwrap-token(head(t))) :
               (h:Symbol) : h == tag
               (h) : false
      (t) : false

;============================================================
;=================== Templates ==============================
;============================================================

public defstruct Splice :
   item

public defstruct Substitute :
   pattern
   bindings: Collection<KeyValue<Symbol,?>>

public defstruct Nested :
   bindings: Collection<Collection<KeyValue<Symbol,?>>>

public defstruct Choice :
   index: Int

public defstruct Deep :
   item

defn Repeated (bindings:Collection<KeyValue<Symbol, Collection>>) :
   ;Collect keys and values
   val keys = Vector<Symbol>()
   val values = Vector<Vector<?>>()
   for entry in bindings do :
      add(keys, key(entry))
      add(values, to-vector<?>(value(entry)))

   if empty?(keys) :
      Nested(List())
   else :
      ;Ensure that all values have same length
      val n = length(values[0])
      if not all?({length(_) == n}, values) :
         fatal("All entries in a Repeated template must have same length.")

      ;Make templates
      Nested $ to-list $ for i in 0 to n seq :
         to-list $ for (k in keys, v in values) seq :
            k => v[i]

defmethod print (o:OutputStream, x:Splice) :
   print(o, "SPLICE(%_)" % [item(x)])

defmethod print (o:OutputStream, x:Substitute) :
   print(o, "SUBSTITUTE(%_, %_)" % [pattern(x), bindings(x)])

defmethod print (o:OutputStream, x:Nested) :
   print(o, "NESTED(%_)" % [bindings(x)])

defmethod print (o:OutputStream, x:Choice) :
   print(o, "CHOICE(%_)" % [index(x)])

defmethod print (o:OutputStream, x:Deep) :
   print(o, "DEEP(%_)" % [item(x)])

;============================================================
;================ Template Interpreter ======================
;============================================================

public defn fill-template (v) :

  ;------------------------------------------------------------
  ;-------------------- Utilities -----------------------------
  ;------------------------------------------------------------
  defn afns (xs:List) -> [List, List] :
    if empty?(xs) or not tagged-list?(head(xs), `@do-afn) :
      [List(), xs]
    else :
      val a-args = tail(unwrap-token(head(xs)))
      val [b-args, rest] = afns(tail(xs))
      [cons(a-args, b-args), rest]

  defn bad-slice () :
    fatal("Splice pattern used in incorrect context.")
  defn ensure-splice-list (x) :
    fatal("Splice pattern %_ is not a list." % [x]) when x is-not List
  defn bad-special-binding (x) :
    match(x) :
      (x:Splice) : fatal("Splice pattern used in incorrect context.")
      (x:Nested) : fatal("Nested template must be followed with a pattern.")
      (x:Choice) : fatal("Choice template must be followed with a pattern.")
  defn ensure-nested-pattern (afns:List) :
    fatal("Nested template must be followed with a pattern.") when empty?(afns)
  defn ensure-choice-bounds (afns:List, i:Int) :
    fatal("Choice index out of bounds.") when i > length(afns) - 1

  ;------------------------------------------------------------
  ;---------------- Value Filling -----------------------------
  ;------------------------------------------------------------
  ;Returns an s-expression
  defn fill-value (v, deep:List<KeyValue<Symbol,?>>) -> ? :
    match(v) :
      (v:Substitute) :
        val [dbindings, sbindings] = split({value(_) is Deep}, bindings(v))
        val deep* = append(seq(fill-binding{_, deep}, dbindings), deep)
        val bindings* = append(seq(fill-binding{_, deep*}, sbindings), deep*)
        substitute(pattern(v), bindings*)
      (v:Splice) :
        bad-slice()
      (v:List) :
        if empty?(v) : v
        else : fill-value(head(v), tail(v), deep)
      (v:Token) :
        Token(fill-value(item(v), deep), info(v))
      (v) : v

  defn fill-value (h, rest:List, deep:List<KeyValue<Symbol,?>>) -> ? :
    match(h) :
      (h:Splice) :
        val h* = unwrap-token(fill-value(item(h), deep))
        ensure-splice-list(h*)
        append(h*, fill-value(rest, deep))
      (h) :
        cons(fill-value(h, deep), fill-value(rest, deep))

  defn fill-binding (b:KeyValue<Symbol,?>, deep:List<KeyValue<Symbol,?>>) :
    key(b) => match(value(b)) :
      (v:Deep) :
        fill-value(item(v), deep)
      (v:Splice) :
        Splice(fill-value(item(v), deep))
      (v:Nested) :
        Nested $
          to-tuple $ for bset in bindings(v) seq :
            to-tuple $ seq(fill-binding{_, deep}, bset)
      (v:Choice) :
        v
      (v) :
        fill-value(v, deep)

  ;------------------------------------------------------------
  ;---------------- Substitution Engine -----------------------
  ;------------------------------------------------------------

  ;Substitution binding:
  ;  b = splice(sexp)
  ;    | nested([[`x => b ...] ...])
  ;    | choice(n)
  ;    | 42
  ;Returns an sexp

  defn substitute (form, bs:List<KeyValue<Symbol,?>>) -> ? :
    match(form) :
      (form:List) :
        if empty?(form) : form
        else : substitute(head(form), tail(form), bs)
      (form:Token) :
        Token(substitute(item(form), bs), info(form))
      (form:Symbol) :
        match(lookup?(bs, form, form)) :
          (v:Splice|Nested|Choice) : bad-special-binding(v)
          (v) : v
      (form) :
        form

  defn substitute (h, rest:List, bs:List<KeyValue<Symbol,?>>) -> ? :
    match(unwrap-token(h)) :
      (h*:Symbol) :
        match(lookup?(bs, h*, h)) :
          (h:Splice) :
            val v = unwrap-token(item(h))
            ensure-splice-list(v)
            append(v, substitute(rest, bs))
          (h:Nested) :
            val [afns, _] = afns(rest)
            ensure-nested-pattern(afns)
            val subbed = for b in bindings(h) seq-cat :
              substitute(head(afns), append(b, bs))
            append(subbed, substitute(tail(rest), bs))
          (h:Choice) :
            val [afns, rest] = afns(rest)
            ensure-choice-bounds(afns, index(h))
            append(
              substitute(afns[index(h)], bs)
              substitute(rest, bs))
          (h) :
            cons(h, substitute(rest, bs))      
      (h*) :
        cons(substitute(h, bs), substitute(rest, bs))

  ;------------------------------------------------------------
  ;---------------------- Driver ------------------------------
  ;------------------------------------------------------------
  fill-value(v, List())