;See License.txt for details about licensing.

defpackage collections :
   import core

;============================================================
;===================== Utilities ============================
;============================================================

deftype Sentinel
defn sentinel () : new Sentinel
defmethod print (o:OutputStream, s:Sentinel) : print(o, "XXX")

;============================================================
;===================== Vectors ==============================
;============================================================

;                     Interface
;                     =========

public deftype Vector<T> <: IndexedCollection<T>
public defmulti add<?T> (v:Vector<?T>, value:T) -> False
public defmulti add-all<?T> (v:Vector<?T>, vs:Seqable<T>) -> False
public defmulti clear (v:Vector) -> False
public defmulti clear<?T> (v:Vector<?T>, n:Int, x0:T) -> False
public defmulti pop<?T> (v:Vector<?T>) -> T
public defmulti peek<?T> (v:Vector<?T>) -> T

public defmulti remove<?T> (v:Vector<?T>, i:Int) -> T
public defmulti remove (v:Vector, r:Range) -> False
public defmulti update<?T> (f: T -> Maybe<T>, v:Vector<?T>) -> False
public defmulti remove-item<?T> (v:Vector<?T&Equalable>, x:T&Equalable) -> True|False
public defmulti remove-when<?T> (f: T -> True|False, v:Vector<?T>) -> False
public defmulti trim (v:Vector) -> False
public defmulti shorten (v:Vector, size:Int) -> False
public defmulti lengthen<?T> (v:Vector<?T>, size:Int, x:T) -> False
public defmulti set-length<?T> (v:Vector<?T>, length:Int, x:T) -> False

;                   Implementation
;                   ==============

public defn Vector<T> (cap:Int) -> Vector<T> :
   #if-not-defined(OPTIMIZE) :
      core/ensure-non-negative("capacity", cap)
   var array = Array<T>(cap)
   var size = 0

   defn set-capacity (c:Int) :
      val new-array = Array<T>(c)
      new-array[0 to size] = array
      array = new-array
         
   defn ensure-capacity (c:Int) :
      val cur-c = length(array)
      set-capacity(max(c, 2 * cur-c)) when c > cur-c

   new Vector<T> :
      defmethod get (this, i:Int) :
         #if-not-defined(OPTIMIZE) :
            core/ensure-index-in-bounds(this, i)
         array[i]

      defmethod set (this, i:Int, value:T) :
         if i == size :
            add(this, value)
         else :
            #if-not-defined(OPTIMIZE) :
               core/ensure-index-in-bounds(this, i)
            array[i] = value
            
      defmethod set-all (this, r:Range, v:T) :
         #if-not-defined(OPTIMIZE) :
            core/ensure-index-range(this, r)
         set-all(array, r, v)         

      defmethod length (this) :
         size

      defmethod trim (this) :
         set-capacity(size)

      defmethod set-length (this, len:Int, value:T) :
         if len > size : lengthen(this, len, value)
         else : shorten(this, len)

      defmethod shorten (this, new-size:Int) :
         #if-not-defined(OPTIMIZE) :
            core/ensure-non-negative("size", new-size)
            if new-size > size :
               fatal("Given size (%_) is larger than current size (%_)." % [new-size, size])
         size = new-size
         
      defmethod lengthen (this, new-size:Int, x:T) :
         #if-not-defined(OPTIMIZE) :
            if new-size < size :
               fatal("Given size (%_) is smaller than current size (%_)." % [new-size, size])
         ensure-capacity(new-size)
         set-all(array, size to new-size, x)
         size = new-size

      defmethod add (this, value:T) :
         ensure-capacity(size + 1)
         array[size] = value
         size = size + 1

      defmethod add-all (this, vs:Seqable<T>) :
         match(vs) :
            (vs:Seqable<T> & Lengthable) :
               val n = length(vs)
               ensure-capacity(size + n)
               array[size to (size + n)] = vs
               size = size + n
            (vs) :
               do(add{this, _}, vs)

      defmethod pop (this) :
         #if-not-defined(OPTIMIZE) :
            fatal("Empty Vector") when size == 0
         size = size - 1
         array[size]

      defmethod peek (this) :
         #if-not-defined(OPTIMIZE) :
            fatal("Empty Vector") when size == 0
         array[size - 1]

      defmethod clear (this) :
         size = 0
         
      defmethod clear (this, n:Int, x0:T) :
         if length(array) < n :
            val cap = max(n, 2 * length(array))
            array = Array<T>(cap, x0)
            size = n
         else :
            set-all(array, 0 to n, x0)
            size = n         

      defmethod remove-when (f: T -> True|False, this) :
         for x in this update :
            if f(x) : None()
            else : One(x)

      defmethod remove (this, i:Int) :
         #if-not-defined(OPTIMIZE) :
            core/ensure-index-in-bounds(this, i)
         val x = array[i]   
         for i in i to (size - 1) do :
            array[i] = array[i + 1]
         size = size - 1
         x

      defmethod remove (this, r:Range) :
         #if-not-defined(OPTIMIZE) :
            core/ensure-index-range(this, r)
         val [s,e] = core/range-bound(this, r)
         val n = e - s
         if n > 0 :
            for i in s to (size - n) do :
               array[i] = array[i + n]
            size = size - n

      defmethod remove-item (this:Vector<T&Equalable>, x:T&Equalable) :
         match(index-of(this, x)) :
            (i:Int) : (remove(this, i), true)
            (i:False) : false

      defmethod update (f: T -> Maybe<T>, this) :
         defn* loop (dst:Int, src:Int) :
            if src < size :
               match(f(array[src])) :
                  (x:One<T>) :
                     array[dst] = value(x)
                     loop(dst + 1, src + 1)
                  (x:None) :
                     loop(dst, src + 1)
            else :
               size = dst
         loop(0, 0)

      defmethod do (f: T -> ?, this) :
         defn* loop (i:Int, n:Int) :
            if n > 0 :
               f(array[i])
               loop(i + 1, n - 1)
         loop(0, size)      

public defn Vector<T> () -> Vector<T> :
   Vector<T>(8)

public defn to-vector<T> (xs:Seqable<T>) -> Vector<T> :
   val v = Vector<T>()
   add-all(v, xs)
   v

public defn map<R,?T> (f: T -> R, v:Vector<?T>) -> Vector<R> :
   val ret = Vector<R>(length(v))
   add-all(ret, seq(f, v))
   ret


;============================================================
;====================== Queues ==============================
;============================================================

;                      Interface
;                      =========

public deftype Queue<T> <: IndexedCollection<T>
public defmulti add<?T> (q:Queue<?T>, x:T) -> False
public defmulti clear (q:Queue) -> False
public defmulti pop<?T> (q:Queue<?T>) -> T
public defmulti peek<?T> (q:Queue<?T>) -> T

;                    Implementation
;                    ==============

public defn Queue<T> (initial-cap:Int) -> Queue<T> :
   #if-not-defined(OPTIMIZE) :
      core/ensure-non-negative("capacity", initial-cap)
   var cap:Int = next-pow2(initial-cap)
   var array:Array<T> = Array<T>(cap)
   var begin:Int = 0
   var size:Int = 0

   defn ensure-capacity (c:Int) :
      defn set-capacity (c:Int) :
         val new-array = Array<T>(c)
         for i in 0 to size do :
            new-array[i] = array[wrapped-index(i)]
         array = new-array
         cap = c
         begin = 0
      set-capacity(next-pow2(c)) when c > cap         

   defn wrapped-index (i:Int) :
      (begin + i) & (cap - 1)

   new Queue<T> :
      defmethod get (this, i:Int) :
         #if-not-defined(OPTIMIZE) :
            core/ensure-index-in-bounds(this, i)
         array[wrapped-index(i)]
         
      defmethod set (this, i:Int, value:T) :
         if i == -1 :
            add(this, value)
         else :
            #if-not-defined(OPTIMIZE) :
               core/ensure-index-in-bounds(this, i)
            array[wrapped-index(i)] = value

      defmethod add (this, x:T) :
         ensure-capacity(size + 1)
         begin = wrapped-index(-1 + cap)
         array[begin] = x
         size = size + 1

      defmethod pop (this) :
         #if-not-defined(OPTIMIZE) :
            fatal("Empty Queue") when size == 0
         size = size - 1
         array[wrapped-index(size)]
         
      defmethod peek (this) :
         #if-not-defined(OPTIMIZE) :
            fatal("Empty Queue") when size == 0
         array[wrapped-index(size - 1)]

      defmethod length (this) :
         size

      defmethod clear (this) :
         size = 0

public defn Queue<T> () -> Queue<T> :
   Queue<T>(8)

;============================================================
;======================== Tables ============================
;============================================================

;==============================
;==== Mandatory Operations ====
;==============================

public deftype Table<K,V> <: Collection<KeyValue<K,V>> & Lengthable
public defmulti set<?K,?V> (t:Table<?K,?V>, k:K, v:V) -> False
public defmulti get?<?K,?V> (t:Table<?K,?V>, k:K, d:?V) -> V
public defmulti default<?K,?V> (t:Table<?K,?V>, k:K) -> V
public defmulti remove<?K> (t:Table<?K,?>, k:K) -> True|False
public defmulti clear (t:Table) -> False

;=============================
;==== Abstract Operations ====
;=============================

public defmulti key?<?K> (t:Table<?K,?>, k:K) -> True|False
public defmulti get<?K,?V> (t:Table<?K,?V>, k:K) -> V
public defmulti update<?K,?V> (t:Table<?K,?V>, f:V -> V, k:K) -> V
public defmulti keys<?K> (t:Table<?K,?>) -> Seqable<K>
public defmulti values<?V> (t:Table<?,?V>) -> Seqable<V>
public defmulti set?<?K,?V> (t:Table<?K,?V>, k:K, f:() -> V) -> V
public defmulti map!<?K,?V> (f:KeyValue<K,V> -> V, t:Table<?K,?V>) -> False

;==================================
;==== Abstract Implementations ====
;==================================
defmethod key?<?K> (t:Table<?K,?>, k:K) :
  get?(t, k, sentinel()) is-not Sentinel
  
defmethod get<?K,?V> (t:Table<?K,?V>, k:K) -> V :
  match(get?(t, k, sentinel())) :
    (v:Sentinel) : default(t, k)
    (v:V) : v

defmethod update<?K,?V> (t:Table<?K,?V>, f:V -> V, k:K) -> V :
  val v* = f(t[k])
  t[k] = v*
  v*

defmethod set?<?K,?V> (t:Table<?K,?V>, k:K, f:() -> V) -> V :
  match(get?(t, k, sentinel())) :
    (v:Sentinel) :
      val v* = f()
      t[k] = v*
      v*
    (v:V) :
      v

defmethod keys<?K> (t:Table<?K,?>) :
  seq(key, t)

defmethod values<?V> (t:Table<?,?V>) :
  seq(value, t)

public defn get?<?K,?V> (t:Table<?K,?V>, k:K) :
  get?(t, k, false)

public defn empty? (t:Table) :
  length(t) == 0

defmethod map!<?K,?V> (f:KeyValue<K,V> -> V, t:Table<?K,?V>) :
  for entry in t do :
    t[key(entry)] = f(entry)

public defn set-all<?K,?V> (t:Table<?K,?V>, ks:Seqable<K>, vs:Seqable<V>) :
  for (k in ks, v in vs) do :
    t[k] = v

;============================================================
;====================== HashTables ==========================
;============================================================

public deftype HashTable<K,V> <: Table<K,V>

public defn HashTable<K,V> (initial-cap: Int
                            hash: K -> Int,
                            key-equal?: (K,K) -> True|False,
                            default: K -> V,
                            create-on-default: True|False) :
  ;=====================
  ;==== Table State ====
  ;=====================
  var cap
  var mask
  var limit
  var size
  var keys
  var values
  var hashes

  defn init (c:Int) :
    cap = c
    mask = cap - 1
    limit = c >> 1
    keys = Array<K|Sentinel>(cap, sentinel())
    values = Array<V|Sentinel>(cap, sentinel())
    hashes = IntArray(cap)
    size = 0

  defn clear () :
    size = 0
    for i in 0 to cap do :
      keys[i] = sentinel()
      values[i] = sentinel()    

  init(next-pow2(max(8, initial-cap)))

  ;===========================
  ;==== Utility Functions ====
  ;===========================
  ;Subtract b from a using modulo arithmetic.
  ;a is assumed to be larger than b.
  defn mod-minus (a:Int, b:Int) :
    if a >= b : a - b
    else : a + cap - b

  ;Retrieve the index from the given hash
  defn loc (h:Int) : h & mask

  ;Retrieve the distance from the initial bucket for
  ;the value in bucket i.
  defn dib (i:Int) : mod-minus(i, loc(hashes[i]))

  ;Retrieve the cluster size starting at bucket i.
  ;If dib0 is true, then buckets with dib == 0 is considered
  ;part of the cluster. Otherwise they are not.
  defn cluster-size (i:Int, dib0:True|False) :
    let loop (i:Int = i, n:Int = 0) :
      if keys[i] is Sentinel : n
      else if (not dib0) and dib(i) == 0 : n
      else if i == cap - 1 : loop(0, n + 1)
      else : loop(i + 1, n + 1)

  ;Shift n elements starting from start one bucket
  ;to the right.
  defn shift-n-right (start:Int, n:Int) :
    for i in (n - 1) through 0 by -1 do :
      val l1 = loc(start + i)
      val l2 = loc(start + i + 1)
      keys[l2] = keys[l1]
      values[l2] = values[l1]
      hashes[l2] = hashes[l1]

  ;Shift n elements starting from (start + 1) one bucket
  ;to the left such that they end up in start.
  defn shift-n-left (start:Int, n:Int) :
    for i in 0 to n do :
      val l1 = loc(start + i)
      val l2 = loc(start + i + 1)
      keys[l1] = keys[l2]
      values[l1] = values[l2]
      hashes[l1] = hashes[l2]

  ;=========================
  ;==== Entry Functions ====
  ;=========================
  defn new-entry (i:Int, k:K, h:Int, v:V) -> V :
    keys[i] = k
    hashes[i] = h
    values[i] = v
    size = size + 1
    double-capacity() when size >= limit      
    v

  defn update-entry (i:Int, v:V) -> V :
    values[i] = v
    v

  defn remove-entry (i:Int) :
    keys[i] = sentinel()
    values[i] = sentinel()
    size = size - 1

  defn double-capacity () :
    val [old-keys, old-values] = [keys, values]
    init(cap << 1)
    for (k in old-keys, v in old-values) do :
      if k is-not Sentinel :
        insert(k as K, v as V)

  ;=========================
  ;==== Table Functions ====
  ;=========================
  defn insert (k:K, v:V) :
    ;Hash and initial position
    val h = hash(k)
    val l = loc(h)

    let loop (i:Int = l) :
      defn dibx () : mod-minus(i, l)
      match(keys[i]) :
        (k2:Sentinel) :
          new-entry(i, k, h, v)
        (k2:K) :
          if hashes[i] == h and key-equal?(k2, k) :
            update-entry(i, v)
          else if dibx() <= dib(i) :
            loop(loc(i + 1))
          else :
            shift-n-right(i, cluster-size(i,true))
            new-entry(i, k, h, v)

  defn key? (k:K) :
    ;Hash and initial position
    val h = hash(k)
    val l = loc(h)

    let loop (i:Int = l) :
      defn dibx () : mod-minus(i, l)
      match(keys[i]) :
        (k2:Sentinel) :
          false
        (k2:K) :
          if hashes[i] == h and key-equal?(k2, k) :
            true
          else if dibx() <= dib(i) :
            loop(loc(i + 1))
          else :
            false

  defn lookup<?D> (k:K, d:?D) :
    ;Hash and initial position
    val h = hash(k)
    val l = loc(h)

    let loop (i:Int = l) :
      defn dibx () : mod-minus(i, l)
      match(keys[i]) :
        (k2:Sentinel) :
          d
        (k2:K) :
          if hashes[i] == h and key-equal?(k2, k) :
            values[i] as V
          else if dibx() <= dib(i) :
            loop(loc(i + 1))
          else :
            d

  defn lookup (k:K) :    
    ;Hash and initial position
    val h = hash(k)
    val l = loc(h)

    let loop (i:Int = l) :        
      defn dibx () : mod-minus(i, l)        
      match(keys[i]) :
        (k2:Sentinel) :
          if create-on-default : new-entry(i, k, h, default(k))
          else : default(k)
        (k2:K) :            
          if hashes[i] == h and key-equal?(k2, k) :
            values[i] as V
          else if dibx() <= dib(i) :
            loop(loc(i + 1))
          else :
            if create-on-default :
              shift-n-right(i, cluster-size(i, true))
              new-entry(i, k, h, default(k))
            else : default(k)

  defn update (f:V -> V, k:K) :
    ;Hash and initial position
    val h = hash(k)
    val l = loc(h)

    let loop (i:Int = l) :
      defn dibx () : mod-minus(i, l)
      match(keys[i]) :
        (k2:Sentinel) :
          new-entry(i, k, h, f(default(k)))
        (k2:K) :
          if hashes[i] == h and key-equal?(k2, k) :
            update-entry(i, f(values[i] as V))
          else if dibx() <= dib(i) :
            loop(loc(i + 1))
          else :
            shift-n-right(i, cluster-size(i, true))
            new-entry(i, k, h, f(default(k)))

  defn remove (k:K) :
    ;Hash and initial position
    val h = hash(k)
    val l = loc(h)

    let loop (i:Int = l) :
      defn dibx () : mod-minus(i, l)
      match(keys[i]) :
        (k2:Sentinel) :
          false
        (k2:K) :
          if hashes[i] == h and key-equal?(k2, k) :
            val n = cluster-size(loc(i + 1), false)
            shift-n-left(i, n)
            remove-entry(loc(i + n))
            true
          else if dibx() <= dib(i) :
            loop(loc(i + 1))
          else :
            false

  ;======================
  ;==== Return Table ====
  ;======================
  new HashTable<K,V> :
    defmethod set (this, k:K, v:V) :
      insert(k, v)
      false
    defmethod get?<?D> (this, k:K, d:?D) :
      lookup(k, d)
    defmethod default (this, k:K) :
      if create-on-default : insert(k, default(k))
      else : default(k)
    defmethod remove (this, k:K) :
      remove(k)
    defmethod clear (this) :
      clear()
    defmethod to-seq (this) :
      for (k in keys, v in values) seq? :
        match(k:Sentinel) : None()
        else : One(k as K => v as V)
    defmethod length (this) :
      size
    defmethod default (this, k:K) :
      if create-on-default : insert(k, default(k))
      else : default(k)
    defmethod key? (this, k:K) :
      key?(k)
    defmethod get (this, k:K) :
      lookup(k)
    defmethod update (this, f:V -> V, k:K) :
      update(f, k)
    defmethod keys (this) :
      filter({_ is-not Sentinel}, keys) as Seq<K>
    defmethod values (this) :    
      filter({_ is-not Sentinel}, values) as Seq<V>
    defmethod map! (f:KeyValue<K,V> -> V, this) :
      for i in 0 to cap do :
        match(keys[i]) :
          (k:Sentinel) : false
          (k:K) : values[i] = f(k => values[i] as V)

;==================================
;==== Convenience Constructors ====
;==================================
defn no-such-key (k) : fatal("Key %_ does not exist in table." % [k])

public defn HashTable<K,V> (initial-cap:Int, hash: K -> Int, equal?: (K,K) -> True|False) :
  HashTable<K,V>(initial-cap, hash, equal?, no-such-key, false)

public defn HashTable<K,V> (hash: K -> Int, equal?: (K,K) -> True|False) :
  HashTable<K,V>(8, hash, equal?, no-such-key, false)

public defn HashTable<K,V> () -> HashTable<K,V> :
  HashTable<K&Hashable&Equalable,V>(8, hash, equal?, no-such-key, false)

public defn HashTable<K,V> (default:V) -> HashTable<K,V> :
  HashTable<K&Hashable&Equalable,V>(8, hash, equal?, {default}, false)

public defn HashTable<K,V> (hash: K -> Int,
                            equal?: (K,K) -> True|False,
                            default:V) ->
                            HashTable<K,V> :
  HashTable<K,V>(8, hash, equal?, {default}, false)

public defn HashTable-init<K,V> (init: K -> V) -> HashTable<K,V> :
  HashTable<K&Hashable&Equalable,V>(8, hash, equal?, init, true)

public defn HashTable-init<K,V> (hash: K -> Int,
                                 equal?: (K,K) -> True|False,
                                 init: K -> V) ->
                                 HashTable<K,V> :
  HashTable<K,V>(8, hash, equal?, init, true)

public defn to-hashtable<K,V> (es:Seqable<KeyValue<K,V>>) -> HashTable<K,V> :
  val t = HashTable<K,V>()
  for e in es do :
    t[key(e)] = value(e)
  t

public defn to-hashtable<K,V> (ks:Seqable<K>, vs:Seqable<V>) -> HashTable<K,V> :
  val t = HashTable<K,V>()
  set-all(t, ks, vs)
  t

;============================================================
;===================== Int Tables ===========================
;============================================================

public deftype IntTable<V> <: Table<Int,V>

public defn IntTable<V> (initial-cap: Int
                         default: Int -> V,
                         create-on-default: True|False) :
  ;=====================
  ;==== Table State ====
  ;=====================
  var cap
  var mask
  var limit
  var size
  var values
  var hashes

  defn init (c:Int) :
    cap = c
    mask = cap - 1
    limit = c >> 1
    values = Array<V|Sentinel>(cap, sentinel())
    hashes = IntArray(cap)
    size = 0

  defn clear () :
    size = 0
    set-all(values, 0 to false, sentinel())

  init(next-pow2(max(8, initial-cap)))

  ;===========================
  ;==== Utility Functions ====
  ;===========================
  ;Subtract b from a using modulo arithmetic.
  ;a is assumed to be larger than b.
  defn mod-minus (a:Int, b:Int) :
    if a >= b : a - b
    else : a + cap - b

  ;Retrieve the index from the given hash
  defn loc (h:Int) : h & mask

  ;Retrieve the distance from the initial bucket for
  ;the value in bucket i.
  defn dib (i:Int) : mod-minus(i, loc(hashes[i]))

  ;Retrieve the cluster size starting at bucket i.
  ;If dib0 is true, then buckets with dib == 0 is considered
  ;part of the cluster. Otherwise they are not.
  defn cluster-size (i:Int, dib0:True|False) :
    let loop (i:Int = i, n:Int = 0) :
      if values[i] is Sentinel : n
      else if (not dib0) and dib(i) == 0 : n
      else if i == cap - 1 : loop(0, n + 1)
      else : loop(i + 1, n + 1)

  ;Shift n elements starting from start one bucket
  ;to the right.
  defn shift-n-right (start:Int, n:Int) :
    for i in (n - 1) through 0 by -1 do :
      val l1 = loc(start + i)
      val l2 = loc(start + i + 1)
      values[l2] = values[l1]
      hashes[l2] = hashes[l1]

  ;Shift n elements starting from (start + 1) one bucket
  ;to the left such that they end up in start.
  defn shift-n-left (start:Int, n:Int) :
    for i in 0 to n do :
      val l1 = loc(start + i)
      val l2 = loc(start + i + 1)
      values[l1] = values[l2]
      hashes[l1] = hashes[l2]

  ;=========================
  ;==== Entry Functions ====
  ;=========================
  defn new-entry (i:Int, k:Int, v:V) -> V :
    hashes[i] = k
    values[i] = v
    size = size + 1
    double-capacity() when size >= limit      
    v

  defn update-entry (i:Int, v:V) -> V :
    values[i] = v
    v

  defn remove-entry (i:Int) :
    values[i] = sentinel()
    size = size - 1

  defn double-capacity () :
    val [old-keys, old-values] = [hashes, values]
    init(cap << 1)
    for (k in old-keys, v in old-values) do :
      if v is-not Sentinel :
        insert(k, v as V)

  ;=========================
  ;==== Table Functions ====
  ;=========================
  defn insert (k:Int, v:V) :
    val l = loc(k)
    let loop (i:Int = l) :
      defn dibx () : mod-minus(i, l)
      match(values[i]) :
        (_:Sentinel) :
          new-entry(i, k, v)
        (_:V) :
          if k == hashes[i] :
            update-entry(i, v)
          else if dibx() <= dib(i) :
            loop(loc(i + 1))
          else :
            shift-n-right(i, cluster-size(i,true))
            new-entry(i, k, v)

  defn key? (k:Int) :
    val l = loc(k)
    let loop (i:Int = l) :
      defn dibx () : mod-minus(i, l)
      match(values[i]) :
        (_:Sentinel) :
          false
        (_:V) :
          if k == hashes[i] :
            true
          else if dibx() <= dib(i) :
            loop(loc(i + 1))
          else :
            false

  defn lookup<?D> (k:Int, d:?D) :
    val l = loc(k)
    let loop (i:Int = l) :
      defn dibx () : mod-minus(i, l)
      match(values[i]) :
        (_:Sentinel) :
          d
        (v:V) :
          if k == hashes[i] :
            v
          else if dibx() <= dib(i) :
            loop(loc(i + 1))
          else :
            d

  defn lookup (k:Int) :    
    val l = loc(k)
    let loop (i:Int = l) :
      defn dibx () : mod-minus(i, l)
      match(values[i]) :
        (_:Sentinel) :
          if create-on-default : new-entry(i, k, default(k))
          else : default(k)
        (v:V) :
          if k == hashes[i] :
            v
          else if dibx() <= dib(i) :
            loop(loc(i + 1))
          else :
            if create-on-default :
              shift-n-right(i, cluster-size(i, true))
              new-entry(i, k, default(k))
            else : default(k)

  defn update (f:V -> V, k:Int) :
    val l = loc(k)
    let loop (i:Int = l) :
      defn dibx () : mod-minus(i, l)
      match(values[i]) :
        (_:Sentinel) :
          new-entry(i, k, f(default(k)))
        (v:V) :
          if k == hashes[i] :
            update-entry(i, f(v))
          else if dibx() <= dib(i) :
            loop(loc(i + 1))
          else :
            shift-n-right(i, cluster-size(i, true))
            new-entry(i, k, f(default(k)))

  defn remove (k:Int) :
    val l = loc(k)
    let loop (i:Int = l) :
      defn dibx () : mod-minus(i, l)
      match(values[i]) :
        (_:Sentinel) :
          false
        (v:V) :
          if k == hashes[i] :
            val n = cluster-size(loc(i + 1), false)
            shift-n-left(i, n)
            remove-entry(loc(i + n))
            true
          else if dibx() <= dib(i) :
            loop(loc(i + 1))
          else :
            false

  ;======================
  ;==== Return Table ====
  ;======================
  new IntTable<V> :
    defmethod set (this, k:Int, v:V) :
      insert(k, v)
      false
    defmethod get?<?D> (this, k:Int, d:?D) :
      lookup(k, d)
    defmethod default (this, k:Int) :
      if create-on-default : insert(k, default(k))
      else : default(k)
    defmethod remove (this, k:Int) :
      remove(k)
    defmethod clear (this) :
      clear()
    defmethod to-seq (this) :
      for (k in hashes, v in values) seq? :
        match(v) :
          (v:Sentinel) : None()
          (v:V) : One(k => v)
    defmethod length (this) :
      size
    defmethod default (this, k:Int) :
      if create-on-default : insert(k, default(k))
      else : default(k)
    defmethod key? (this, k:Int) :
      key?(k)
    defmethod get (this, k:Int) :
      lookup(k)
    defmethod update (this, f:V -> V, k:Int) :
      update(f, k)
    defmethod keys (this) :
      for (k in hashes, v in values) filter :
        v is-not Sentinel
    defmethod values (this) :    
      filter({_ is-not Sentinel}, values) as Seq<V>
    defmethod map! (f:KeyValue<Int,V> -> V, this) :
      for i in 0 to cap do :
        match(values[i]) :
          (v:Sentinel) : false
          (v:V) : values[i] = f(hashes[i] => v)

;==================================
;==== Convenience Constructors ====
;==================================
public defn IntTable<V> () :
  IntTable<V>(8, no-such-key, false)

public defn IntTable<V> (default:V) :
  IntTable<V>(8, {default}, false)

public defn IntTable-init<V> (init: Int -> V) :
  IntTable<V>(8, init, true)

public defn to-inttable<V> (es:Seqable<KeyValue<Int,V>>) -> IntTable<V> :
  val t = IntTable<V>()
  for e in es do :
    t[key(e)] = value(e)
  t

public defn to-inttable<V> (ks:Seqable<Int>, vs:Seqable<V>) -> IntTable<V> :
  val t = IntTable<V>()
  set-all(t, ks, vs)
  t

;============================================================
;======================== Sets ==============================
;============================================================

;==============================
;==== Mandatory Operations ====
;==============================

public deftype Set<K> <: Collection<K> & Lengthable
public defmulti add<?K> (s:Set<?K>, k:K) -> True|False
public defmulti remove<?K> (s:Set<?K>, k:K) -> True|False
public defmulti get<?K> (s:Set<?K>, k:K) -> True|False
public defmulti clear (s:Set) -> False

;==================================
;==== Abstract Implementations ====
;==================================
public defn empty? (s:Set) :
  length(s) == 0

;============================================================
;====================== HashSets ============================
;============================================================

public deftype HashSet<K> <: Set<K>

public defn HashSet<K> (initial-cap: Int
                        hash: K -> Int,
                        key-equal?: (K,K) -> True|False) :
  ;===================
  ;==== Set State ====
  ;===================
  var cap
  var mask
  var limit
  var size
  var keys
  var hashes

  defn init (c:Int) :
    cap = c
    mask = cap - 1
    limit = c >> 1
    keys = Array<K|Sentinel>(cap, sentinel())
    hashes = IntArray(cap)
    size = 0

  defn clear () :
    size = 0
    set-all(keys, 0 to false, sentinel())

  init(next-pow2(max(8, initial-cap)))

  ;===========================
  ;==== Utility Functions ====
  ;===========================
  ;Subtract b from a using modulo arithmetic.
  ;a is assumed to be larger than b.
  defn mod-minus (a:Int, b:Int) :
    if a >= b : a - b
    else : a + cap - b

  ;Retrieve the index from the given hash
  defn loc (h:Int) : h & mask

  ;Retrieve the distance from the initial bucket for
  ;the value in bucket i.
  defn dib (i:Int) : mod-minus(i, loc(hashes[i]))

  ;Retrieve the cluster size starting at bucket i.
  ;If dib0 is true, then buckets with dib == 0 is considered
  ;part of the cluster. Otherwise they are not.
  defn cluster-size (i:Int, dib0:True|False) :
    let loop (i:Int = i, n:Int = 0) :
      if keys[i] is Sentinel : n
      else if (not dib0) and dib(i) == 0 : n
      else if i == cap - 1 : loop(0, n + 1)
      else : loop(i + 1, n + 1)

  ;Shift n elements starting from start one bucket
  ;to the right.
  defn shift-n-right (start:Int, n:Int) :
    for i in (n - 1) through 0 by -1 do :
      val l1 = loc(start + i)
      val l2 = loc(start + i + 1)
      keys[l2] = keys[l1]
      hashes[l2] = hashes[l1]

  ;Shift n elements starting from (start + 1) one bucket
  ;to the left such that they end up in start.
  defn shift-n-left (start:Int, n:Int) :
    for i in 0 to n do :
      val l1 = loc(start + i)
      val l2 = loc(start + i + 1)
      keys[l1] = keys[l2]
      hashes[l1] = hashes[l2]

  ;=========================
  ;==== Entry Functions ====
  ;=========================
  defn new-entry (i:Int, k:K, h:Int) :
    keys[i] = k
    hashes[i] = h
    size = size + 1
    double-capacity() when size >= limit      

  defn remove-entry (i:Int) :
    keys[i] = sentinel()
    size = size - 1

  defn double-capacity () :
    val old-keys = keys
    init(cap << 1)
    for k in old-keys do :
      if k is-not Sentinel :
        insert(k as K)

  ;=======================
  ;==== Set Functions ====
  ;=======================
  defn insert (k:K) :
    ;Hash and initial position
    val h = hash(k)
    val l = loc(h)

    let loop (i:Int = l) :
      defn dibx () : mod-minus(i, l)
      match(keys[i]) :
        (k2:Sentinel) :
          new-entry(i, k, h)
          true
        (k2:K) :
          if hashes[i] == h and key-equal?(k2, k) :
            false
          else if dibx() <= dib(i) :
            loop(loc(i + 1))
          else :
            shift-n-right(i, cluster-size(i,true))
            new-entry(i, k, h)
            true

  defn key? (k:K) :
    ;Hash and initial position
    val h = hash(k)
    val l = loc(h)

    let loop (i:Int = l) :
      defn dibx () : mod-minus(i, l)
      match(keys[i]) :
        (k2:Sentinel) :
          false
        (k2:K) :
          if hashes[i] == h and key-equal?(k2, k) :
            true
          else if dibx() <= dib(i) :
            loop(loc(i + 1))
          else :
            false

  defn remove (k:K) :
    ;Hash and initial position
    val h = hash(k)
    val l = loc(h)

    let loop (i:Int = l) :
      defn dibx () : mod-minus(i, l)
      match(keys[i]) :
        (k2:Sentinel) :
          false
        (k2:K) :
          if hashes[i] == h and key-equal?(k2, k) :
            val n = cluster-size(loc(i + 1), false)
            shift-n-left(i, n)
            remove-entry(loc(i + n))
            true
          else if dibx() <= dib(i) :
            loop(loc(i + 1))
          else :
            false

  ;======================
  ;==== Return Table ====
  ;======================
  new HashSet<K> :
    defmethod add (this, k:K) :
      insert(k)
    defmethod get (this, k:K) :
      key?(k)
    defmethod remove (this, k:K) :
      remove(k)
    defmethod clear (this) :
      clear()
    defmethod to-seq (this) :      
      filter({_ is-not Sentinel}, keys) as Seq<K>
    defmethod length (this) :
      size

;==================================
;==== Convenience Constructors ====
;==================================
public defn HashSet<K> (hash: K -> Int, equal?: (K,K) -> True|False) :
  HashSet<K>(8, hash, equal?)

public defn HashSet<K> () -> HashSet<K> :
  HashSet<K&Hashable&Equalable>(8, hash, equal?)

public defn to-hashset<K> (xs:Seqable<K>) -> HashSet<K> :
  val s = HashSet<K>()
  do(add{s, _}, xs)
  s

;============================================================
;====================== IntSets =============================
;============================================================

public deftype IntSet <: Set<Int>

public defn IntSet (initial-cap:Int) :
  ;===================
  ;==== Set State ====
  ;===================
  var cap
  var mask
  var limit
  var size
  var hashes
  var zero : True|False

  defn init (c:Int) :
    cap = c
    mask = cap - 1
    limit = c >> 1
    size = 0
    hashes = IntArray(cap,0)
    zero = false

  defn clear () :
    size = 0
    set-all(hashes, 0 to false, 0)
    zero = false

  init(next-pow2(max(8, initial-cap)))

  ;===========================
  ;==== Utility Functions ====
  ;===========================
  ;Subtract b from a using modulo arithmetic.
  ;a is assumed to be larger than b.
  defn mod-minus (a:Int, b:Int) :
    if a >= b : a - b
    else : a + cap - b

  ;Retrieve the index from the given hash
  defn loc (h:Int) : h & mask

  ;Retrieve the distance from the initial bucket for
  ;the value in bucket i.
  defn dib (i:Int) : mod-minus(i, loc(hashes[i]))

  ;Retrieve the cluster size starting at bucket i.
  ;If dib0 is true, then buckets with dib == 0 is considered
  ;part of the cluster. Otherwise they are not.
  defn cluster-size (i:Int, dib0:True|False) :
    let loop (i:Int = i, n:Int = 0) :
      if hashes[i] == 0 : n
      else if (not dib0) and dib(i) == 0 : n
      else if i == cap - 1 : loop(0, n + 1)
      else : loop(i + 1, n + 1)

  ;Shift n elements starting from start one bucket
  ;to the right.
  defn shift-n-right (start:Int, n:Int) :
    for i in (n - 1) through 0 by -1 do :
      val l1 = loc(start + i)
      val l2 = loc(start + i + 1)
      hashes[l2] = hashes[l1]

  ;Shift n elements starting from (start + 1) one bucket
  ;to the left such that they end up in start.
  defn shift-n-left (start:Int, n:Int) :
    for i in 0 to n do :
      val l1 = loc(start + i)
      val l2 = loc(start + i + 1)
      hashes[l1] = hashes[l2]

  ;=========================
  ;==== Entry Functions ====
  ;=========================
  defn new-entry (i:Int, k:Int) :
    hashes[i] = k
    size = size + 1
    double-capacity() when size >= limit      

  defn remove-entry (i:Int) :
    hashes[i] = 0
    size = size - 1

  defn double-capacity () :
    val old-zero = zero
    val old-keys = hashes
    init(cap << 1)    
    for k in old-keys do :
      insert(k) when k != 0
    insert(0) when old-zero

  ;=======================
  ;==== Set Functions ====
  ;=======================
  defn insert (k:Int) :
    if k == 0 :
      if not zero :
        zero = true
        size = size + 1
        true
    else :
      ;Hash and initial position
      val l = loc(k)
      let loop (i:Int = l) :
        defn dibx () : mod-minus(i, l)
        if hashes[i] == 0 :
          new-entry(i,k)
          true
        else if hashes[i] == k :
          false
        else if dibx() <= dib(i) :
          loop(loc(i + 1))
        else :
          shift-n-right(i, cluster-size(i,true))
          new-entry(i, k)
          true

  defn key? (k:Int) :
    if k == 0 :
      zero
    else :
      ;Hash and initial position
      val l = loc(k)
      let loop (i:Int = l) :
        defn dibx () : mod-minus(i, l)
        if hashes[i] == 0 :
          false
        else if hashes[i] == k :
          true
        else if dibx() <= dib(i) :
          loop(loc(i + 1))
        else :
          false

  defn remove (k:Int) :
    if k == 0 :
      if zero :
        zero = false
        size = size - 1
        true
    else :
      ;Hash and initial position
      val l = loc(k)
      let loop (i:Int = l) :
        defn dibx () : mod-minus(i, l)
        if hashes[i] == 0 :
          false
        else if hashes[i] == k :
          val n = cluster-size(loc(i + 1), false)
          shift-n-left(i, n)
          remove-entry(loc(i + n))
          true
        else if dibx() <= dib(i) :
          loop(loc(i + 1))
        else :
          false

  ;======================
  ;==== Return Table ====
  ;======================
  new IntSet :
    defmethod add (this, k:Int) :
      insert(k)
    defmethod get (this, k:Int) :
      key?(k)
    defmethod remove (this, k:Int) :
      remove(k)
    defmethod clear (this) :
      clear()
    defmethod to-seq (this) :      
      val xs = filter({_ != 0}, hashes)
      if zero : cat([0], xs)
      else : xs
    defmethod length (this) :
      size

;==================================
;==== Convenience Constructors ====
;==================================
public defn IntSet () :
  IntSet(8)

public defn to-intset (xs:Seqable<Int>) -> IntSet :
  val s = IntSet()
  do(add{s, _}, xs)
  s
