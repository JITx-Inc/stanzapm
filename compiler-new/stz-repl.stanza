defpackage stz/repl :
  import core
  import collections
  import reader
  import parser
  import macro-utils
  import stz/utils
  import stz/il-ir
  import lang/check
  import stz/dl-ir with:
    prefix(Import) => DL
  import stz/tl-ir
  import stz/el-ir
  import stz/vm-ir
  import stz/vm
  import stz/core-macros
  import stz/input
  import stz/renamer
  import stz/resolver
  import stz/type
  import stz/tl-to-el
  import stz/dl
  import stz/el
  import stz/el-to-vm
  import stz/algorithms
  import line-noise/prompter

;<algorithm>=================================================
;====================== Algorithms ==========================
;============================================================

Loading files:

The input is a sequence of file and package names:

  e.g. "mypackage.stanza", "support.pkg", mylib, "mypackage2.stanza"

Now load, rename, and type them and their dependencies. Grab the
dependencies from either the currently defined environment, or from a
loaded .pkg file if none exists.

Then check that their definitions can be loaded into the current
environment.

If we get to this point successfully, then everything is fine, and the
code is ready to be loaded into the virtual machine. So load it, and
run the package initializers.

;============================================================
;=================================================<algorithm>

;============================================================
;===================== REPL Language ========================
;============================================================

deftype RExp
defstruct LoadVMP <: RExp :
  inputs: Tuple<String>
with:
  printer => true  
defstruct Load <: RExp :
  inputs: Tuple<String|Symbol>
with:
  printer => true
defstruct Update <: RExp  
with:
  printer => true
defstruct Reload <: RExp
with:
  printer => true
defstruct Clear <: RExp
with:
  printer => true
defstruct Import <: RExp :
  import: IImport
with:
  printer => true
defstruct Inside <: RExp :
  package: Symbol|False
with:
  printer => true
defstruct Unimport <: RExp :
  package: Symbol
with:
  printer => true
defstruct Eval <: RExp :
  form
with:
  printer => true
defstruct NoOp <: RExp
with:
  printer => true

defstruct ReplSyntaxError <: Exception :
  info: FileInfo|False
  message: String
defmethod print (o:OutputStream, e:ReplSyntaxError) :
  val infostr = "" when info(e) is False else "%_: " % [info(e)]
  print-all(o, [infostr, message(e)])

defsyntax repl :
  public defproduction rexp : RExp
  defrule rexp = (?x:#@rexp #E) : x

  defproduction E : False
  defrule E != (_)
  defrule E = () : false
  
  public defproduction @rexp : RExp
  defrule @rexp = (load ?input0:#input ?inputs:#input! ...) :
    Load(to-tuple(cons(input0, inputs)))
  defrule @rexp = (loadvm ?input0:#string ?inputs:#string! ...) :
    LoadVMP(to-tuple(cons(input0, inputs)))
  defrule @rexp = (?e:#import-clause #E) :
    Import(e)
  defrule @rexp = (inside - #E) :
    Inside(false)
  defrule @rexp = (inside ?p:#symbol) :
    Inside(p)
  defrule @rexp = (unimport ?name:#symbol) :
    Unimport(name)
  defrule @rexp = (update #E) :
    Update()
  defrule @rexp = (reload #E) :
    Reload()
  defrule @rexp = (clear #E) :
    Clear()
  defrule @rexp = (?forms ...) :
    if empty?(forms) : NoOp()
    else : Eval(forms)

  ;===== Inputs =====
  defproduction input : String|Symbol
  defrule input = (?file:#string) : file
  defrule input = (?pkg:#symbol) : pkg

  defproduction input! : String|Symbol
  defrule input! = (?i:#input) : i
  fail-if input! = () : ReplSyntaxError(closest-info(), "Input must be either a string or a symbol.")

  ;===== Imports =====
  defproduction prefix-clause! : IPrefix
  defrule prefix-clause! = (prefix => ?p:#symbol!) :
    IPrefix(false, to-string(p))
  defrule prefix-clause! = (prefix(?names:#symbol! ...) => ?p:#symbol!) :
    IPrefix(to-tuple(names), to-string(p))
  fail-if prefix-clause! = () :
    ReplSyntaxError(closest-info(), "Expected a prefix clause here.")

  defproduction prefix-clauses : Tuple<IPrefix>
  defrule prefix-clauses = (with #:! (?ps:#prefix-clause! ...)) : to-tuple(ps)
  defrule prefix-clauses = () : []

  defproduction import-clause : IImport
  defrule import-clause = (import ?package:#symbol ?ps:#prefix-clauses) :
    IImport(package, ps)

  ;===== Primitives =====
  defproduction int : Int
  defrule int = (?x) when unwrap-token(x) is Int : unwrap-token(x)

  defproduction byte : Byte
  defrule byte = (?x) when unwrap-token(x) is Byte : unwrap-token(x)

  defproduction string : String
  defrule string = (?x) when unwrap-token(x) is String : unwrap-token(x)

  defproduction symbol : Symbol
  defrule symbol = (?x) when unwrap-token(x) is Symbol : unwrap-token(x)

  defproduction string! : String
  defrule string! = (?x:#string) : x
  fail-if string! = () : ReplSyntaxError(closest-info(), "Expected a string here.")

  defproduction symbol! : Symbol
  defrule symbol! = (?x:#symbol) : x
  fail-if symbol! = () : ReplSyntaxError(closest-info(), "Expected a symbol here.")

  defproduction :!
  defrule :! = (?x: ~ :) : x
  fail-if :! = () : ReplSyntaxError(closest-info(), "Colon expected here.")

defn read-repl-exp (read-line:() -> List<Token>|False) -> RExp|False :
  try :
    let loop () :
      match(read-line()) :
        (forms:List) :
          match(parse-syntax[repl / #rexp](forms)) :
            (e:NoOp) : loop()
            (e) : e
        (forms:False) :
          false
  catch (e:LexerException) :
    throw(ReplErrors([e]))
  catch (e:NoMatchException) :
    throw(ReplErrors(causes(e)))

defn read-repl-exp (inputstream:InputStream) :
  defn read-input-line () : /read-line(inputstream)
  read-repl-exp(read-input-line)

defn read-repl-exp () :
  defn read-input-line () :
    read-line(LineNoisePrompter("stanza> ", "      > "))
  read-repl-exp(read-input-line)

;============================================================
;======================= Package Ordering ===================
;============================================================
;<debug>
defn initialization-order (packages:Seqable<Symbol>, denv:DEnv) -> Collection<Symbol> :
  ;Create import graph
  val import-graph = to-hashtable<Symbol, List<Symbol>> $
    for io in packageios(denv) seq :
      package(io) => to-list(imported-packages(io))

  ;Compute initialization ordering
  initialization-order(import-graph, to-tuple(packages))
;<debug>

;============================================================
;=================== Default Imports ========================
;============================================================

defn core-imports () :
  [IImport(`core), IImport(`collections)]

;============================================================
;======================= Loading ============================
;============================================================

deftype REPL
defmulti load-files (repl:REPL, inputs:Tuple<String|Symbol>) -> False
defmulti load-vmp (repl:REPL, inputs:Tuple<String>) -> False
defmulti update-files (repl:REPL) -> False
defmulti reload (repl:REPL) -> False
defmulti load-repl (repl:REPL, form) -> False
defmulti import (repl:REPL, import:IImport) -> False
defmulti unimport (repl:REPL, package:Symbol) -> False
defmulti inside (repl:REPL, package:Symbol|False) -> False
defmulti clear (repl:REPL) -> False

defn REPL () :
  ;============================================================
  ;===================== REPL State ===========================
  ;============================================================
  val vm = VirtualMachine()
  val denv = DEnv()
  val repl-env = REPLEnv()
  val file-env = FileEnv()

;  ;============================================================
;  ;====================== Loaded Packages =====================
;  ;============================================================
;  defn loaded-packages () :
;    for p in packageios(denv) seq? :
;      if repl-package?(repl-env, package(p)) : None()
;      else : One(package(p))
;      
;  defn loaded-package? (name:Symbol) :
;    packageio(denv, name) is-not False
;
  ;============================================================
  ;================== Stages of Loading =======================
  ;============================================================
  ;Read from file
  defn read! (filename:String) -> FileForm :
    try :
      val timestamp = time-modified(filename)
      FileForm(filename, timestamp, read-file(filename))
    catch (e:IOException) : throw(ReplErrors([e]))
    catch (e:LexerException) : throw(ReplErrors([e]))

  ;Macroexpansion
  defn macroexpand! (x) -> ? :
    match(x:FileForm) :
      sub-form(x, macroexpand!(form(x)))
    else :
      try : cons(`$begin, parse-syntax[core / #exps!](x))
      catch (e:NoMatchException) : throw(ReplErrors(causes(e)))
      catch (e:Exception) : throw(ReplErrors([e]))

  ;Conversion to IL IR
  defn to-ipackages! (expanded:Tuple<FileForm>) -> [Tuple<IPackage>, Tuple<FileAssoc>] :
    val check-errors = Vector<CheckError>()
    val ipackages = Vector<IPackage>()
    val file-assocs = Vector<FileAssoc>()
    for e in expanded do :
      try :
        val pkgs = to-ipackages(form(e), core-imports())
        add(file-assocs, FileAssoc(filename(e), timestamp(e), map(name,pkgs)))
        add-all(ipackages, pkgs)
      catch (e:CheckErrors) :
        add-all(check-errors, errors(e))
    throw(ReplErrors(check-errors)) when not empty?(check-errors)
    [to-tuple(ipackages), to-tuple(file-assocs)]
  defn to-repl-ipackage! (expanded) -> IPackage :
    try : ReplPackage(repl-env, to-il(expanded))
    catch (e:CheckErrors) : throw(ReplErrors(errors(e)))

;  ;Check that all required types are still defined
;  defn check-types-exist (ipkgs:Tuple<IPackage>, live:Tuple<Rec>) :
;    val packages = to-hashset<Symbol>(seq(name, ipkgs))
;    val types = exported-types(ipkgs)
;    check-export-types(denv, packages, types, live)
;  defn check-types-exist! (ipkgs:Tuple<IPackage>, live:Tuple<Rec>) :
;    match(check-types-exist(ipkgs, live)) :
;      (l:LoadSuccess) : false
;      (l:LoadErrors) : throw(ReplErrors(errors(l)))
;
;  ;Renaming
;  defn rename! (ipkgs:Tuple<IPackage>) :
;    match(rename-il(ipkgs)) :
;      (renamed:Tuple<IPackage>) : renamed
;      (e:RenameErrors) : throw(ReplErrors(errors(e)))
;  defn rename! (ipkg:IPackage) :
;    rename!([ipkg])[0]
;
;  ;Resolve
;  defn resolve! (ipkgs:Tuple<IPackage>, priority:False|(Symbol -> Int)) :
;    val env = new stz/resolver/Env :
;      defmethod packageio (this, package:Symbol) :
;        packageio(denv, package)    
;    match(resolve-il(ipkgs, env, priority)) :
;      (e:ResolveErrors) : throw(ReplErrors(errors(e)))
;      (e:Tuple<IPackage>) : e
;  defn resolve! (ipkgs:Tuple<IPackage>) :
;    resolve!(ipkgs, false)
;  defn resolve-repl! (ipkg:IPackage) :
;    resolve!([ipkg], package-priority{repl-env, name(ipkg), _})
;
;  ;Type Checking
;  defn type! (ipkgs:Tuple<IPackage>) :
;    val env = new stz/type/Env :
;      defmethod packageio (this, package:Symbol) :
;        packageio(denv, package) as PackageIO
;    match(type-program(ipkgs, env)) :
;      (e:TProg) : e
;      (e:TypeErrors) : throw(ReplErrors(messages(e)))
;
;  ;Check whether any globals have been redefined to be a different type
;  defn check-globals! (tprog:TProg) :
;    val ios = map(packageio, packages(tprog))
;    match(check-globals(denv, ios)) :
;      (result:LoadErrors) : throw(ReplErrors(errors(result)))
;      (result:LoadSuccess) : false      
;
;  ;Check packages can be loaded into existing environment
;  defn check-load (tprog:TProg, live:Tuple<Rec>) :
;    val ios = map(packageio, packages(tprog))
;    check-exports(denv, ios, live)
;  defn check-load! (tprog:TProg, live:Tuple<Rec>) :
;    match(check-load(tprog, live)) :
;      (result:LoadErrors) : throw(ReplErrors(errors(result)))
;      (result:LoadSuccess) : false
;
;  ;Save associations to file environment
;  defn save-to-file-env! (file-pkgs:Tuple<FileForm<Symbol>>) :
;    do(register{file-env, _}, file-pkgs)
;
;  ;Load into Virtual Machine
;  defn load-vm! (tprog:TProg) :
;    val epkgs = to-el(tprog, true)
;    val vmpkgs = map(compile{lower-unoptimized(_)}, epkgs)
;    load(denv, seq(packageio, vmpkgs))
;    load(vm, vmpkgs, false)
;
;  ;Run the given packages in the virtual machine
;  defn run-vm! (packages:Seqable<Symbol>) :
;    for p in initialization-order(packages, denv) do :
;      init-package(vm, p)
;
;  ;Load into virtual machine without initialization
;  defn update-vm! (tprog:TProg) :
;    val epkgs = to-el(tprog, true)
;    val vmpkgs = map(compile{lower-unoptimized(_)}, epkgs)
;    load(denv, seq(packageio, vmpkgs))
;    load(vm, vmpkgs, true)
;
  ;============================================================
  ;===================== File Loading =========================
  ;============================================================

  ;Load files
  defn load-files (inputs:Tuple<String|Symbol>) :
    println("load-files: %_" % [inputs])
    val files = categorize(inputs)
    println(files)

    ;Load all files
    val expanded = map({macroexpand! $ read! $ _}, stanza-files(files))
    val [input, file-assocs] = to-ipackages!(expanded)
    do(println, input)
;    val typed = type! $ resolve! $ rename! $ input
;    check-load!(typed, live)
;    save-to-file-env!(file-pkgs)
;    load-vm!(typed)
;    run-vm!(cat(old-packages, new-packages)) where :
;      val old-packages = filter-by<Symbol>(inputs)
;      val new-packages = seq(name,/packages(typed))

  ;DEBUGGING
;  defn load-vmps (inputs:Tuple<String>) :
;    val vmpkgs = map(read-vm-package, inputs)
;    load(denv, seq(packageio, vmpkgs))
;    load(vm, vmpkgs, false)
;    run-vm!(seq(package, vmpkgs))
;
;  ;Clear all repl definitions
;  defn clear-repl () :
;    ;Compute what live repl records are required
;    val live = compute-live(vm, repl-packages(repl-env))
;    val empty-ios = to-tuple $
;      for p in repl-packages(repl-env) seq :
;        PackageIO(p, [], [], [])
;    match(check-exports(denv, empty-ios, live)) :
;      (e:LoadErrors) : throw(ReplErrors(errors(e)))
;      (e:LoadSuccess) : false
;    ;Now clear the repl packages
;    val empty-vmpkgs = for io in empty-ios map :
;      VMPackage(io, false, [], [], [], [], [], [], [], [])
;    load(denv, empty-ios)
;    load(vm, empty-vmpkgs, false)
;    clear(repl-env)
;
;  ;update changed files
;  defn changed-tprog (return:TProg|False -> ?, live:Tuple<Rec>) :
;    ;Compute the changed files
;    val changed-files = changed-files(file-env)
;    if empty?(changed-files) :
;      return(false)
;    else :
;      ;Track the files to reload.
;      ;Initialize them with the set of all changed files.
;      val reload-files = to-hashset<String>(changed-files)
;      let loop () :
;        val done? = label<True|False> break :
;          let :
;            val filenames = to-tuple(reload-files)
;            val expanded = map({macroexpand! $ read! $ _}, filenames)
;            val [input, file-pkgs] = to-ipackages! $ expanded
;            check-load-errors!(check-types-exist(input, live))
;            val typed = type! $ resolve! $ rename! $ input
;            check-load-errors!(check-load(typed, live))
;            return(typed)
;            save-to-file-env!(file-pkgs)
;            true
;          where :
;            defn check-load-errors! (e:LoadResult) :
;              match(e:LoadErrors) :
;                ;Some errors can be recovered from by including their source
;                ;files during the recompilation. Other errors are unrecoverable.
;                ;Classify these errors now.
;                val recovery-actions = Vector<(() -> ?)>()
;                val unrecoverable-errors = Vector<LoadError>()
;                for e in errors(e) do :
;                  match(source(e)) :
;                    (src:LoadedPackage) :
;                      if source-file?(file-env, package(src)) :
;                        add(recovery-actions, fn () :
;                          add(reload-files, source-file(file-env, package(src))))
;                      else : add(unrecoverable-errors, e)
;                    (src:LiveObject) : add(unrecoverable-errors, e)
;                ;If there are unrecoverable errors, then throw the error
;                if not empty?(unrecoverable-errors) :
;                  throw(ReplErrors(unrecoverable-errors))
;                ;Otherwise run the recovery actions and try again
;                for f in recovery-actions do : f()
;                break(false)
;        loop() when not done?    
;
;  ;Update files
;  defn update-files () :
;    val live = compute-live(vm, [])
;    within typed = changed-tprog(live) :
;      match(typed:TProg) :
;        check-globals!(typed)
;        update-vm!(typed)
;      else :
;        throw $ ReplErrors $ [NoChangedFiles()]
;
;  ;Reload
;  defn reload () :
;    within typed = changed-tprog([]) :
;      match(typed:TProg) :
;        load-vm!(typed)
;
;    ;Clear all REPL definitions
;    val empty-ios = to-tuple $
;      for p in repl-packages(repl-env) seq :
;        PackageIO(p, [], [], [])
;    val empty-vmpkgs = for io in empty-ios map :
;      VMPackage(io, false, [], [], [], [], [], [], [], [])
;    load(denv, empty-ios)
;    load(vm, empty-vmpkgs, false)
;    clear(repl-env)
;
;    ;Clear all definitions and rerun
;    clear-globals(vm)
;    run-vm!(loaded-packages())
;
;  ;Load from repl
;  defn load-repl (form) :
;    val typed = type! $ resolve-repl! $ rename! $ to-repl-ipackage! $ macroexpand! $ form    
;    register(repl-env, packageio(packages(typed)[0]))
;    load-vm!(typed)
;    run-vm!([name(packages(typed)[0])])

  ;============================================================
  ;===================== REPL Structure =======================
  ;============================================================
  new REPL :
    defmethod load-files (this, inputs:Tuple<String|Symbol>) :
      load-files(inputs)
;    defmethod load-vmp (this, inputs:Tuple<String>) :
;      load-vmps(inputs)
;    defmethod update-files (this) :
;      update-files()
;    defmethod load-repl (this, form) :
;      load-repl(form)
;    defmethod clear (this) :
;      clear-repl()
;    defmethod reload (this) :
;      reload()
;    defmethod import (this, import:IImport) :
;      if not loaded-package?(package(import)) :
;        throw $ ReplErrors $ [PackageNotLoaded(package(import))]
;      else : /import(repl-env, import)
;    defmethod unimport (this, package:Symbol) :
;      if not unimport(repl-env, package) :
;        throw $ ReplErrors $ [PackageNotImported(package)]
;    defmethod inside (this, package:Symbol) :
;      if not loaded-package?(package) :
;        throw $ ReplErrors $ [PackageNotLoaded(package)]
;      else : inside(repl-env, package)
;    defmethod inside (this, package:False) :
;      if current-inside(repl-env) is False :
;        throw $ ReplErrors $ [NotInsidePackage()]
;      inside(repl-env, false)

defstruct FileForm :
  filename: String
  timestamp: Long
  form with: (updater => sub-form)

;============================================================
;=================== File Environment =======================
;============================================================

deftype FileEnv
defmulti register (e:FileEnv, file-pkg:FileForm) -> False
defmulti changed-files (e:FileEnv) -> Tuple<String>
defmulti source-file (e:FileEnv, package:Symbol) -> String
defmulti source-file? (e:FileEnv, package:Symbol) -> True|False

defstruct FileAssoc :
  filename: String
  timestamp: Long
  packages: Tuple<Symbol>

defn FileEnv () :
  ;Track which source file each package came from
  val source-file-table = HashTable<Symbol,String>()
  val timestamp-table = HashTable<String,Long>()

  new FileEnv :
    defmethod register (this, file-pkg:FileForm) :
      source-file-table[form(file-pkg)] = filename(file-pkg)
      timestamp-table[filename(file-pkg)] = timestamp(file-pkg)
    defmethod changed-files (this) :
      to-tuple $ for file in values(source-file-table) seq? :
        try :
          val new-timestamp = time-modified(file)
          val old-timestamp = timestamp-table[file]
          if new-timestamp != old-timestamp : One(file)
          else : None()
        catch (e:FileStatException) :
          None()
    defmethod source-file (this, package:Symbol) :
      source-file-table[package]
    defmethod source-file? (this, package:Symbol) :
      key?(source-file-table, package)

;============================================================
;=================== REPL User Environment ==================
;============================================================

deftype REPLEnv

;For registering successfully loaded packages
defmulti register (e:REPLEnv, packageio:PackageIO) -> False

;For import/unimport commands
defmulti import (e:REPLEnv, import:IImport) -> False
defmulti unimport (e:REPLEnv, package:Symbol) -> True|False

;For inside command
defmulti inside (e:REPLEnv, package:Symbol|False) -> False
defmulti current-inside (e:REPLEnv) -> Symbol|False

;For resolution
defmulti package-priority (e:REPLEnv, self:Symbol, package:Symbol) -> Int

;For constructing the IPackage
defmulti ReplPackage (e:REPLEnv, exp:IExp) -> IPackage

;List names of all repl packages
defmulti repl-packages (e:REPLEnv) -> Seqable<Symbol>
defmulti repl-package? (e:REPLEnv, name:Symbol) -> True|False

;Clear repl environment
defmulti clear (e:REPLEnv) -> False

defn REPLEnv () :
  ;Previous repl packages
  val previous-packages = Vector<PackageIO>()
  val package-index = HashTable<Symbol,Int>()
  ;Current desired imports
  val imports = HashTable<Symbol, IImport>()
  ;Currently inside package
  var inside-package:Symbol|False = false

  ;Initialize imports
  defn reset () :
    clear(previous-packages)
    clear(package-index)
    clear(imports)
    inside-package = false
    for i in core-imports() do :
      imports[package(i)] = i
  reset()    

  ;Construct IPackage
  defn make-repl-package (exp:IExp) :
    ;First ensure legitimacy
    ensure-repl-expression(exp)
    
    ;Next create import list
    val package-imports = Vector<IImport>()    
    ;Import all previous repl packages
    for p in previous-packages do :
      add(package-imports, IImport(package(p), [], false, true))
    ;Import all current imports
    for i in values(imports) do :
      if package(i) != inside-package :
        add(package-imports, i)
    ;Import the current 'inside' package
    match(inside-package:Symbol) :
      add(package-imports, IImport(inside-package, [], false, true))

    ;Create IPackage
    IPackage(gensym(`repl), to-tuple(package-imports), List(exp), info(exp))

  ;Resolution priority of IPackage
  defn package-priority (self:Symbol, p:Symbol) -> Int :
    if p == inside-package : 1
    else if p == self : INT-MAX
    else if key?(package-index, p) : package-index[p] + 2
    else : 0

  ;Construct environment object
  new REPLEnv :
    defmethod import (this, import:IImport) :
      imports[package(import)] = import
    defmethod unimport (this, package:Symbol) -> True|False :
      remove(imports, package)
    defmethod inside (this, package:Symbol|False) :
      inside-package = package
    defmethod current-inside (this) :
      inside-package
    defmethod register (this, packageio:PackageIO) :
      add(previous-packages, packageio)
      package-index[package(packageio)] = length(previous-packages) - 1
    defmethod package-priority (this, self:Symbol, package:Symbol) -> Int :
      package-priority(self, package)
    defmethod ReplPackage (this, exp:IExp) :
      make-repl-package(exp)
    defmethod repl-packages (this) :
      seq(package, previous-packages)
    defmethod repl-package? (this, name:Symbol) :
      key?(package-index, name)
    defmethod clear (this) :
      reset()

defn ensure-repl-expression (expression:IExp) :
  ;Detect illegal expressions
  val errors = Vector<Exception>()
  defn not-allowed! (e:IExp) :
    val type-str = match(e) :
      (e:IDefPackage) : "defpackage"
      (e:IDefType) : "deftype"
      (e:IDefmulti) : "defmulti"
      (e:IDefmethod) : "defmethod"
      (e:ILSDefType) : "lostanza deftype"
      (e:ILSDefmethod) : "lostanza defmethod"
      (e:ILSExternFn) : "externfn"
    add(errors, InvalidExp(type-str))        

  ;Sweep through expressions and detect invalid expressions
  let loop (e:IExp = expression) :
    match(e) :
      (e:IBegin) : do(loop, exps(e))
      (e:IVisibility) : loop(exp(e))
      (e:IDefPackage|IDefType|IDefmulti|IDefmethod|
         ILSDefType|ILSDefmethod|ILSExternFn) : not-allowed!(e)
      (e) : false

  ;Throw errors if there are any
  throw(ReplErrors(errors)) when not empty?(errors)

;<doc>=======================================================
;==================== Categorization ========================
;============================================================

Classifies the incoming files into four types:
  myfile.stanza
  myfile.pkg
  myfile.vmbindings
  mypackage

It is assumed that package names have no '.' character in them. This
will be enforced by the language checker.

The ordering of the files are kept in the field all-input-files. This
ordering is important when determining the evaluation order of the
top-level statements in the program.

;============================================================
;=======================================================<doc>

defstruct CategorizedFiles :
  stanza-files: Tuple<String>
  pkg-files: Tuple<String>
  packages: Tuple<Symbol>
  all-inputs: Tuple<String|Symbol>
with:
  printer => true

defn categorize (inputs:Seqable<String|Symbol>) :
  val stanza-files = Vector<String>()
  val pkg-files = Vector<String>()
  val packages = Vector<Symbol>()
  val all-inputs = Vector<String|Symbol>()
  val errors = Vector<Exception>()
  for name in inputs do :
    match(name) :
      (name:Symbol) :
        add(packages, name)
        add(all-inputs, name)
      (name:String) :
        switch suffix?{name, _} :
          ".stanza" :
            add(stanza-files, name)
            add(all-inputs, name)
          ".pkg" :
            add(pkg-files, name)
            add(all-inputs, name)
          else :
            add(errors, InvalidExtension(name))
  throw(ReplErrors(errors)) when not empty?(errors)
  CategorizedFiles(to-tuple(stanza-files), to-tuple(pkg-files),
                   to-tuple(packages), to-tuple(all-inputs))

;============================================================
;======================== Errors ============================
;============================================================

defstruct ReplErrors <: Exception :
  messages: Collection

defn PackageNotLoaded (package:Symbol) :
  Exception $ "Could not import package %~. Package has not been loaded." % [package]

defn PackageNotImported (package:Symbol) :
  Exception $ "Could not unimport package %~. Package is not yet imported." % [package]

defn NotInsidePackage () :
  Exception $ "Not currently inside any package."

defn NoChangedFiles () :
  Exception $ "No changes detected in any loaded file."

defn InvalidExtension (file:String) :
  Exception $ "File %~ does not have a valid Stanza file extension." % [file]

defn InvalidExp (exp-type:String) :
  Exception $ "The interactive REPL does not support %_ statements." % [exp-type]

defn LoadMultipleScripts (script:String) :
  Exception $ "Invalid attempt to load script %~ alongside other files. Scripts must be loaded by themselves." % [script]  

;============================================================
;======================== REPL Loop =========================
;============================================================

defn script? (exp:Load) -> String|False :
  defn script? (s:String|Symbol) :
    match(s:String) : suffix?(s, ".repl")
  val s = find(script?, inputs(exp))
  match(s:String) :
    if length(inputs(exp)) > 1 :
      throw(ReplErrors([LoadMultipleScripts(s)]))
    s

defn eval-exp (repl:REPL, exp:RExp) :
  match(exp) :
    (exp:Load) :
      match(script?(exp)) :
        (file:String) : run-script(repl, file)
        (_:False) : load-files(repl, inputs(exp))
    (exp:LoadVMP) : load-vmp(repl, inputs(exp))
    (exp:Eval) : load-repl(repl, form(exp))
    (exp:Import) : import(repl, import(exp))
    (exp:Unimport) : unimport(repl, package(exp))
    (exp:Inside) : inside(repl, package(exp))
    (exp:Update) : update-files(repl)
    (exp:Reload) : reload(repl)
    (exp:Clear) : clear(repl)  

defn run-script (repl:REPL, s:String) :
  try :
    val file = FileInputStream(s)
    try :
      let loop () :
        val exp = read-repl-exp(file)
        match(exp:RExp) :
          eval-exp(repl, exp)
          loop()
    finally :
      close(file)
  catch (e:IOException) :
    throw(ReplErrors([e]))

public defn repl () :
  val repl = REPL()
  let loop () :
    val exp = read-repl-exp()
    match(exp:RExp) :
      try : eval-exp(repl, exp)
      catch (e:ReplErrors) : do(println, messages(e))
      loop()