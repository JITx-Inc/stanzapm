defpackage stz/repl :
  import core
  import collections
  import reader
  import parser
  import macro-utils
  import stz/utils
  import stz/il-ir
  import lang/check
  import stz/dl-ir with:
    prefix(Import) => DL
  import stz/tl-ir
  import stz/el-ir
  import stz/vm-ir
  import stz/vm
  import stz/core-macros
  import stz/input
  import stz/renamer
  import stz/resolver
  import stz/type
  import stz/tl-to-el
  import stz/dl
  import stz/el
  import stz/el-to-vm
  import stz/algorithms
  import line-noise/prompter
  import stz/pkg
  import stz/ids

;<algorithm>=================================================
;====================== Algorithms ==========================
;============================================================

# Iteratively loading files #

When attempting to load a set of input source files, it is possible
that they are inconsistent with some already loaded packages. For
example, a previously loaded package 'oldpackage' may be expecting the
function 'f' in 'mypackage' to return an 'Int', and you have just
changed 'f' in 'mypackage.stanza' to return a 'String'.

Instead of simply erroring at this stage, we would like to iteratively
load in 'oldpackage.stanza' and try compiling it against the new
definition of 'f'. Maybe it works! And even if it doesn't work, we'll
get a better error message than before.

Input:
  files: Tuple<String>
  update?: True|False
Output:
  epackages: Tuple<EPackage|Pkg>

If update? is true, then we assume that we are only updating the code
definitions, and that the global variables will not be re-initialized.

;============================================================
;=================================================<algorithm>

;============================================================
;===================== REPL Language ========================
;============================================================

deftype RExp
defstruct LoadVMP <: RExp :
  inputs: Tuple<String>
with:
  printer => true
defstruct Load <: RExp :
  inputs: Tuple<String|Symbol>
with:
  printer => true
defstruct Update <: RExp
with:
  printer => true
defstruct Reload <: RExp
with:
  printer => true
defstruct Clear <: RExp
with:
  printer => true
defstruct Import <: RExp :
  import: IImport
with:
  printer => true
defstruct Inside <: RExp :
  package: Symbol|False
with:
  printer => true
defstruct Unimport <: RExp :
  package: Symbol
with:
  printer => true
defstruct Eval <: RExp :
  form
with:
  printer => true
defstruct NoOp <: RExp
with:
  printer => true

defstruct ReplSyntaxError <: Exception :
  info: FileInfo|False
  message: String
defmethod print (o:OutputStream, e:ReplSyntaxError) :
  val infostr = "" when info(e) is False else "%_: " % [info(e)]
  print-all(o, [infostr, message(e)])

defsyntax repl :
  public defproduction rexp : RExp
  defrule rexp = (?x:#@rexp #E) : x

  defproduction E : False
  defrule E != (_)
  defrule E = () : false

  public defproduction @rexp : RExp
  defrule @rexp = (load ?input0:#input ?inputs:#input! ...) :
    Load(to-tuple(cons(input0, inputs)))
  defrule @rexp = (loadvm ?input0:#string ?inputs:#string! ...) :
    LoadVMP(to-tuple(cons(input0, inputs)))
  defrule @rexp = (?e:#import-clause #E) :
    Import(e)
  defrule @rexp = (inside - #E) :
    Inside(false)
  defrule @rexp = (inside ?p:#symbol) :
    Inside(p)
  defrule @rexp = (unimport ?name:#symbol) :
    Unimport(name)
  defrule @rexp = (update #E) :
    Update()
  defrule @rexp = (reload #E) :
    Reload()
  defrule @rexp = (clear #E) :
    Clear()
  defrule @rexp = (?forms ...) :
    if empty?(forms) : NoOp()
    else : Eval(forms)

  ;===== Inputs =====
  defproduction input : String|Symbol
  defrule input = (?file:#string) : file
  defrule input = (?pkg:#symbol) : pkg

  defproduction input! : String|Symbol
  defrule input! = (?i:#input) : i
  fail-if input! = () : ReplSyntaxError(closest-info(), "Input must be either a string or a symbol.")

  ;===== Imports =====
  defproduction prefix-clause! : IPrefix
  defrule prefix-clause! = (prefix => ?p:#symbol!) :
    IPrefix(false, to-string(p))
  defrule prefix-clause! = (prefix(?names:#symbol! ...) => ?p:#symbol!) :
    IPrefix(to-tuple(names), to-string(p))
  fail-if prefix-clause! = () :
    ReplSyntaxError(closest-info(), "Expected a prefix clause here.")

  defproduction prefix-clauses : Tuple<IPrefix>
  defrule prefix-clauses = (with #:! (?ps:#prefix-clause! ...)) : to-tuple(ps)
  defrule prefix-clauses = () : []

  defproduction import-clause : IImport
  defrule import-clause = (import ?package:#symbol ?ps:#prefix-clauses) :
    IImport(package, ps)

  ;===== Primitives =====
  defproduction int : Int
  defrule int = (?x) when unwrap-token(x) is Int : unwrap-token(x)

  defproduction byte : Byte
  defrule byte = (?x) when unwrap-token(x) is Byte : unwrap-token(x)

  defproduction string : String
  defrule string = (?x) when unwrap-token(x) is String : unwrap-token(x)

  defproduction symbol : Symbol
  defrule symbol = (?x) when unwrap-token(x) is Symbol : unwrap-token(x)

  defproduction string! : String
  defrule string! = (?x:#string) : x
  fail-if string! = () : ReplSyntaxError(closest-info(), "Expected a string here.")

  defproduction symbol! : Symbol
  defrule symbol! = (?x:#symbol) : x
  fail-if symbol! = () : ReplSyntaxError(closest-info(), "Expected a symbol here.")

  defproduction :!
  defrule :! = (?x: ~ :) : x
  fail-if :! = () : ReplSyntaxError(closest-info(), "Colon expected here.")

defn read-repl-exp (read-line:() -> List<Token>|False) -> RExp|False :
  try :
    let loop () :
      match(read-line()) :
        (forms:List) :
          match(parse-syntax[repl / #rexp](forms)) :
            (e:NoOp) : loop()
            (e) : e
        (forms:False) :
          false
  catch (e:LexerException) :
    throw(ReplErrors([e]))
  catch (e:NoMatchException) :
    throw(ReplErrors(causes(e)))

defn read-repl-exp (inputstream:InputStream) :
  defn read-input-line () : /read-line(inputstream)
  read-repl-exp(read-input-line)

defn read-repl-exp () :
  defn read-input-line () :
    read-line(LineNoisePrompter("stanza> ", "      > "))
  read-repl-exp(read-input-line)

;============================================================
;======================= Loading ============================
;============================================================

deftype REPL
defmulti load-files (repl:REPL, inputs:Tuple<String|Symbol>) -> False
defmulti load-vmp (repl:REPL, inputs:Tuple<String>) -> False
defmulti update-files (repl:REPL) -> False
defmulti reload (repl:REPL) -> False
defmulti load-repl (repl:REPL, form) -> False
defmulti import (repl:REPL, import:IImport) -> False
defmulti unimport (repl:REPL, package:Symbol) -> False
defmulti inside (repl:REPL, package:Symbol|False) -> False
defmulti clear (repl:REPL) -> False

defn REPL () :
  ;============================================================
  ;===================== REPL State ===========================
  ;============================================================
  val vm = VirtualMachine()
  val denv = DEnv()
  val repl-env = REPLEnv()
  val file-env = FileEnv()

  ;============================================================
  ;===================== File Loading =========================
  ;============================================================
  ;Load files
  defn load-files (inputs:Tuple<String|Symbol>) :
    within intercept-errors() :
      ;Load in packages and inputs
      val input-packages = Vector<Symbol>()
      val file-assocs = Vector<FileAssoc>()
      val input-pkgs = Vector<Pkg>()
      val ipackages = Vector<IPackage>()
      val pkgloader = PkgLoader()
      for input in inputs do :
        switch(category(input)) :
          `package :
            val pkg-name = input as Symbol
            if packageio(denv,pkg-name) is-not False :
              add(input-packages, pkg-name)
            else :
              val pkg = load-pkg(pkgloader, pkg-name)
              add(input-packages, name(pkg))
              add(input-pkgs, pkg)
          `stanza-file :
            val filename = input as String
            val ipkgs = read-ipackages(filename)
            add(file-assocs, FileAssoc(filename, time-modified(filename), map(name,ipkgs)))  
            add-all(input-packages, seq(name,ipkgs))
            add-all(ipackages, ipkgs)
          `pkg-file :
            val pkg = load-pkg(pkgloader, input as String)
            add(input-packages, name(pkg))
            add(input-pkgs, pkg)
      ensure-no-duplicate-packages!(input-packages)
            
      ;Compile all to EL packages
      val epackages = compile-to-el(ipackages, pkgloader)

      ;Ensure that packageio definitions for packages are consistent.
      load-into-denv(epackages)

      ;Register file associations with file environment
      do(register{file-env, _}, file-assocs)

      ;Compile to vmpackages
      val vmpackages = compile-vmpackages(epackages)

      ;Load packages into virtual machine
      load(vm, vmpackages, false)

      ;Run packages in initialization order
      run-in-init-order(vmpackages, input-packages)

  ;DEBUGGING
;  ;Clear all repl definitions
;  defn clear-repl () :
;    ;Compute what live repl records are required
;    val live = compute-live(vm, repl-packages(repl-env))
;    val empty-ios = to-tuple $
;      for p in repl-packages(repl-env) seq :
;        PackageIO(p, [], [], [])
;    match(check-exports(denv, empty-ios, live)) :
;      (e:LoadErrors) : throw(ReplErrors(errors(e)))
;      (e:LoadSuccess) : false
;    ;Now clear the repl packages
;    val empty-vmpkgs = for io in empty-ios map :
;      VMPackage(io, false, [], [], [], [], [], [], [], [])
;    load(denv, empty-ios)
;    load(vm, empty-vmpkgs, false)
;    clear(repl-env)
;
;  ;update changed files
;  defn changed-tprog (return:TProg|False -> ?, live:Tuple<Rec>) :
;    ;Compute the changed files
;    val changed-files = changed-files(file-env)
;    if empty?(changed-files) :
;      return(false)
;    else :
;      ;Track the files to reload.
;      ;Initialize them with the set of all changed files.
;      val reload-files = to-hashset<String>(changed-files)
;      let loop () :
;        val done? = label<True|False> break :
;          let :
;            val filenames = to-tuple(reload-files)
;            val expanded = map({macroexpand! $ read! $ _}, filenames)
;            val [input, file-pkgs] = to-ipackages! $ expanded
;            check-load-errors!(check-types-exist(input, live))
;            val typed = type! $ resolve! $ rename! $ input
;            check-load-errors!(check-load(typed, live))
;            return(typed)
;            save-to-file-env!(file-pkgs)
;            true
;          where :
;            defn check-load-errors! (e:LoadResult) :
;              match(e:LoadErrors) :
;                ;Some errors can be recovered from by including their source
;                ;files during the recompilation. Other errors are unrecoverable.
;                ;Classify these errors now.
;                val recovery-actions = Vector<(() -> ?)>()
;                val unrecoverable-errors = Vector<LoadError>()
;                for e in errors(e) do :
;                  match(source(e)) :
;                    (src:LoadedPackage) :
;                      if source-file?(file-env, package(src)) :
;                        add(recovery-actions, fn () :
;                          add(reload-files, source-file(file-env, package(src))))
;                      else : add(unrecoverable-errors, e)
;                    (src:LiveObject) : add(unrecoverable-errors, e)
;                ;If there are unrecoverable errors, then throw the error
;                if not empty?(unrecoverable-errors) :
;                  throw(ReplErrors(unrecoverable-errors))
;                ;Otherwise run the recovery actions and try again
;                for f in recovery-actions do : f()
;                break(false)
;        loop() when not done?
;
  ;Update files
  defn update-files () :
    within intercept-errors() :
      val changed-files = changed-files(file-env)
      if empty?(changed-files) :
        throw(ReplErrors([NoChangedFiles()]))
      else :
        val epackages = iteratively-load(changed-files, true)
        val vmpackages = compile-vmpackages(epackages)
        load(vm, vmpackages, true)

;  ;Reload
;  defn reload () :
;    within typed = changed-tprog([]) :
;      match(typed:TProg) :
;        load-vm!(typed)
;
;    ;Clear all REPL definitions
;    val empty-ios = to-tuple $
;      for p in repl-packages(repl-env) seq :
;        PackageIO(p, [], [], [])
;    val empty-vmpkgs = for io in empty-ios map :
;      VMPackage(io, false, [], [], [], [], [], [], [], [])
;    load(denv, empty-ios)
;    load(vm, empty-vmpkgs, false)
;    clear(repl-env)
;
;    ;Clear all definitions and rerun
;    clear-globals(vm)
;    run-vm!(loaded-packages())
;
;  ;Load from repl
;  defn load-repl (form) :
;    val typed = type! $ resolve-repl! $ rename! $ to-repl-ipackage! $ macroexpand! $ form
;    register(repl-env, packageio(packages(typed)[0]))
;    load-vm!(typed)
;    run-vm!([name(packages(typed)[0])])

  ;============================================================
  ;==================== Stages of Loading =====================
  ;============================================================
  defn iteratively-load (filenames:Tuple<String>, update?:True|False) -> Tuple<EPackage|Pkg> :
    val pkgloader = PkgLoader()
    val ipackages = Vector<IPackage>()
    val file-assocs = Vector<FileAssoc>()
    for filename in filenames do :
      val ipkgs = read-ipackages(filename)
      add-all(ipackages, ipkgs)
      add(file-assocs, FileAssoc(filename, time-modified(filename), map(name,ipkgs)))    
    val epackages = compile-to-el(ipackages, pkgloader)
    val result = try-load-into-denv(epackages, update?)
    match(result:LoadErrors) :
      ;Some errors can be recovered from by including their source
      ;files during the recompilation. Other errors are unrecoverable.
      ;Classify these errors now.
      val more-source-files = Vector<String>()
      val unrecoverable-errors = Vector<LoadError>()
      for e in errors(result) do :
        match(source(e)) :
          (src:LoadedPackage) :
            match(source-file?(file-env, package(src))) :
              (file:String) : add(more-source-files, file)
              (file:False) : add(unrecoverable-errors, e)
          (src:LiveObject) :
            add(unrecoverable-errors, e)
      ;If there are no unrecoverable errors, then try again with the added source files
      if empty?(unrecoverable-errors) :
        val filenames* = to-tuple(unique(cat(filenames, more-source-files)))
        ;If the set of files have changed, then try again, otherwise nothing we can do.
        if length(filenames*) > length(filenames) : iteratively-load(filenames*, update?)
        else : throw(ReplErrors(errors(result)))
      else :
        throw(ReplErrors(unrecoverable-errors))
    else :
      ;Register new files with file environment
      do(register{file-env, _}, file-assocs)
      ;Return loaded epackages
      epackages

  defn read-ipackages (filename:String) -> Tuple<IPackage> :
    val forms = read-file(filename)
    val expanded = try : cons(`$begin, parse-syntax[core / #exps!](forms))
                   catch (e:NoMatchException) : throw(ReplErrors(causes(e)))
                   catch (e:Exception) : throw(ReplErrors([e]))
    to-ipackages(expanded, core-imports())

  defn ensure-no-duplicate-packages! (packages:Seqable<Symbol>) :
    val pset = HashSet<Symbol>()
    for p in packages do :
      if not add(pset,p) :
        throw(ReplErrors([DuplicatePackage(p)]))

  defn compile-to-el (ipackages:Collection<IPackage>, pkgloader:PkgLoader) -> Tuple<EPackage|Pkg> :
    ;First rename the binders
    val renamed = match(rename-il(to-tuple(ipackages))) :
      (renamed:Tuple<IPackage>) : renamed
      (e:RenameErrors) : throw(ReplErrors(errors(e)))
      
    ;Create the table holding the package exports
    ;The exports have their identifiers renamed so that they do not conflict
    ;with fresh-id().
    val package-exports-table = HashTable<Symbol,PackageExports|False>()
    defn package-exports (name:Symbol) :
      within update?(package-exports-table, name) :
        label<PackageExports|False> return :
          defn to-package-exports (io:PackageIO) -> PackageExports :
            defn rename-id (e:Export) : sub-n(e, fresh-id())
            val pexs = /to-package-exports(io)
            sub-exports(pexs, map(rename-id, exports(pexs)))

          ;First look in DEnv
          match(packageio(denv,name)) :
            (io:PackageIO) : return(to-package-exports(io))
            (_:False) : false            
            
          ;Then try loading the pkg
          try :
            val pkg = load-pkg(pkgloader, name)
            return(to-package-exports(packageio(pkg)))
          catch (e:NoPackageException) :
            false

    ;Create the resolution and typing environment
    val env = new stz/resolver/Env & stz/type/Env :
      defmethod stz/resolver/exports (this, package:Symbol) :
        package-exports(package)
      defmethod stz/type/exports (this, package:Symbol) :
        package-exports(package) as PackageExports    

    ;Resolve the binders
    val resolved = match(resolve-il(renamed, env, false)) :
      (e:ResolveErrors) : throw(ReplErrors(errors(e)))
      (e:Tuple<IPackage>) : e

    ;Retrieve all dependencies and pkgs
    val already-loaded = cat(seq(name,resolved), seq(package,packageios(denv)))
    val all-pkgs = all-pkgs-and-dependencies(pkgloader, already-loaded)

    ;Typecheck the program
    val typed = match(type-program(resolved, env)) :
      (e:TProg) : e
      (e:TypeErrors) : throw(ReplErrors(messages(e)))

    ;Compile to EL
    val epackages = to-el(typed, false)
    to-tuple(cat(epackages, all-pkgs))

  defn try-load-into-denv (pkgs:Collection<EPackage|Pkg>, update?:True|False) :
    val exclude-roots-from = [] when update? else seq(name,pkgs)
    val live-recs = compute-live(vm, exclude-roots-from)
    load(denv, to-collection(seq{packageio,pkgs}), live-recs)

  defn load-into-denv (pkgs:Collection<EPackage|Pkg>) :
    match(try-load-into-denv(pkgs, false)) :
      (r:LoadErrors) : throw(ReplErrors(errors(r)))
      (r:LoadSuccess) : false

  defn compile-vmpackages (packages:Seqable<EPackage|Pkg>) -> Tuple<VMPackage> :
    to-tuple $ for p in packages seq :
      match(p) :
        (p:EPackage) : compile(lower-unoptimized(p))
        (p:StdPkg) : vmp(p)

  defn run-in-init-order (vmpackages:Seqable<VMPackage>, input:Collection<Symbol>) :
    val load-set = to-hashset<Symbol>(cat(seq(name,vmpackages), input))
    val ordering = initialization-order(package-dependency-graph(denv), input, {not load-set[_]})
    do(init-package{vm, _}, ordering)

  defn intercept-errors (f:() -> ?) :
    try : f()    
    catch (e:IOException) : throw(ReplErrors([e]))
    catch (e:LexerException) : throw(ReplErrors([e]))
    catch (e:CheckErrors) : throw(ReplErrors([e]))
    catch (e:PkgException) : throw(ReplErrors([e]))

;  ;============================================================
;  ;====================== Loaded Packages =====================
;  ;============================================================
;  defn loaded-packages () :
;    for p in packageios(denv) seq? :
;      if repl-package?(repl-env, package(p)) : None()
;      else : One(package(p))
;
;  defn loaded-package? (name:Symbol) :
;    packageio(denv, name) is-not False
;
;  ;Save associations to file environment
;  defn save-to-file-env! (file-assocs:Tuple<FileAssoc>) :
;    do(register{file-env, _}, file-assocs)
;
;  ;Run the given packages in the virtual machine
;;  defn run-vm! (packages:Seqable<Symbol>) :
;;    for p in initialization-order(packages, denv) do :
;;      init-package(vm, p)
;
;;  ;Load into virtual machine without initialization
;;  defn update-vm! (tprog:TProg) :
;;    val epkgs = to-el(tprog, true)
;;    val vmpkgs = map(compile{lower-unoptimized(_)}, epkgs)
;;    load(denv, seq(packageio, vmpkgs))
;;    load(vm, vmpkgs, true)
;;

  ;============================================================
  ;===================== REPL Structure =======================
  ;============================================================
  new REPL :
    defmethod load-files (this, inputs:Tuple<String|Symbol>) :
      load-files(inputs)
;    defmethod load-vmp (this, inputs:Tuple<String>) :
;      load-vmps(inputs)
    defmethod update-files (this) :
      update-files()
;    defmethod load-repl (this, form) :
;      load-repl(form)
;    defmethod clear (this) :
;      clear-repl()
;    defmethod reload (this) :
;      reload()
;    defmethod import (this, import:IImport) :
;      if not loaded-package?(package(import)) :
;        throw $ ReplErrors $ [PackageNotLoaded(package(import))]
;      else : /import(repl-env, import)
;    defmethod unimport (this, package:Symbol) :
;      if not unimport(repl-env, package) :
;        throw $ ReplErrors $ [PackageNotImported(package)]
;    defmethod inside (this, package:Symbol) :
;      if not loaded-package?(package) :
;        throw $ ReplErrors $ [PackageNotLoaded(package)]
;      else : inside(repl-env, package)
;    defmethod inside (this, package:False) :
;      if current-inside(repl-env) is False :
;        throw $ ReplErrors $ [NotInsidePackage()]
;      inside(repl-env, false)



;============================================================
;=================== File Environment =======================
;============================================================

deftype FileEnv
defmulti register (e:FileEnv, assoc:FileAssoc) -> False
defmulti changed-files (e:FileEnv) -> Tuple<String>
defmulti source-file? (e:FileEnv, package:Symbol) -> String|False

defstruct FileAssoc :
  filename: String
  timestamp: Long
  packages: Tuple<Symbol>

defn FileEnv () :
  ;Track which source file each package came from
  val source-file-table = HashTable<Symbol,String>()
  val assoc-table = HashTable<String,FileAssoc>()

  new FileEnv :
    defmethod register (this, assoc:FileAssoc) :
      for pkg in packages(assoc) do :
        source-file-table[pkg] = filename(assoc)
      assoc-table[filename(assoc)] = assoc
    defmethod changed-files (this) :
      to-tuple $ for assoc in values(assoc-table) seq? :
        try :
          val file = filename(assoc)
          val old-timestamp = timestamp(assoc)
          val new-timestamp = time-modified(file)
          if new-timestamp != old-timestamp : One(file)
          else : None()
        catch (e:FileStatException) :
          None()
    defmethod source-file? (this, package:Symbol) :
      get?(source-file-table, package)

;============================================================
;=================== Default Imports ========================
;============================================================

defn core-imports () :
  [IImport(`core), IImport(`collections)]

;============================================================
;=================== REPL User Environment ==================
;============================================================

deftype REPLEnv

;For registering successfully loaded packages
defmulti register (e:REPLEnv, packageio:PackageIO) -> False

;For import/unimport commands
defmulti import (e:REPLEnv, import:IImport) -> False
defmulti unimport (e:REPLEnv, package:Symbol) -> True|False

;For inside command
defmulti inside (e:REPLEnv, package:Symbol|False) -> False
defmulti current-inside (e:REPLEnv) -> Symbol|False

;For resolution
defmulti package-priority (e:REPLEnv, self:Symbol, package:Symbol) -> Int

;For constructing the IPackage
defmulti ReplPackage (e:REPLEnv, exp:IExp) -> IPackage

;List names of all repl packages
defmulti repl-packages (e:REPLEnv) -> Seqable<Symbol>
defmulti repl-package? (e:REPLEnv, name:Symbol) -> True|False

;Clear repl environment
defmulti clear (e:REPLEnv) -> False

defn REPLEnv () :
  ;Previous repl packages
  val previous-packages = Vector<PackageIO>()
  val package-index = HashTable<Symbol,Int>()
  ;Current desired imports
  val imports = HashTable<Symbol, IImport>()
  ;Currently inside package
  var inside-package:Symbol|False = false

  ;Initialize imports
  defn reset () :
    clear(previous-packages)
    clear(package-index)
    clear(imports)
    inside-package = false
    for i in core-imports() do :
      imports[package(i)] = i
  reset()

  ;Construct IPackage
  defn make-repl-package (exp:IExp) :
    ;First ensure legitimacy
    ensure-repl-expression(exp)

    ;Next create import list
    val package-imports = Vector<IImport>()
    ;Import all previous repl packages
    for p in previous-packages do :
      add(package-imports, IImport(package(p), [], false, true))
    ;Import all current imports
    for i in values(imports) do :
      if package(i) != inside-package :
        add(package-imports, i)
    ;Import the current 'inside' package
    match(inside-package:Symbol) :
      add(package-imports, IImport(inside-package, [], false, true))

    ;Create IPackage
    IPackage(gensym(`repl), to-tuple(package-imports), List(exp), info(exp))

  ;Resolution priority of IPackage
  defn package-priority (self:Symbol, p:Symbol) -> Int :
    if p == inside-package : 1
    else if p == self : INT-MAX
    else if key?(package-index, p) : package-index[p] + 2
    else : 0

  ;Construct environment object
  new REPLEnv :
    defmethod import (this, import:IImport) :
      imports[package(import)] = import
    defmethod unimport (this, package:Symbol) -> True|False :
      remove(imports, package)
    defmethod inside (this, package:Symbol|False) :
      inside-package = package
    defmethod current-inside (this) :
      inside-package
    defmethod register (this, packageio:PackageIO) :
      add(previous-packages, packageio)
      package-index[package(packageio)] = length(previous-packages) - 1
    defmethod package-priority (this, self:Symbol, package:Symbol) -> Int :
      package-priority(self, package)
    defmethod ReplPackage (this, exp:IExp) :
      make-repl-package(exp)
    defmethod repl-packages (this) :
      seq(package, previous-packages)
    defmethod repl-package? (this, name:Symbol) :
      key?(package-index, name)
    defmethod clear (this) :
      reset()

defn ensure-repl-expression (expression:IExp) :
  ;Detect illegal expressions
  val errors = Vector<Exception>()
  defn not-allowed! (e:IExp) :
    val type-str = match(e) :
      (e:IDefPackage) : "defpackage"
      (e:IDefType) : "deftype"
      (e:IDefmulti) : "defmulti"
      (e:IDefmethod) : "defmethod"
      (e:ILSDefType) : "lostanza deftype"
      (e:ILSDefmethod) : "lostanza defmethod"
      (e:ILSExternFn) : "externfn"
    add(errors, InvalidExp(type-str))

  ;Sweep through expressions and detect invalid expressions
  let loop (e:IExp = expression) :
    match(e) :
      (e:IBegin) : do(loop, exps(e))
      (e:IVisibility) : loop(exp(e))
      (e:IDefPackage|IDefType|IDefmulti|IDefmethod|
         ILSDefType|ILSDefmethod|ILSExternFn) : not-allowed!(e)
      (e) : false

  ;Throw errors if there are any
  throw(ReplErrors(errors)) when not empty?(errors)

;============================================================
;==================== Categorization ========================
;============================================================

;Classifies the incoming files into four types:
;  myfile.stanza
;  myfile.pkg
;  mypackage
;
;Returns either:
;  `package
;  `stanza-file
;  `pkg-file

defn category (name:String|Symbol) -> Symbol :
  match(name) :
    (name:Symbol) :
      `package
    (name:String) :
      switch suffix?{name, _} :
        ".stanza" : `stanza-file
        ".pkg" : `pkg-file
        else : throw(ReplErrors([InvalidExtension(name)]))

;============================================================
;======================== Errors ============================
;============================================================

defstruct ReplErrors <: Exception :
  messages: Collection

defn DuplicatePackage (name:Symbol) :
  Exception $ "Attempt to load package %~ multiple times." % [name]

defn PackageNotLoaded (package:Symbol) :
  Exception $ "Could not import package %~. Package has not been loaded." % [package]

defn PackageNotImported (package:Symbol) :
  Exception $ "Could not unimport package %~. Package is not yet imported." % [package]

;;An error when the loaded package already exists.
;public defstruct PackageAlreadyLoadedException <: PkgException :
;  filename: String|False with: (default => false)
;  name: Symbol
;defmethod print (o:OutputStream, e:PackageAlreadyLoadedException) :
;  match(filename(e):String) :
;    print(o, "Error when loading %_, package %_ has already been loaded." % [filename(e), name(e)])
;  else :
;    print(o, "Package %_ has already been loaded." % [name(e)])

defn NotInsidePackage () :
  Exception $ "Not currently inside any package."

defn NoChangedFiles () :
  Exception $ "No changes detected in any loaded file."

defn InvalidExtension (file:String) :
  Exception $ "File %~ does not have a valid Stanza file extension." % [file]

defn InvalidExp (exp-type:String) :
  Exception $ "The interactive REPL does not support %_ statements." % [exp-type]

defn LoadMultipleScripts (script:String) :
  Exception $ "Invalid attempt to load script %~ alongside other files. Scripts must be loaded by themselves." % [script]

;============================================================
;======================== REPL Loop =========================
;============================================================

defn script? (exp:Load) -> String|False :
  defn script? (s:String|Symbol) :
    match(s:String) : suffix?(s, ".repl")
  val s = find(script?, inputs(exp))
  match(s:String) :
    if length(inputs(exp)) > 1 :
      throw(ReplErrors([LoadMultipleScripts(s)]))
    s

defn eval-exp (repl:REPL, exp:RExp) :
  match(exp) :
    (exp:Load) :
      match(script?(exp)) :
        (file:String) : run-script(repl, file)
        (_:False) : load-files(repl, inputs(exp))
    (exp:LoadVMP) : load-vmp(repl, inputs(exp))
    (exp:Eval) : load-repl(repl, form(exp))
    (exp:Import) : import(repl, import(exp))
    (exp:Unimport) : unimport(repl, package(exp))
    (exp:Inside) : inside(repl, package(exp))
    (exp:Update) : update-files(repl)
    (exp:Reload) : reload(repl)
    (exp:Clear) : clear(repl)

defn run-script (repl:REPL, s:String) :
  try :
    val file = FileInputStream(s)
    try :
      let loop () :
        val exp = read-repl-exp(file)
        match(exp:RExp) :
          eval-exp(repl, exp)
          loop()
    finally :
      close(file)
  catch (e:IOException) :
    throw(ReplErrors([e]))

public defn repl () :
  val repl = REPL()
  let loop () :
    val exp = read-repl-exp()
    match(exp:RExp) :
      try : eval-exp(repl, exp)
      catch (e:ReplErrors) : do(println, messages(e))
      loop()