defpackage launcher :
  import core
  import collections

defn launch () : Process("sleep", ["sleep", "0.2"])

val ps = to-tuple $ for i in 0 to 41 seq : 
  val p = launch()
  println("launched %_" % [pid(p)])
  p

val vs = Vector<Vector<Int>>()
for i in 0 to 10 do :
  add(vs, Vector<Int>(1000))

;sleep-ms(10000L)
println("waiting...")
call-system("sleep", ["sleep", "5"])
println("done.")
var c = 0
for p in ps do :
  println("state of %_: %_" % [pid(p), state(p)])
  match(state(p)) :
    (s:ProcessDone|ProcessTerminated) : c = 1 + c
    (otherwise) : 
      false

println("%_ processes finished." % [c])
