#use-added-syntax(tests)
defpackage enums :
  import core
  import collections

defenum Direction :
  N
  E
  S
  W
  
deftest basic-enums :
  for i in 0 to 4 do :
    val d = Direction(i)
    println("The integer corresponding to %_ is %_" % [d, to-int(d)])
    println("Is it the same as N? %_" % [d == N])    

deftest enum-tables :
  val table = HashTable<Direction,List<Int>>(List())
  defn put-table (d:Direction, x:Int) :
    update(table, cons{x, _}, d)

  put-table(N, 0)
  put-table(E, 1)
  put-table(S, 5)
  put-table(W, 11)
  put-table(E, 13)
  put-table(W, 3)
  put-table(S, 7)
  put-table(S, 0)
  put-table(W, 13)
  put-table(N, 11)
  put-table(N, 18)
  put-table(E, 19)
  put-table(W, 20)
  put-table(E, 21)
  put-table(N, 1)

  for entry in table do :
    val dir = key(entry)
    val nums = value(entry)
    println("The entries corresponding to direction %_ are %,." % [dir, nums])

deftest enums-as-types :
  defn test (d:Direction) :
    match(d) :
      (d:N|E) : println("%_ is either N or E." % [d])
      (d:S|W) : println("%_ is either S or W." % [d])
    match(d) :
      (d:N|W) : println("%_ is either N or W." % [d])
      (d:S|E) : println("%_ is either S or E." % [d])
      
  test(N)
  test(S)
  test(E)
  test(W)
      
