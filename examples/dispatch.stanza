defpackage dispatch :
  import core
  import collections

;============================================================
;==================== Data Structure ========================
;============================================================

public defstruct Nums :
  values: Tuple<Int>

public defstruct Branch :
  args: Tuple<Nums>

public defstruct BranchTable :
  branches: Tuple<Branch>

public deftype Soln
public defstruct NoSoln <: Soln
public defstruct UniqueSoln <: Soln : (index:Int)
public defstruct AmbSoln <: Soln : (index1:Int, index2:Int)

;============================================================
;====================== Key Relations =======================
;============================================================

public defn subset? (a:Nums, b:Nums) :
  all?(contains?{values(b), _}, values(a))

public defn subbranch? (a:Branch, b:Branch) :
  fatal("Mismatched lengths") when length(args(a)) != length(args(b))
  all?(subset?, args(a), args(b))

public defn case? (case:Tuple<Int>, b:Branch) :
  fatal("Mismatched lengths") when length(case) != length(args(b))
  for (i in case, a in args(b)) all? :
    contains?(values(a), i)

;============================================================
;======================= Soln Checker =======================
;============================================================

public defn check (s:Soln, case:Tuple<Int>, table:BranchTable) -> True|False :
  val bs = branches(table)
  match(s) :
    (s:NoSoln) :
      for i in 0 to length(bs) none? :
        case?(case, bs[i])
    (s:UniqueSoln) :
      for i in 0 to length(bs) all? :
        if i == index(s) : case?(case, bs[i])
        else : subbranch?(bs[index(s)], bs[i]) or not case?(case, bs[i])
    (s:AmbSoln) :
      defn no-other-subbranch? (i:Int) :
        for j in 0 to length(bs) all? :
          i == j or not subbranch?(bs[j], bs[i])          
      case?(case, bs[index1(s)]) and
      case?(case, bs[index2(s)]) and
      no-other-subbranch?(index1(s)) and
      no-other-subbranch?(index2(s))

;============================================================
;=================== Brute-Force Solution ===================
;============================================================

public defn solve (case:Tuple<Int>, table:BranchTable) -> Soln :
  val all-solns = generate<Soln> :
    val n = length(branches(table))
    yield(NoSoln())
    for i in 0 to n do :
      yield(UniqueSoln(i))
    for i in 0 to n do :
      for j in (i + 1) to n do :
        yield(AmbSoln(i,j))
  for s in all-solns find! :
    check(s, case, table)

;============================================================
;==================== Text Representation ===================
;============================================================

defmethod print (o:OutputStream, n:Nums) :
  print(o, "(%,)" % [values(n)])
defmethod print (o:OutputStream, b:Branch) :
  print(o, args(b))
defmethod print (o:OutputStream, t:BranchTable) :
  print(o, "%n" % [branches(t)])

defmethod print (o:OutputStream, s:NoSoln) :
  print(o, "NoSoln")
defmethod print (o:OutputStream, s:UniqueSoln) :
  print(o, "UniqueSoln(%_)" % [index(s)])
defmethod print (o:OutputStream, s:AmbSoln) :
  print(o, "AmbSoln(%_, %_)" % [index1(s), index2(s)])

;============================================================
;========================== Tests ===========================
;============================================================

defn sexp-to-table (bs:Seqable) :
  BranchTable $ to-tuple $ for b in bs seq :
    Branch $ to-tuple $ for a in b seq :
      Nums(to-tuple(a))
        
public defn test () :
  ;Create table for test
  val table = sexp-to-table $ `(
    ((0) (1 2 3) (3) (4 5 6))         ;Example branch 0
    ((1) (2 3) (4) (4 5 6))           ;Example branch 1
    ((2) (4 5) (3) (1 2 3 4 5 6))     ;Example branch 2
    ((1 2) (4 5) (3) (1 2 3 4 5 6))   ;Example branch 3
    ((0 1) (2 3) (4 5) (5 6))         ;Example branch 4
    ((0 1) (2 3) (4 5) (6 7))         ;Example branch 5
    ((0) (0) (0) (1 2 3))             ;Example branch 6
    ((0) (0) (0) (2 3 4))             ;Example branch 7
    ((0) (0) (0) (2))                 ;Example branch 8
  )
  println("Check using table:\n%_\n" % [table])

  ;Testing a given solution for a given case
  defn test-soln (case:Tuple<Int>, s:Soln) :
    if check(s, case, table) :
      println("%_ is a solution for %_" % [s, case])
    else :
      println("%_ is not a solution for %_" % [s, case])

  ;Test a whole bunch of solutions
  defn test-solns (entries:Seqable<KeyValue<Tuple<Int>, Soln>>) :
    for entry in entries do :
      test-soln(key(entry), value(entry))

  ;Test a bunch of cases
  println("Test checker:")
  test-solns $ [
    [0 1 3 4] => NoSoln()
    [0 1 3 4] => UniqueSoln(0)
    [2 4 3 1] => NoSoln()
    [2 4 3 1] => UniqueSoln(2)
    [2 4 3 1] => UniqueSoln(3)
    [0 3 5 6] => NoSoln()
    [0 3 5 6] => UniqueSoln(4)
    [0 3 5 6] => UniqueSoln(5)
    [0 3 5 6] => AmbSoln(4,5)
    [0 0 0 2] => AmbSoln(6,7)
    [0 0 0 2] => UniqueSoln(8)
  ]
  print("\n")

  ;Test finding a solution
  defn test-solve (entries:Seqable<Tuple<Int>>) :
    for case in entries do :
      val soln = solve(case, table)
      println("Solved: %_ is a solution for %_" % [soln, case])

  println("Test solver:")
  test-solve $ [
    [0 1 3 4]
    [2 4 3 1]
    [0 3 5 6]
    [1 2 4 5]
    [1 2 4 4]
    [1 2 4 6]
    [0 0 0 2]]
  print("\n")

test()

;<printout>==================================================
;====================== Test Printout =======================
;============================================================
To Run (using Stanza 0.13.8) :

  stanza run dispatch.stanza

Printout:

  Check using table:
  [(0) (1, 2, 3) (3) (4, 5, 6)]
  [(1) (2, 3) (4) (4, 5, 6)]
  [(2) (4, 5) (3) (1, 2, 3, 4, 5, 6)]
  [(1, 2) (4, 5) (3) (1, 2, 3, 4, 5, 6)]
  [(0, 1) (2, 3) (4, 5) (5, 6)]
  [(0, 1) (2, 3) (4, 5) (6, 7)]
  [(0) (0) (0) (1, 2, 3)]
  [(0) (0) (0) (2, 3, 4)]
  [(0) (0) (0) (2)]

  Test checker:
  NoSoln is not a solution for [0 1 3 4]
  UniqueSoln(0) is a solution for [0 1 3 4]
  NoSoln is not a solution for [2 4 3 1]
  UniqueSoln(2) is a solution for [2 4 3 1]
  UniqueSoln(3) is not a solution for [2 4 3 1]
  NoSoln is not a solution for [0 3 5 6]
  UniqueSoln(4) is not a solution for [0 3 5 6]
  UniqueSoln(5) is not a solution for [0 3 5 6]
  AmbSoln(4, 5) is a solution for [0 3 5 6]
  AmbSoln(6, 7) is not a solution for [0 0 0 2]
  UniqueSoln(8) is a solution for [0 0 0 2]

  Test solver:
  Solved: UniqueSoln(0) is a solution for [0 1 3 4]
  Solved: UniqueSoln(2) is a solution for [2 4 3 1]
  Solved: AmbSoln(4, 5) is a solution for [0 3 5 6]
  Solved: AmbSoln(1, 4) is a solution for [1 2 4 5]
  Solved: UniqueSoln(1) is a solution for [1 2 4 4]
  Solved: AmbSoln(1, 4) is a solution for [1 2 4 6]
  Solved: UniqueSoln(8) is a solution for [0 0 0 2]

;============================================================
;==================================================<printout>