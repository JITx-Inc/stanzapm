;################################################################################
;############################## C Library #######################################
;################################################################################

;================================================================================
;================================ Boot Sequence =================================
;================================================================================

defpackage clib
protected extern memcpy: (ptr<?>, ptr<?>, long) -> int
protected extern printf: (ptr<byte>, ? ...) -> int
protected extern fprintf: (ptr<?>, ptr<byte>, ? ...) -> int
protected extern malloc: long -> ptr<?>
protected extern free: ptr<?> -> int
protected extern exit: int -> int
protected extern get_stdout: () -> ptr<?>
protected extern get_stderr: () -> ptr<?>
protected extern get_stdin: () -> ptr<?>
protected extern get_eof: () -> int
protected extern input_argc: int
protected extern input_argv: ptr<ptr<byte>>
protected extern strlen: ptr<byte> -> int
protected extern system: (ptr<byte>) -> int
protected extern strerror: (int) -> ptr<byte>
protected extern get_errno: () -> int

;################################################################################
;############################## Core Library ####################################
;################################################################################

defpackage core

protected lostanza deftype Fn :
   length: long
   code: ptr<?>
   free: ref<?> ...
protected lostanza deftype Box :
   item: ref<?>
protected lostanza deftype Type :
   length: long
   code: ptr<?>
   free: ref<?> ...
protected lostanza deftype StackFrame :
  return: long
  liveness-map: long
  slots: long ...
protected lostanza deftype Stack :
  size: long
  frames: ptr<StackFrame>
  stack-pointer: ptr<StackFrame>
  pc: int
protected lostanza deftype VMState :
  ;Permanent State
  ;Changes in-between each code load
  instructions: ptr<byte>
  registers: ptr<long>
  global-offsets: ptr<long>
  global-mem: ptr<byte>
  const-table: ptr<long>
  const-mem: ptr<byte>
  data-offsets: ptr<int>
  data-mem: ptr<byte>
  extern-addresses: ptr<long>
  extern-defn-addresses: ptr<long>
  code-offsets: ptr<int>
  extend-heap-id: int
  extend-stack-id: int
  ;Variable State
  ;Changes in-between each boundary change
  heap: ptr<long>      
  heap-top: ptr<long>  
  heap-limit: ptr<long>
  free: ptr<long>      
  free-limit: ptr<long>
  current-stack: long
  ;Need for system stubs
  system-stack: long
  system-registers: ptr<long>  

public deftype Unique

public lostanza deftype LivenessTracker :
  value: ref<False|Unique>
  tail: ptr<?>
  

protected lostanza defn arity-error (arity:long) -> ref<Void> :
  return fatal("arity error")

protected defn no-method-error (multi:String, args:Tuple) :  
  fatal("no method error")
  
protected defn amb-method-error (multi:String, args:Tuple) :
  fatal("amb method error")
   
protected defn no-branch-error (args:Tuple) :  
  fatal("no branch error")
  
protected defn amb-branch-error (args:Tuple) :
  fatal("amb branch error")

protected lostanza defn tuple-length-error (actual-len:long, expected-len:long) -> ref<Void> :
  return fatal("tuple length error")
  
protected defn variable-uninitialized-error (name:String|False) -> Void :
  fatal("variable uninitialized error")

protected lostanza defn cast-error (type:ref<Type>, obj:ref<?>, ctxt:int) -> ref<Void> :
  return fatal("cast error")

protected lostanza defn invalid-return-error () -> ref<Void> :
  return fatal("invalid return error")

public lostanza defn fatal (msg:ptr<byte>) -> ref<Void> :
  return halt()

public defn fatal (msg) -> Void :  
  halt()

lostanza defn halt () -> ref<Void> :
  call-c clib/exit(-1)
  return false as ref<?>

lostanza defn print-stack-trace () -> ref<False> :
  return false

defn execute-toplevel-command (f:() -> False) :
  false

lostanza defn print-stack-trace (s:ref<Stack>) -> ref<False> :
  return false

public lostanza deftype Byte :
  value: byte
  
public lostanza deftype Char :
  value: byte

public lostanza deftype Int :
  value: int

public lostanza deftype Long :
  value: long

public lostanza deftype Float :
  value: float

public lostanza deftype Double :
  value: double

public lostanza deftype String :
  length: long
  hash: int
  chars: byte ...

public deftype Symbol
public lostanza deftype StringSymbol <: Symbol :
  name: ref<String>
public deftype GenSymbol <: Symbol

public lostanza deftype True
public lostanza deftype False

public lostanza deftype Tuple<T> :
  length: long
  items: ref<T> ...

public deftype List<T>
lostanza deftype FullList<T> <: List<T> :
  head: ref<T>
  tail: ref<List<T>>
lostanza deftype NilList <: List<Void>

lostanza val stdout:ptr<?> = call-c clib/get_stdout()
lostanza val stderr:ptr<?> = call-c clib/get_stderr()
lostanza val stdin:ptr<?> = call-c clib/get_stdin()
lostanza val EOF:int = call-c clib/get_eof()

lostanza deftype Sentinel
lostanza val sentinel:ref<Sentinel> = new Sentinel{}

protected lostanza defn initialize-constants () -> ref<False> :
  return false

lostanza defn extend-heap (size:long) -> long :
  return 0

lostanza defn collect-garbage (size:long) -> long :
  return 0L

lostanza defn extend-stack (size:long) -> long :
  return 0

lostanza defn class-name (x:int) -> ptr<byte> :
  return "unknown-class"
  
protected lostanza defn void-tuple (n:long) -> ref<Tuple> :
  val x = new Tuple{n}
  for (var i:long = 0, i < n, i = i + 1) :
    x.items[i] = sentinel
  return x   

public lostanza defn String (len:long) -> ref<String> :
  return new String{len + 1, 0}

public lostanza defn String (chars:ptr<byte>) -> ref<String> :
  val len = call-c clib/strlen(chars)
  return String(len, chars)

public lostanza defn String (len:long, chars:ptr<byte>) -> ref<String> :
  val s = String(len)
  call-c clib/memcpy(addr!(s.chars), chars, len)
  s.chars[len] = 0 as byte
  return s

lostanza defn main () -> ref<False> :
  call-c clib/printf("hello world\n")
  return false
  
main()