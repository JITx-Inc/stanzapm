package A :
  defval V10 : byte
  defvar V11 : byte
  defmulti V10<TV1,TV2> (byte) -> byte
  defstruct T10 : (byte byte ...)
  defstruct T10 : (byte byte)
  defstruct T10 <: byte : (byte byte ...)
  deftype T10 <: byte (T11, T13)
  defn V10 fn<TV0> (V0:byte V1:long) -> byte :
    defval V0 : byte    
    defn V10 fn<TV0> (V0:byte V1:long) -> byte :
      defval V0 : byte    
      V0 = V2
    defobj O11 <: T11 :
      defmethod V10<byte> (this = V0) fn<> (V0:byte) -> long :
        V0 = V2
      defmethod V10<byte,long> (this = V0) fn<> (V0:byte, V1:long) -> int :
        V0 = V2
    V0 = V2
  defmethod V10<byte,long> (id = V0) fn<> (V0:byte, V1:long) -> int :
    V0 = V2
  extern mycfunction V10 : byte
  externfn myfunc V10 fn<> (V0:byte, V1:long) -> int :
    V0 = V2
  init :
    defval V0 : byte    
    defn V10 fn<TV0> (V0:byte V1:long) -> byte :
      defval V0 : byte    
      V0 = V2
    defobj O11 <: T11 :
      defmethod V10<byte> (this = V0) fn<> (V0:byte) -> long :
        V0 = V2
      defmethod V10<byte,long> (this = V0) fn<> (V0:byte, V1:long) -> int :
        V0 = V2
    V0 = V2
  defval V0 : byte
  defval V0 : int
  defval V0 : long
  defval V0 : float
  defval V0 : double
  defval V0 : ?
  defval V0 : top
  defval V0 : bot
  defval V0 : ptr<byte>
  defval V0 : fn<(byte byte), byte>
  defval V0 : fn<(byte byte), long, byte>
  defval V0 : TV10
  defval V0 : T10
  defval V0 : ref<T10>
  defval V0 : and(ref<T10>, ref<T11>)
  defval V0 : or(ref<T10>, bot)
  init :
    letrec [V0 V1] = [closure(V0) closure(V2)]
    box-set V0 = V1
    return V0
    tuple-set V0[0] = V1
    check-length(V0) == 1
    dump (V0, V1)
    store V0 = V1 : byte
    label L10
    do V10(V1, V2)
    do-c V10(V1, V2, V3)
    goto L11
    goto L10 when prim add(V0 V1) else L11
    goto L10 when V0 else L11
    goto L10
    match(V0, V1) :
      (byte, long) : goto L10
      (long, ref<T10>) : goto L11
    check-set V11
    V0 = interpret V1
    V0 = conv V1
    V0 = check V0
    V0 = prim add(V0, V1)
    V0 = box()
    V0 = box(V1)
    V0 = box-get V1
    V0 = new O1
    V0 = tuple [V0, V1]
    V0 = void-tuple(10)
    V0 = tuple-get V0[0]
    V0 = object T11 (V0, V1)
    V0 = array T11 (V0, V1)
    V0 = struct T11 (V0, V1)
    V0 = addr(V0)
    V0:byte = check-do V1(V0:byte, V1:long)
    V0:byte = load V0
    V0:byte = do V1(V1, V0)
    V0:byte = do-c V1(V1, V0)
    V0 = V11
    [V1, V2, V3] = [V1, V2 V3]
