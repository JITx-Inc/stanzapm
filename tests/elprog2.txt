package core :
  export 3 struct T(core,Int)<0> : (int)
  export 4 struct T(core,Box)<0> : (top)
  export 5 struct T(core,False)<0> : ()
  export 6 struct T(core,True)<0> : ()
  export 100 lsfn(F<0>(core,cast-error,[]) -> int)
  export 101 lsfn(F<0>(core,variable-uninitialized-error,[]) -> int)
  export 102 lsfn(F<0>(core,no-branch-error,[]) -> int)
  export 103 lsfn(F<0>(core,amb-branch-error,[]) -> int)
  export 104 lsfn(F<0>(core,no-method-error,[]) -> int)
  export 105 lsfn(F<0>(core,amb-method-error,[]) -> int)

package core :
  ;deftype Int
  defstruct T3 :
    int
  ;deftype Box
  defstruct T4 :
    top
  ;deftype False
  defstruct T5 : ()
  ;deftype True
  defstruct T6 : ()

  ;cast-error
  defn V100 fn<> () -> int :
    return LV{0}
  ;variable-uninitialized-error
  defn V101 fn<> () -> int :
    return LV{0}
  ;no-branch-error
  defn V102 fn<> () -> int :
    return LV{0}
  ;amb-branch-error
  defn V103 fn<> () -> int :
    return LV{0}
  ;no-method-error
  defn V104 fn<> () -> int :
    return LV{0}
  ;amb-method-error
  defn V105 fn<> () -> int :
    return LV{0}

  ;function that returns 42
  defn V202 fn<> (V50:ref<T5>) -> ref<T3> :
    return V{42}
  ;function that returns 43
  defn V203 fn<> (V51:ref<T6>) -> ref<T3> :
    return V{43}

  ;multi
  defmulti V204<> (top) -> top
  defmethod V204<> (id = V205) fn<> (V52:ref<T5>) -> ref<T3> :
    return V{42}
  defmethod V204<> (id = V206) fn<> (V53:ref<T6>) -> ref<T3> :
    return V{43}
  defmethod V204<> (id = V207) fn<> (V54:or(ref<T5>,ref<T3>)) -> ref<T3> :
    return V{44}
  defmethod V204<> (id = V208) fn<> (V55:top) -> ref<T3> :
    return V{45}

  ;deftype MyType
  ;deftype T40 ()
  ;
  ;;defmulti increment (t:MyType) -> Int
  ;defmulti V49<> (ref<T40>) -> ref<T3>
  ;
  ;;defn MyType (i:Int) -> MyType
  ;defn V45 fn<> (V41:ref<T3>) -> ref<T40> :
  ;  ;var start:Int
  ;  defvar V42:ref<T3>
  ;  ;val ret:MyType
  ;  defval V47:ref<T40>
  ;  ;object O0 <: MyType
  ;  defobj O0 <: ref<T40> :
  ;    defmethod V49<> (this = V44) fn<> (V44:ref<T40>) -> ref<T3> :
  ;      defval V43:ref<T3>
  ;      defval V45:ref<T3>
  ;      V43 = V42
  ;      V45 = prim int-add(V42, V{1})
  ;      store V42 = V45
  ;      return V43
  ;  V42 = V41
  ;  V47 = new O0
  ;  return V47

  init :
    defval V46:top
    defval V47:top
    defval V48:top
    ;V46 = check-do mix(V202, V203)(V{false}:top)
    ;dump (V46)
    ;V47 = check-do mix(V203, V202)(V{true}:top)
    ;dump (V47)

    V48 = check-do V204(V{42}:top)
    dump (V48)

    ;defvar V46:ref<T3>
    ;defval V47:ref<T3>
    ;V46 = V{42}
    ;V47 = prim int-add(V46, V{43})
    ;store V46 = V47
    ;dump (V46)


  
