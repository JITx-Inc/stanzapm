defpackage stz-test-suite/dev-types :
  import core
  import collections
  import stz/type-solver
  import stz/type-hierarchy
  import stz/types
  import stz/type-locs
  import stz/type-formatter
  import stz/type-equation-solver
  import stz/type-capside
  import stz/type-fargs  
  import stz-test-suite/test-tools
  import stz-test-suite/type-reader
  import stz-test-suite/type-test-ir

;============================================================
;=================== Execution ==============================
;============================================================

public defn execute (prog:TestTypeProgram) :
  defn fmt (x:TypeStmt) : format(type-formatter(prog),x)
  defn fmt (n:Int) : format(type-formatter(prog),TVar(n,false))
  defn fmt (s:SearchResult) : format(type-formatter(prog),s)
  defn fmt (r:SimplifyResult) : format(type-formatter(prog),r)
  defn fmt (t:Type) : format(type-formatter(prog),t)
  defn fmt (f:False) : false
  defn fmt (v:SolverValue) : format(type-formatter(prog),v)
  defn fmt (e:KeyValue<Int,SolverValue>) : fmt(key(e)) => fmt(value(e))
  defn fmt (es:Tuple<KeyValue<Int,SolverValue>>) : seq(fmt,es)
  defn fmt-r (r:CaptureResult) : fmt(r as Type) when r is Type else r
  set-debug-formatter(type-formatter(prog))
  
  val hier = make-hierarchy(prog)
  for stmt in stmts(prog) do :  
    match(stmt) :
      (stmt:Capture) :
        println("Capture Test: %_" % [fmt(stmt)])
        val captures = capture-variance(args(stmt) as Tuple<Int>, [b(stmt)], CapRight)
        for entry in captures do :
          val arg = key(entry)
          val variance = value(entry)
          val result = capture(arg, variance, CapRight, [a(stmt)], [b(stmt)], hier)
          println("Capturing %_" % [fmt(arg)])
          println(Indented(fmt-r(result)))
          println("")
      (stmt:Subtype) :
        val result = subtype(a(stmt), b(stmt), hier)
        println("Subtype Test: %_" % [fmt(stmt)])
        println(Indented(result))
        println("")
      (stmt:Infer) :
        val result = infer(a(stmt), b(stmt), false, hier)
        println("Inference Test: %_" % [fmt(stmt)])
        println(Indented(fmt-r(result)))
      (stmt:SelectOverloadCall) :
        val result = select-overload-call(a(stmt), args(stmt), hier)
        println("SelectOverloadCall Test: %_" % [fmt(stmt)])
        println(Indented(result))
      (stmt:Solve) :
        println("Solver Test:\n%_" % [Indented(fmt(stmt))])
        val state = SolverState(eqns(stmt), hier)
        solve(state)
        println("Solutions:")
        println(Indented("%n" % [fmt(solutions(state))]))
    println("\n")

;Create the hierarchy of the program.
defn make-hierarchy (prog:TestTypeProgram) -> TypeHierarchy :
  ;Populate special table.
  val special-table = IntTable<SpecialType>()
  for r in hierarchy(prog) do :
    val name = table(names(prog))[n(r)]
    switch(name) :
      `Tuple : special-table[n(r)] = CoreTuple
      else : false

  ;Create the type relations.
  val relations = for r in hierarchy(prog) map :
    val child = child(r) as TOf
    val child-args = map(n, args(child) as Tuple<TVar>)
    TypeRelation(n(child), get?(special-table,n(child)), child-args, parent(r), None())

  ;Return the hierarchy.
  TypeHierarchy(relations)

;============================================================
;==================== Main Launcher =========================
;============================================================

public defn main () :
  val file = data-file("type1.txt")
  val prog = read-test-type-program(file)
  println(format(prog))
  println("\n")
  execute(prog)

within (package,sig) = set-stack-trace-filter() :
  package != `core
main()