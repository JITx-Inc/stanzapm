import os

from conan import ConanFile
from conan.tools.cmake import cmake_layout
from conan.tools.files import copy, get, rm, save, unzip
from conan.errors import ConanInvalidConfiguration
from pathlib import Path

required_conan_version = ">=2.0"


# DEBUG: display subprocess.Popen events for executed commands
def audit(event, args):
    if 'subprocess.Popen' in event:
        print(f'+++ audit: event={event}, args={args}')
        #breakpoint()
import sys
sys.addaudithook(audit)


class LBStanzaConan(ConanFile):
    name = "lbstanza"
    package_type = "application"
    description = ("L.B. Stanza (or Stanza for short) is a new"
                   " optionally-typed general purpose programming language"
                   " from the University of California, Berkeley.")
    topics = ("compiler", "lbstanza", "stanza")
    homepage = "https://lbstanza.org/"
    url = "https://github.com/StanzaOrg/"
    license = "BSD-3-Clause"

    settings = "os", "arch"
    virtualbuildenv = None
    virtualrunenv = None

    def validate(self):
        if self.settings.arch not in ["x86_64"]:
            raise ConanInvalidConfiguration("Stanza binaries are only provided for the x86_64 architecture")

    def layout(self):
        self.folders.build = f"build.{str(self.settings.os).lower()}"
        self.folders.generators = os.path.join(self.folders.build, "generators")
        self.folders.source = "src"
        self.cpp.source.includedirs = ["include"]
        self.cpp.build.libdirs = ["."]
        self.cpp.build.bindirs = ["."]

    def build(self):
        # get stanza binary from parent directory
        arch = str(self.settings.arch) ###if self.settings.os != "Macos" else "universal"
        stanza_zip = os.environ['STANZA_ZIP']
        unzip(self, stanza_zip if stanza_zip else "stanza.zip", destination=self.build_folder)
        
    def export_sources(self):
        # copy recipe cmake files to packaging cache
        copy(self, "*", src=os.path.join(self.recipe_folder, "cmake"), dst=os.path.join(self.export_sources_folder, "cmake"))

    def package(self):
        # copy files that we want in the conan package
        copy(self, "*", src=self.build_folder, dst=self.package_folder)
        copy(self, "*", src=os.path.join(self.export_sources_folder, "cmake"), dst=os.path.join(self.package_folder, "cmake"))
        
        docs_folder = os.path.join(self.build_folder, "doc", "cmake")
        copy(self, "Copyright.txt", src=docs_folder, dst=os.path.join(self.package_folder, "licenses"), keep_path=False)
        copy(self, "License.txt", src=docs_folder, dst=os.path.join(self.package_folder, "licenses"), keep_path=False)

        # create build directory in package in case stanza needs to compile e.g. sha256.o
        pkgblddir = os.path.join(self.package_folder, "build")
        Path(pkgblddir).mkdir(parents=True, exist_ok=True)
        # create an empty file in the build directory
        open(Path(pkgblddir) / ".keep", 'w').close()

        # Remove unneeded files
        rm(self, "conaninfo.txt", self.package_folder)
        rm(self, "*.fpkg", os.path.join(self.package_folder, "pkgs"))

    def package_info(self):
        self.cpp_info.includedirs = []
        #self.cpp_info.bindirs = [self.package_folder, os.path.join(self.package_folder, "bin")]
        #self.cpp_info.libdirs = [os.path.join(self.package_folder, "bin")]
        #self.cpp_info.srcdirs = [self.package_folder]
        #self.cpp_info.builddirs = [self.package_folder, os.path.join(self.package_folder, "cmake")]
        self.cpp_info.bindirs = [".", "bin"]
        self.cpp_info.libdirs = ["bin"]
        self.cpp_info.srcdirs = ["."]
        self.cpp_info.builddirs = [".", "cmake"]

        # create .stanza file
        def stanza_platform(os):
          match str(os):
            case "Linux" | "Windows":
              return str(os).lower()
            case "Macos":
              return "os-x"
            case _:
               raise ConanInvalidConfiguration(f"Unknown OS for Stanza: {str(os)}")
        save(self, os.path.join(self.package_folder, ".stanza"),
             f"; generated by conan for {self.name}/{self.version} ({str(self.settings.os)} {self.settings.arch})\ninstall-dir = \"{self.package_folder}\"\nplatform = {stanza_platform(self.settings.os)}\nexperimental: (jit)\n")

        self.cpp_info.set_property("cmake_file_name", "LBStanza")
        self.cpp_info.set_property("cmake_find_mode", "config")
        
        # set up environment variables for the consumer
        self.buildenv_info.define("STANZA_CONFIG", self.package_folder)
        self.runenv_info.define("STANZA_CONFIG", self.package_folder)
