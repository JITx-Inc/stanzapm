defpackage stz/auto-doc :
  import core
  import collections
  import reader
  import stz/namemap
  import stz/front-end
  import stz/visibility
  import stz/il-ir
  import stz/compiler-build-settings
  import stz/auto-doc-engine

;produce mdbook auto-doc in given output directory
;  pkg-filter-filename:  what packages to include
;  fig-filter-filename:  what packages to generate figures for
;  toc-renamer-filename: "pathnames" to use for TOC
;  trace?:               trace pattern expression evaluation?
public defn auto-doc (settings:BuildSettings, output:String, pkg-filter-filename:False|String, fig-filter-filename:False|String, toc-renamer-filename:False|String, trace?:True|False) :
  val dep-result = dependencies(settings, true)
  throw-errors(dep-result)
  val dir = match(output:String): output else: "docs"
  gen-doc(dir, namemap(dep-result),
          match-package-pathnames(filter-by<IPackage>(packages(dep-result)), pkg-filter-filename, trace?)
          fig-filter-filename,
          toc-renamer-filename,
          trace?)

;Filter packages based on pkg-filter-filename
defn match-package-pathnames (ipackages:Seqable<IPackage>, pkg-filter-filename:False|String, trace?:True|False) -> Seqable<IPackage> :
  for pkg in ipackages filter :
    match(info(pkg)) :
      (info:FileInfo) : call-boolean-plugin(pkg-filter-filename, pkg, { true }, trace?)
      (info) : false

defn call-boolean-plugin (app-name:False|String, pkg:IPackage, default:IPackage -> True|False, trace?:True|False) -> True|False :
  val res =
    match(app-name:String) :
      call-boolean-plugin(app-name, [to-string(name(pkg)), filename(info(pkg) as FileInfo)])
    else : default(pkg)
  println("CALL %_ PKG-NAME %_ PKG-FILENAME %_ RES %_" % [app-name, name(pkg), filename(info(pkg) as FileInfo), res]) when trace?
  res