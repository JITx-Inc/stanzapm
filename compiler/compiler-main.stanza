;See License.txt for details about licensing.

;<doc>=======================================================
;================== Compilation Steps =======================
;============================================================

# Categorize the situation #

There are three different situations that require different
compilation flows:

  1) We are compiling in optimized mode and need to compile to a final
  assembly file.

  2) We are compiling in unoptimized mode and need to compile to a
  final assembly file.

  3) We are compiling in unoptimized mode and only need to compile to
  .pkg files.

# Reorder the given packages by their initialization order #

Input:
  denv: DEnv
  packages: Seqable<EPackage|VMPackage|Pkg>
  input-order: Tuple<Symbol>

Output:
  packages: Tuple<EPackage|VMPackage|Pkg>

Reorders the given input by their proper dependency order.

# Combine multiple EL packages into a single optimized VMPackage #

Input:
  packages: Tuple<EPackage|FastPkg>
Output:
  vmpackage: VMPackage

# Compile a single VMPackage to a File #

Input:
  vmpackage: VMPackage
  bindings: Vector<Bindings>
  filename: String

# Compile VMPackages and StdPkgs to a File #

Input:
  packages: Tuple<VMPackage|StdPkg>
  bindings: Vector<Bindings>
  filename: String
  save-pkgs?: String|False

Emits the compiled instructions to the given file. If save-pkgs? is a
String, then we emit the unoptimized .pkg files into the that
directory.

# Lower and Compile EL Packages to .pkg Files #

Input:
  epackages: Tuple<EPackage>
  pkg-dir: String

# Utility: Compile a Normalized VMPackage #

Input:
  npkg: NormVMPackage
  stitcher: Stitcher
  stubs: AsmStubs
  return-instructions?: True|False

Output:
  instructions: Tuple<Ins>|False

Emits the compiled instructions to the current output stream, when
given the normalized package. If return-instructions? is true, then the
pre-stitched instructions are saved into a tuple and returned.
Otherwise, the function returns false.

# Utility: Emitters #

  file-emitter: () -> CodeEmitter
  buffer-emitter: (buffer:Vector<Ins>, e:CodeEmitter) -> CodeEmitter
  buffer-emitter: (buffer:Vector<Ins>) -> CodeEmitter

# Utility: Emit all system stubs #

Input:
  stitcher: Stitcher
  stubs: AsmStubs

Emits all tables and stubs required by the linked assembly file.

;============================================================
;=======================================================<doc>

defpackage stz/compiler-main :
  import core
  import collections
  import reader
  import macro-utils
  import stz/utils
  import stz/algorithms
  import stz/input
  import stz/renamer
  import stz/resolver
  import stz/il-ir
  import stz/tl-ir
  import stz/namemap
  import stz/core-macros
  import stz/tl-to-el
  import stz/tl-to-dl
  import stz/el-to-vm
  import stz/el
  import stz/el-ir
  import stz/vm-ir
  import stz/dl-ir
  import stz/dl
  import stz/backend
  import stz/reg-alloc with :
    prefix(Ins) => reg-alloc-
  import stz/vm-normalize
  import stz/code-emitter
  import stz/codegen
  import stz/asm-ir
  import stz/asm-emitter
  import stz/stitcher
  import stz/bindings
  import stz/pkg
  import stz/pkg-ir
  import stz/pkg-errors
  import stz/ids
  import stz/front-end
  import stz/proj-manager
  import stz/package-stamps
  import stz/macroexpander
  import stz/verbose
  import stz/compiler-result
  import stz/file-stamps
  import stz/dir-utils
  import stz/absolute-info
  import stz/params

;============================================================
;============== Main Compilation Algorithm ==================
;============================================================

public defn compile (proj-manager:ProjManager,
                     inputs:Collection<String|Symbol>,
                     supported-vm-packages:Tuple<String|Symbol>,
                     output:False|String,
                     pkg-dir:False|String,
                     backend:Backend,
                     optimize?:True|False,
                     debug?:True|False,
                     verbose?:True|False,
                     macro-plugins:Tuple<String>,
                     force-build-macros?:True|False) -> CompilationResult :
  defn driver () :
    val denv = DEnv()
    val macroexpander = StanzaMacroexpander(force-build-macros?, proj-manager, macro-plugins)

    ;Collect the compiler flags before compilation starts just in case
    ;one of the source files add additional flags.
    val flags = compiler-flags()

    ;Compile inputs source files to EL packages.
    val result = compile-to-el $ new FrontEndInputs :
      defmethod inputs (this) : to-tuple(inputs)
      defmethod find-package (this, name:Symbol) : find-package(proj-manager, name)
      defmethod environment-package? (this, name:Symbol) : packageio(denv, name)
      defmethod load-into-denv (this, ios:Tuple<PackageIO>) : load(denv, ios, [])
      defmethod conditional-dependencies (this, pkgs:Seqable<Symbol>) : conditional-imports(proj-manager, pkgs)
      defmethod supported-vm-packages (this) : supported-vm-packages
      defmethod debug? (this) : debug?
      defmethod verbose? (this) : verbose?
      defmethod macroexpander (this) : macroexpander

    ;Create pkg saver for saving output .pgk files.
    val cache-dir = pkg-cache-dir(proj-manager)
    val pkgsaver = PkgSaver(auxfile(proj-manager),
                            pkgstamps(result),
                            pkg-dir,
                            flags,
                            debug?,
                            false,
                            cache-dir)

    ;Save optimized packages if necessary
    if pkg-dir is String and optimize? :
      for p in packages(result) do :
        ;Convert to Pkg if not already in that form.
        val pkg = match(p) :
          (p:EPackage) : FastPkg(packageio(p), exps(p))
          (p:Pkg) : p
        ;Save it using the PkgSaver.
        save-when-appropriate(pkgsaver, pkg)

    ;Compute whether the package list includes stz/vm?.
    ;Required to ultimately decide whether to include the vm stubs in the
    ;emitted assembly.
    val includes-stz-vm? = contains?(seq(name, packages(result)), `stz/vm)

    ;Depending upon the situation run three different flows
    val situation =
      match(optimize?, output) :
        (opt?:True, output:String) : `optimized-asm
        (opt?:True, output:False) : `optimized-pkgs
        (opt?:False, output:String) : `unoptimized-asm
        (opt?:False, output:False) : `unoptimized-pkgs
    switch(situation) :
      `optimized-asm :
        val combined-pkg = combine-and-lower(/packages(result) as Tuple<EPackage|FastPkg>)
        compile-vmpackages(false, [combined-pkg], bindings(result), output as String, includes-stz-vm?)
      `optimized-pkgs :
        ;Already done
        false
      `unoptimized-asm :
        val packages = Vector<VMPackage|StdPkg>()
        for p in /packages(result) do :
          match(p) :
            (p:EPackage) : add(packages, compile(lower-unoptimized(p), debug?))
            (p:StdPkg)  : add(packages, p)
        val pkgsaver? = pkgsaver when pkg-dir is String or cache-dir is String
        compile-vmpackages(pkgsaver?, to-tuple(packages), bindings(result), output as String, includes-stz-vm?)
      `unoptimized-pkgs :
        compile-to-pkgs(pkgsaver, packages(result) as Tuple<EPackage|StdPkg>)

    ;Return result
    CompilationResult(map(name, packages(result)),
                      binding-packages(result),
                      pkgstamps(result),
                      to-tuple(output-pkgs))

  defn combine-and-lower (packages:Tuple<EPackage|FastPkg>) :
    val epackages = for p in packages map :
      match(p:FastPkg) : EPackage(packageio(p), exps(p))
      else : p as EPackage
    compile(lower-optimized(epackages), debug?)

  ;- pkgsaver: False if we not need to write out any .pkg files to disk (either
  ;  to pkg dir or to pkg cache.). 
  defn compile-vmpackages (pkgsaver:PkgSaver|False,
                           packages:Tuple<VMPackage|StdPkg>,
                           bindings:Bindings|False,
                           filename:String,
                           includes-stz-vm?:True|False) :
    val stubs = AsmStubs(backend)
    val npkgs = for p in packages map :
      match(p:VMPackage) : normalize(p, backend)
      else : p as StdPkg
    val stitcher = Stitcher(map(collapse,npkgs), bindings, stubs)
    defn compile (filestream:OutputStream) :
      emit-text-section-markers(filestream, stubs, `stanza_text_section_start)
      for (pkg in packages, npkg in npkgs) do :
        match(npkg) :
          (npkg:NormVMPackage) :
            match(pkgsaver:PkgSaver) :
              ;Compile and return instructions.
              val ins = compile-normalized-vmpackage(filestream, npkg, stitcher, stubs, true)
              val output-pkg = StdPkg(pkg as VMPackage, ins as Tuple<Ins>, datas(npkg))
              save-when-appropriate(pkgsaver, output-pkg)
            else :
              ;Compile without returning instructions.
              compile-normalized-vmpackage(filestream, npkg, stitcher, stubs, false)
          (std-pkg:StdPkg) :
            match(pkgsaver:PkgSaver) : save-when-appropriate(pkgsaver, std-pkg)
            compile-stdpkg(filestream, std-pkg, stitcher)
      emit-all-system-stubs(filestream, stitcher, stubs, includes-stz-vm?)
      emit-text-section-markers(filestream, stubs, `stanza_text_section_end)

    ;Create filestream and compile to it.
    ensure-containing-directory-exists(filename)
    val filestream = FileOutputStream(filename)
    try: compile(filestream)
    finally: close(filestream)

  defn compile-stdpkg (filestream:OutputStream, pkg:StdPkg, stitcher:Stitcher) :
    val emitter = emitter(stitcher, name(pkg), file-emitter(filestream, stubs(stitcher)))
    for ins in asm(pkg) do : emit(emitter, ins)

  ;Emit labeled markers at the extents of the text section so that
  ;debugger knows where code starts/stops.
  defn emit-text-section-markers (filestream:OutputStream, stubs:AsmStubs, label-name:Symbol) :
    val emitter = file-emitter(filestream, stubs)
    emit(emitter, DefText())
    emit(emitter, ExLabel(label-name))

  defn compile-normalized-vmpackage (filestream:OutputStream, npkg:NormVMPackage, stitcher:Stitcher, stubs:AsmStubs, return-instructions?:True|False) :
    if return-instructions? :
      val buffer = Vector<Ins>()
      val emitter = buffer-emitter(buffer, emitter(stitcher, name(npkg), file-emitter(filestream, stubs)))
      emit-normalized-package(npkg, emitter, stubs)
      to-tuple(buffer)
    else :
      val emitter = emitter(stitcher, name(npkg), file-emitter(filestream, stubs))
      emit-normalized-package(npkg, emitter, stubs)

  defn compile-to-pkgs (pkgsaver:PkgSaver, packages:Tuple<EPackage|StdPkg>) :
    val stubs = AsmStubs(backend)
    for package in packages do :
      match(package) :
        (epackage:EPackage) :
          val vmpackage = compile(lower-unoptimized(epackage), debug?)
          val npkg = normalize(vmpackage, backend)
          val buffer = Vector<Ins>()
          emit-normalized-package(npkg, buffer-emitter(buffer, stubs), stubs)
          save-when-appropriate(pkgsaver, StdPkg(vmpackage, to-tuple(buffer), datas(npkg)))
        (package:StdPkg) :
          save-when-appropriate(pkgsaver, package)

  defn emit-normalized-package (npkg:NormVMPackage, emitter:CodeEmitter, stubs:AsmStubs) :
    ;Create the debug table so that we can add debug comments
    ;to each function.
    val debug-table = to-inttable<VMDebugInfo> $
      for e in entries(debug-table(vmpackage(npkg))) seq :
        id(e) => e
    defn function-comment (id:Int) -> Comment :
      Comment $ match(get?(debug-table, id)) :
        (dbg:VMDebugInfo) :
          val name = match(name(dbg)) :
            (name:String) : name
            (f:False) : "Unnamed function"
          val info-str = match(info(dbg)) :
            (info:AbsoluteFileInfo) : " at %_" % [/info(info)]
            (f:False) : ""
          string-join([name info-str])
        (f:False) :
          "Unnamed function"

    ;Emit each function
    val num-funcs = length(funcs(vmpackage(npkg)))
    for (f in funcs(vmpackage(npkg)), index in 0 to false) do :
      val fcomment = function-comment(id(f))
      vprintln(3, "[Function %_ of %_] Allocating registers for function %_ (%_)" % [index + 1, num-funcs, id(f), fcomment])
      emit(emitter, fcomment)
      emit(emitter, LinkLabel(id(f)))
      allocate-registers(id(f), func(f), emitter, backend, stubs, debug?, false)

  defn emit-all-system-stubs (filestream:OutputStream, stitcher:Stitcher, stubs:AsmStubs, vm-stubs?:True|False) :
    val emitter = file-emitter(filestream, stubs)
    emit-tables(stitcher, emitter)
    emit-stubs(stitcher, emitter, vm-stubs?)
    compile-runtime-stubs(emitter, stubs)

  ;Buffer Utilities
  defn file-emitter (os:OutputStream, stubs:AsmStubs) :
    new CodeEmitter :
      defmethod emit (this, i:Ins) :
        emit-asm(os, i, backend)
      defmethod unique-label (this) :
        unique-id(stubs)

  defn buffer-emitter (buffer:Vector<Ins>, emitter:CodeEmitter) :
    new CodeEmitter :
      defmethod emit (this, i:Ins) :
        add(buffer, i)
        emit(emitter, i)
      defmethod unique-label (this) :
        unique-label(emitter)

  defn buffer-emitter (buffer:Vector<Ins>, stubs:AsmStubs) :
    new CodeEmitter :
      defmethod emit (this, i:Ins) :
        add(buffer, i)
      defmethod unique-label (this) :
        unique-id(stubs)

  ;Launch
  driver()

;============================================================
;============= Collapsing a Normalized Package ==============
;============================================================

defn collapse (p:NormVMPackage|StdPkg) :
  val [vmp, asm-datas] = match(p) :
    (p:NormVMPackage) : [vmpackage(p), datas(p)]
    (p:StdPkg) : [vmp(p), datas(p)]
  new VMPackage :
    defmethod packageio (this) : packageio(vmp)
    defmethod init (this) : init(vmp)
    defmethod globals (this) : globals(vmp)
    defmethod datas (this) : to-tuple(cat(datas(vmp), asm-datas))
    defmethod consts (this) : consts(vmp)
    defmethod classes (this) : classes(vmp)
    defmethod funcs (this) : funcs(vmp)
    defmethod methods (this) : methods(vmp)
    defmethod externs (this) : externs(vmp)
    defmethod extern-defns (this) : extern-defns(vmp)
    defmethod debug-table (this) : debug-table(vmp)
    defmethod safepoint-table (this) : safepoint-table(vmp)
    defmethod debug-name-table (this): debug-name-table(vmp)
