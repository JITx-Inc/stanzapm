defpackage stz/stable-arrays :
  import core
  import collections

#for (Prim in [Byte Int Long Float Double]
      prim in [byte int long float double]
      StablePrimArray in [StableByteArray StableIntArray StableLongArray StableFloatArray StableDoubleArray]
      x0 in [0Y 0 0L 0.0f 0.0]) :

  public lostanza deftype StablePrimArray <: Array<Prim> :
    length: long
    data: ptr<prim>
    marker: ref<LivenessMarker>

  public lostanza defn StablePrimArray (n:ref<Int>, x:ref<Prim>) -> ref<StablePrimArray> :
    core/ensure-non-negative-length(n)
    val l = n.value
    val data:ptr<prim> = call-c clib/malloc(l * sizeof(prim))
    val xv = x.value
    for (var i:long = 0, i < l, i = i + 1) :
      data[i] = xv
    val marker = c-autofree-marker(addr(clib/free), data)
    return new StablePrimArray{l, data, marker}

  public defn StablePrimArray (n:Int) :
    StablePrimArray(n, x0)

  lostanza defmethod get (a:ref<StablePrimArray>, i:ref<Int>) -> ref<Prim> :
    core/ensure-index-in-bounds(a, i)
    return new Prim{a.data[i.value]}

  lostanza defmethod set (a:ref<StablePrimArray>, i:ref<Int>, v:ref<Prim>) -> ref<False> :
    core/ensure-index-in-bounds(a, i)
    a.data[i.value] = v.value
    return false

  lostanza defmethod length (a:ref<StablePrimArray>) -> ref<Int> :
    return new Int{a.length as int}
