;See License.txt for details about licensing.

defpackage stz/resolver :
   import core
   import collections
   import stz/il-ir
   import stz/namemap
   import stz/primitives
   import stz/utils
   import stz/algorithms
   import stz/renamer
   import stz/params
   import stz/dl-ir
   import stz/ids
   import stz/visibility

;============================================================
;====================== Driver ==============================
;============================================================

;Exports from the environment must have unique identifiers
;(rename the identifiers if this is not the case).
public deftype Env
public defmulti exports (e:Env, package:Symbol) -> PackageExports|False

public defn resolve-il (ipackages:Tuple<IPackage>, env:Env, priority:False|(Symbol -> Int)) -> Tuple<IPackage>|ResolveErrors :
  ;Track all detected errors
  val error-accum = Vector<ResolveError>()

  ;Create base environments
  val symtables = SymbolTables(ipackages, env, error-accum)

  ;Resolve individual packages
  val ipackages* = for ipackage in ipackages map :
    val symtable = symtables[name(ipackage)] as SymbolTable
    val eng = Engine(symtable, symtables, priority, error-accum)
    val exps* = map(resolve-exp{_, eng}, exps(ipackage))
    val ipackage* = sub-exps(ipackage, exps*)
    add-qualified-imports(ipackage*, qualified-imports(eng))

  ;Resolve type dependencies from pkgs
  check-exported-types(symtables, ipackages, package-exports(symtables), error-accum)

  ;Return result
  if empty?(error-accum) : ipackages*
  else : ResolveErrors(error-accum)  

;============================================================
;=================== Check Type Dependencies ================
;============================================================

defn check-exported-types (symtables:SymbolTables, pkgs:Tuple<IPackage>, pexs:Tuple<PackageExports>, error-accum:Vector<ResolveError>) :
  ;Compute set of source packages
  val packages = to-hashset<Symbol>(seq(name,pkgs))

  ;Ensure that all types referenced in exports are defined
  for pex in pexs do :
    ;Check for existence of typeid
    defn check-for-type (e:TypeId) :
      if packages[package(e)] :
        val symtable = symtables[package(e)] as SymbolTable
        defn type? (e:VEntry) : type(e) is TypeE|LTypeE
        val entries = filter(type?, base(symtable, name(e)))
        add(error-accum, MissingType(package(pex), e)) when empty?(entries)
    ;Recursively scan DItem for typeid
    defn scan-for-type (e:DItem) :
      do(scan-for-type, e)
      match(e:TypeId) :
        check-for-type(e)
    ;Scan all exports
    do(scan-for-type, exports(pex))

;============================================================
;===================== Defresolver ==========================
;============================================================

#use-added-syntax(stz-resolver-lang)
defresolver resolve-exp (e:IExp, eng:Engine) :

  ;     Resolving Stanza Expressions
  ;     ----------------------------   
  ;Resolve top level expressions
  resolve te :
    IBegin: (exps:te)
    IDefType: {args:+, parent:t, children:te}
    IDefChild: (name:c, {args:+, parent:t})
    IDef: (type:t, value:e)
    IDefVar: (type:t, value:e)
    IDefn: {targs:+, args:+, a1:t, a2:t, body:e}
    IDefmulti: {targs:+, a1:t, a2:t}
    IDefmethod: (multi:m, {targs:+, args:+, a1:t, a2:t, body:e})
    IVisibility: (exp:te)
    + ltc
    + e

  ;Resolve Stanza expressions
  resolve e :
    Let: (def:e, body:e)
    LetRec: (defns:f+, defns:f, body:e)
    ILet: {exp:e}
    IDef: (type:t, value:e, name:+)
    IDefVar: (type:t, value:e, name:+)
    IFn: (a1:t, a2:t, {args:+, body:e})
    IBranch: (types:t, {args:+, body:e})
    INew: (class:pt, methods:dm)
    ICast: (exp:e, type:t)
    IUpCast: (exp:e, type:t)
    ISet: (name:v, value:e)
    IPrim: (op:prim, args:e)
    IDo: (func:farg, args:e)
    IVar: resolve var
    ILiteral: ()
    INone: ()
    IMulti: (_:e)
    IBegin: (_:e)
    IMatch: (_:e)
    ITuple: (_:e)      

  ;Stanza Nested functions
  resolve f :
    IDefn: {targs:+, args:+, a1:t, a2:t, body:e}

  ;Function arguments used in do forms
  resolve farg :
    IOf: (class:e, args:t)
    + e

  ;Nested defmethods in new forms
  resolve dm :
    IDefmethod: (multi:m, {targs:+, args:+, a1:t, a2:t, thisn:this, body:e})

  ;For resolving multis in defmethod forms
  resolve m :
    IVar: resolve multi

  ;For resolving the this argument in nested defmethod forms
  resolve this (Int|False) :
    Int|False: resolve this

  ;For resolving mutable variables in set forms
  resolve v :
    IVar: resolve mutable-var

  ;For resolving HiStanza primitive
  resolve prim :
    IVar: resolve prim

  ;For scanning for nested functions in a letrec form
  define f+ :
    IDefn: (name:+)

  ;For scanning for defined blocks in a labels form
  define blk+ :
    ILSLabeledBlock: (name:+)

  ;     Resolving Types
  ;     ---------------
  ;Resolving a HiStanza type
  resolve t :
    IVar: resolve type
    ICap: (name:cap)
    IOf: (class:c, args:t)
    IExp: (_:t)
     
  ;For resolving class in a A<X> form
  resolve c :
    IVar: resolve class

  ;For resolving the captured type variable
  resolve cap :
    IVar: resolve capvar

  ;     Resolving Parent Types
  ;     ----------------------
  resolve pt :
    IVar: resolve raw-hs-class
    IOf: (class:hclass, args:t)
    IExp: (_:pt)
  resolve hclass :
    IVar: resolve hs-class

  ;     Resolving LoStanza
  ;     ------------------
  ;For resolving top level LoStanza commands
  resolve ltc :
    IBegin: (exps:ltc)
    ILSDef: (exp:le, type:lt)
    ILSDefVar: (exp:le, type:lt)
    ILSDefType: {args:+, parent:pt, types:lt, rtype:lt}
    ILSExtern: (type:lt)
    ILSDefn: {targs:+, a1:lt, a2:lt, args:+, body:lc}
    ILSExternFn: {a1:lt, a2:lt, args:+, body:lc}
    ILSDefmethod: (multi:m, {targs:+, a1:lt, a2:lt, args:+, body:lc})
    + lc

  ;For resolving LoStanza commands
  resolve lc :
    IBegin: (exps:lc)
    ILSSet: (exp:lval, value:le)
    ILSLabels: {blocks:blk+, blocks:lc}
    ILSLabeledBlock: (types:lt, {args:+, body:lc})
    ILSGoto: (name:lbl, args:le)
    ILSReturn: (exp:le)
    ILSLet: {comm:lc}
    ILSIf: (pred:le, {conseq:lc}, {alt:lc})
    ILSMatch: (args:le, branches:lc)
    ILSBranch: (types:lt, {args:+, body:lc})
    ILSDef: (exp:le, type:lt, name:+)
    ILSDefVar: (exp:le, type:lt, name:+)
    ILSDo: (func:lfarg, args:le)
    ILSPrim: (op:lprim, args:le)
    ILSCallC: (_:le)

  ;For resolving a LoStanza expression
  resolve le :
    IVar: resolve var
    ILSAddr: (exp:lval)
    ILSNew: (type:lt, args:le)
    ILSStruct: (type:lt, args:le)
    ILSField: (exp:le)
    ILSDo: (func:lfarg, args:le)
    ILSPrim: (op:lprim, args:le)
    ILSSizeof: (type:lt)
    ILSTagof: (name:lclass)
    ILSAs: (exp:le, type:lt)
    ILSFn: (ref:fn)
    ILiteral: ()
    IExp: (_:le)

  ;For resolving functions in ls-fn forms
  resolve fn :
    IVar: resolve function

  ;For resolving labels in label/goto forms
  resolve lbl :
    IVar: resolve label

  ;For resolving the lvalue expression in a set form
  resolve lval :
    IVar: resolve var
    ILSDeref: (exp:le)
    ILSSlot: (exp:le index:le)
    ILSField: (exp:le)

  ;For resolving the name argument of a prim form
  resolve lprim :
    IVar: resolve ls-prim

  ;For resolving the function argument of a do form
  resolve lfarg :
    ILSOfT: (class:le, args:t)
    + le

  ;For resolving a LoStanza type
  resolve lt :
    IVar: resolve raw-ls-class
    ILSOfT: (class:lclass, args:t)
    ILSRefT: (type:t)
    IExp: (_:lt)
  resolve lclass :
    IVar: resolve ls-class

;============================================================
;===================== Engine ===============================
;============================================================

deftype Engine
defmulti new-definitions (eng:Engine, e:IExp) -> False
defmulti push-scope (eng:Engine) -> False
defmulti pop-scope (eng:Engine) -> False
defmulti resolve (e:IVar, eng:Engine, type:Symbol) -> IExp
defmulti resolve (e:Int|False, eng:Engine, type:Symbol) -> Int|False
defmulti qualified-imports (eng:Engine) -> Tuple<Symbol>

defn Engine (current-symtable:SymbolTable,
             symtables:SymbolTables,
             priority:False|(Symbol -> Int),
             errors:Vector<ResolveError>) :
  ;All packages that need to be imported
  ;due to package-qualified identifiers.
  val import-set = HashSet<Symbol>()  

  ;Type predicates
  defn type-pred (f: EType -> True|False) : fn* (e:VEntry) : f(type(e))
  val var? = type-pred({_ is LValE|LVarE|LFnE|ValE|VarE|FnE|MultiE})
  val mvar? = type-pred({_ is LVarE|VarE})
  val fn? = type-pred({_ is LFnE|FnE|MultiE})
  val multi? = type-pred({_ is MultiE})
  val type? = type-pred({_ is TVarE|CapVarE|TypeE|LTypeE})
  val class? = type-pred({_ is TypeE|LTypeE})
  val hs-class? = type-pred({_ is TypeE})
  val ls-class? = type-pred({_ is LTypeE})               
  val tvar? = type-pred({_ is TVarE|CapVarE})
  val capvar? = type-pred({_ is CapVarE})
  val label? = type-pred({_ is LabelE})

  ;Resolve a variable of the given type.
  ;Result can be multiple entries.
  defn resolve-many (e:IVar, pred?:VEntry -> True|False, base?:True|False) -> List<VEntry> :
    val [package-name, local-name] = qualifier(name(e))
    match(package-name) :
      (package-name:Symbol) :        
        if package-name == `\|| :
          resolve-top(local-name)        
        else : 
          match(symtables[package-name]) :
            (t:SymbolTable) : resolve-qualified(t, package-name, local-name)
            (_:False) : throw(BadQualifyPackage(name(e), info(e)))
      (package-name:False) :
        resolve-unqualified(local-name)
    where :
      ;Prune by priority
      defn prune-low-priority (es:Seqable<VEntry>) :
        match(priority:Symbol -> Int) :
          defn max-priority (es:Seqable<VEntry>) : maximum(seq(priority{package(_)}, es))
          val [es, max-p] = fork-on-seq(es, to-tuple, max-priority)
          filter({priority(package(_)) == max-p}, es)
        else :
          es
        
      ;Return type-appropriate entries
      defn return-pruned (es:Seqable<VEntry>) :
        val es* = filter(pred?, es)
        if empty?(es*) : throw(NoResolve(name(e), info(e)))
        else : to-list(prune-low-priority(es*))

      ;Qualified form: /mysymbol
      defn resolve-top (name:Symbol) :
        return-pruned(base(current-symtable, name))

      ;Qualified form: mypackage/mysymbol
      defn resolve-qualified (table:SymbolTable, package-name:Symbol, name:Symbol) :
        add(import-set, package-name)
        return-pruned $ for e in base(table,name) filter :
          visibility(e) is Public|Protected and
          package(e) == package(table)

      ;Standard unqualified symbol
      defn resolve-unqualified (name:Symbol) :
        if base? :
          resolve-top(name)
        else :
          val es = for layer in current-symtable[name] first :
            val es* = filter(pred?, layer)
            if empty?(es*) : None()
            else : One(es*)
          if empty?(es) : throw(NoResolve(/name(e), info(e)))
          else : to-list(prune-low-priority(value!(es)))
  defn resolve-many (e:IVar, pred?:VEntry -> True|False) -> List<VEntry> :
    resolve-many(e, pred?, false)

  ;Resolve a variable of the given type.
  ;Result must be a single unambiguous entry.
  defn resolve-one (e:IVar, pred?:VEntry -> True|False, base?:True|False) -> VEntry :
    val es = resolve-many(e, pred?, base?)
    if empty?(tail(es)) : head(es)
    else : throw(AmbResolve(name(e), info(e), es))
  defn resolve-one (e:IVar, pred?:VEntry -> True|False) -> VEntry :
    resolve-one(e, pred?, false)

  ;Resolve a variable in the immediate scope.
  ;Guaranteed to not be a top-level scope. (So no need for priority pruning.)
  defn resolve-immediate (e:IVar, pred?:VEntry -> True|False) :
    val es = to-list(filter(type?, immediate(current-symtable, name(e))))
    if empty?(es) : throw(NoResolve(name(e), info(e)))
    else if one?(es) : head(es)
    else : throw(AmbResolve(name(e), info(e), es))

  ;Accumulate errors
  defn catch-error<?T> (f:() -> ?T, default:?T) :
    try :
      f()
    catch (ex:ResolveError) :
      add(errors, ex)
      default

  new Engine :
    defmethod qualified-imports (this) :
      to-tuple(import-set)
    defmethod new-definitions (this, e:IExp) :        
      let loop (e:IExp = e) :
        match(e:VarN) : define(current-symtable, n(e))
        else : do(loop, e)
    defmethod push-scope (this) :
      push-scope(current-symtable)
    defmethod pop-scope (this) :
      pop-scope(current-symtable)
    defmethod resolve (e:IVar, this, type:Symbol) :
      ;Return a list of entries
      defn return (es:List<VEntry>) :
        if one?(es) : return(head(es))
        else : Mix(map(return,es), info(e))
      defn return (ventry:VEntry) :
        VarN(n(ventry), info(e))

      within catch-error(e) :  
        switch(type) :
          `var :
            val vs = resolve-many(e,var?)
            if one?(vs) : return(head(vs))
            else if all?(fn?, vs) : return(vs)
            else : throw(AmbResolve(name(e), info(e), vs))
          `mutable-var :
            val v = resolve-one(e,var?)
            if not mvar?(v) : throw(NotMutable(name(e), info(e), v))
            else : return(v)
          `multi :
            return(resolve-many(e,multi?,true))
          `function :
            val vs = resolve-many(e,var?)
            if one?(vs) :
              val v = head(vs)
              if fn?(v) : return(v)
              else : throw(NotFn(name(e),info(e),v))
            else if all?(fn?, vs) : return(vs)
            else : throw(AmbResolve(name(e), info(e), vs))
          `type :
            val v = resolve-one(e,type?)
            if class?(v) : Raw(return(v), info(e))
            else : return(v)
          `class :
            val v = resolve-one(e,type?,true)
            if class?(v) : return(v)
            else : throw(NotClass(name(e),info(e),v))
          `capvar :
            val v = resolve-immediate(e, type?)
            if capvar?(v) : return(v)
            else : throw(NotCapVar(name(e), info(e), v))          
          `raw-hs-class :
            val v = resolve-one(e,type?,true)
            if hs-class?(v) : Raw(return(v), info(e))
            else : throw(NotHSClass(name(e),info(e),v))
          `hs-class :
            val v = resolve-one(e,type?,true)
            if hs-class?(v) : return(v)
            else : throw(NotHSClass(name(e),info(e),v))
          `raw-ls-class :
            val v = resolve-one(e,type?,true)
            if ls-class?(v) : Raw(return(v), info(e))
            else : throw(NotLSClass(name(e),info(e),v))
          `ls-class :
            val v = resolve-one(e,type?,true)
            if ls-class?(v) : return(v)
            else : throw(NotLSClass(name(e),info(e),v))
          `label :
            return(resolve-one(e,label?))          
          `prim :
            throw(NotPrim(name(e),info(e))) when not primitive?(name(e))            
            e
          `ls-prim :
            throw(NotLSPrim(name(e),info(e))) when not ls-primitive?(name(e))            
            e
    defmethod resolve (e:Int|False, this, type:Symbol) :
      fatal("Illegal argument") when type != `this
      val es = to-list(filter(var?, immediate(current-symtable, `this)))
      fatal("Improper instance method.") when length(es) != 1
      n(head(es))

defn add-qualified-imports (ipackage:IPackage, imps:Tuple<Symbol>) :
  ;Set of imports
  val imports = HashSet<IImport>(name-hash, name-equal?) where :
    defn name-hash (i:IImport) : hash(package(i))
    defn name-equal? (a:IImport, b:IImport) : package(a) == package(b)

  ;Add existing imports
  add-all(imports, /imports(ipackage))

  ;Add new imports
  for imp in imps do :
    add(imports, IImport(imp)) when imp != name(ipackage)      

  ;Add imports    
  sub-imports(ipackage, to-tuple(imports))  

;============================================================
;=================== Symbol Tables ==========================
;============================================================

deftype SymbolTables
defmulti get (st:SymbolTables, package:Symbol) -> SymbolTable|False
defmulti package-exports (st:SymbolTables) -> Tuple<PackageExports>

defn SymbolTables (ipackages:Tuple<IPackage>, env:Env, errors:Vector<ResolveError>) :
  ;Table mapping package names to source packages
  val pkg-table = to-hashtable<Symbol, IPackage> $
    for p in ipackages seq :
      name(p) => p

  ;Keep track of all PackageExports required by program
  val package-exports = HashTable-init<Symbol,PackageExports|False>(exports{env, _})      

  ;Construct symbol tables
  defn make-symtable (package:Symbol) :
    if key?(pkg-table, package) :
      ;Package corresponds to a source package
      val ipackage = pkg-table[package]
      ;Create and initialize symboltable with base mappings
      val symtable = SymbolTable(name(ipackage), namemap(ipackage))
      ;Evaluate all imports for the symbol table
      for imp in imports(ipackage) do :
        defn visible? (e:VEntry|Export) :
          if import-private?(imp) : true
          else : visibility(e) is Public
        val package-name = /package(imp)
        if key?(pkg-table, package-name) :
          val namemap = namemap(pkg-table[package-name])
          import(symtable, filter(visible?, toplevel(namemap)), prefix(imp))
        else :
          match(package-exports[package-name]) :
            (pexs:PackageExports) : import(symtable, filter(visible?, exports(pexs)), prefix(imp))
            (_:False) : add(errors, NoPackage(package-name, name(ipackage), info(imp)))        
      symtable
    else :      
      match(package-exports[package]) :
        ;Package corresponds to an environment package
        (pexs:PackageExports) : SymbolTable(package, exports(pexs))
        (_:False) : false
        
  ;Cached symbol tables
  val symtables = HashTable-init<Symbol, SymbolTable|False>(make-symtable)

  ;Return symbol tables structure
  new SymbolTables :
    defmethod get (this, package:Symbol) :
      symtables[package]
    defmethod package-exports (this) :
      to-tuple $ filter-by<PackageExports>(values(package-exports))

deftype SymbolTable
defmulti package (t:SymbolTable) -> Symbol
defmulti import (t:SymbolTable, entries:Seqable<VEntry>, prefix:Tuple<IPrefix>) -> False
defmulti import (t:SymbolTable, exports:Seqable<Export>, prefix:Tuple<IPrefix>) -> False
defmulti push-scope (t:SymbolTable) -> False
defmulti pop-scope (t:SymbolTable) -> False
defmulti define (t:SymbolTable, n:Int) -> False
defmulti get (t:SymbolTable, name:Symbol) -> List<List<VEntry>>
defmulti base (t:SymbolTable, name:Symbol) -> List<VEntry>
defmulti immediate (t:SymbolTable, name:Symbol) -> List<VEntry>

defn SymbolTable (package-name:Symbol, base:NameMap|Tuple<Export>) :
  ;Level Table
  val table = MultilevelTable<Symbol, List<VEntry>>()
  val basetable = HashTable<Symbol, List<VEntry>>(List())
  defn add-entry (e:VEntry, prefix:String|False) :
    val name* = add-prefix(prefix, name(e))
    table[name*] =
      if key?(table, name*) : cons(e, table[name*])
      else : List(e)
    if level(table) == 0 :
      update(basetable, cons{e,_}, name*)
      false
  defn add-entries (es:Seqable<VEntry>) :
    do(add-entry{_, false}, es)

  ;Importing a sequence of entries
  defn import (es:Seqable<VEntry>, prefix:Tuple<IPrefix>) :
    val ptable = PrefixTable(prefix)
    for e in es do :
      add-entry(e, ptable[name(e)])

  ;Initializing the symbol table
  match(base) :
    (basemap:NameMap) : add-entries(toplevel(basemap))
    (baseexs:Tuple<Export>) : add-entries(seq(VEntry,baseexs))

  ;Return bindings structure
  new SymbolTable :
    defmethod package (this) :
      package-name
    defmethod import (this, entries:Seqable<VEntry>, prefix:Tuple<IPrefix>) :
      import(entries, prefix)
    defmethod import (this, exports:Seqable<Export>, prefix:Tuple<IPrefix>) :
      import(seq(VEntry,exports), prefix)
    defmethod push-scope (this) :
      push-level(table)
    defmethod pop-scope (this) :
      pop-level(table)
    defmethod define (this, n:Int) :
      val basemap = base as NameMap
      add-entry(basemap[n], false)
    defmethod get (this, name:Symbol) :
      get-all(table,name)
    defmethod base (this, name:Symbol) :
      get?(basetable, name, List())
    defmethod immediate (this, name:Symbol) :
      if key?(table,name) : table[name]
      else : List()
    defmethod print (o:OutputStream, this) :
      val o2 = IndentedStream(o)
      val o3 = IndentedStream(o, 4)
      print(o, "symbol table for package %~ :" % [package-name])
      for e in basetable do :
        lnprint(o2, "%~ : " % [key(e)])
        lnprints(o3, value(e))      

;============================================================
;==================== Prefixes ==============================
;============================================================

deftype PrefixTable
defmulti get (t:PrefixTable, name:Symbol) -> String|False

defn PrefixTable (prefixes:Tuple<IPrefix>) :
  var all-prefix:String|False = false
  val table = HashTable<Symbol,String>()
  for e in prefixes do :
    match(names(e)) :
      (names:False) : all-prefix = prefix(e)
      (names:Tuple<Symbol>) : do({table[_] = prefix(e)}, names)
  new PrefixTable :
    defmethod get (this, name:Symbol) :
      match(get?(table, name)) :
        (s:String) : s
        (s:False) : all-prefix
        
defn add-prefix (prefix:String|False, x:Symbol) :
  match(prefix:String) :
    val name* = append(prefix,name(x))
    match(x) :
      (x:StringSymbol) : to-symbol(name*)
      (x:GenSymbol) : gensym(name*)
  else :
    x
    
;============================================================
;======================= Utilities ==========================
;============================================================

defn one? (xs:List) :
  not empty?(xs) and empty?(tail(xs))

;============================================================
;===================== Exceptions ===========================
;============================================================

public deftype ResolveError <: Exception
public defmulti info (e:ResolveError) -> FileInfo|False

public defstruct NoResolve <: ResolveError :
  name:Symbol
  info:FileInfo|False with: (as-method => true)
public defstruct BadQualifyPackage <: ResolveError :
  name:Symbol
  info:FileInfo|False with: (as-method => true)
public defstruct NoPackage <: ResolveError :
  name:Symbol
  source-package:Symbol
  info:FileInfo|False with: (as-method => true)
public defstruct AmbResolve <: ResolveError :
  name:Symbol
  info:FileInfo|False with: (as-method => true)
  entries:List<VEntry>
public defstruct NotMutable <: ResolveError :
  name:Symbol
  info:FileInfo|False with: (as-method => true)
  entry:VEntry
public defstruct NotFn <: ResolveError :
  name:Symbol
  info:FileInfo|False with: (as-method => true)
  entry:VEntry
public defstruct NotClass <: ResolveError :
  name:Symbol
  info:FileInfo|False with: (as-method => true)
  entry:VEntry
public defstruct NotHSClass <: ResolveError :
  name:Symbol
  info:FileInfo|False with: (as-method => true)
  entry:VEntry
public defstruct NotLSClass <: ResolveError :
  name:Symbol
  info:FileInfo|False with: (as-method => true)
  entry:VEntry
public defstruct NotPrim <: ResolveError :
  name:Symbol
  info:FileInfo|False with: (as-method => true)
public defstruct NotLSPrim <: ResolveError :
  name:Symbol
  info:FileInfo|False with: (as-method => true)
public defstruct NotCapVar <: ResolveError :
  name:Symbol
  info:FileInfo|False with: (as-method => true)
  entry:VEntry
public defstruct MissingType <: ResolveError :
  src-package:Symbol
  typeid:TypeId

defmethod print (o:OutputStream, e:MissingType) :
  val FMT = "Missing type: The %~ package requires the %_/%_ type to be defined."
  print(o, FMT % [src-package(e), package(typeid(e)), name(typeid(e))])

defmethod print (o:OutputStream, e:NoResolve) :
  val FMT = "%_Could not resolve %~."
  print(o, FMT % [infostr(e), name(e)])

defmethod print (o:OutputStream, e:BadQualifyPackage) :
  val [package,n] = qualifier(name(e))
  val FMT = "%_Could not resolve %~. The package %~ could not be found."
  print(o, FMT % [infostr(e), name(e), package])

defmethod print (o:OutputStream, e:NoPackage) :
  val FMT = "%_Could not find package %~, which is imported by package %~."
  print(o, FMT % [infostr(e), name(e), source-package(e)])

defmethod print (o:OutputStream, e:AmbResolve) :
  val FMT = "%_Ambiguous reference to %~. Possibilities include:"
  print(o, FMT % [infostr(e), name(e)])
  val o2 = IndentedStream(o)
  for v in entries(e) do :
    val FMT = "%_%~ defined in package %~"
    lnprint(o2, FMT % [infostr(v), name(v), package(v)])

defmethod print (o:OutputStream, e:NotMutable) :
  val FMT = "%_Expected %~ to be a mutable variable, but %_"
  print(o, FMT % [infostr(e), name(e), descriptor(entry(e))])
  
defmethod print (o:OutputStream, e:NotFn) :
  val FMT = "%_Expected %~ to be a function, but %_"
  print(o, FMT % [infostr(e), name(e), descriptor(entry(e))])
  
defmethod print (o:OutputStream, e:NotClass) :
  val FMT = "%_Expected %~ to be a type, but %_"
  print(o, FMT % [infostr(e), name(e), descriptor(entry(e))])

defmethod print (o:OutputStream, e:NotHSClass) :
  val FMT = "%_Expected %~ to be a HiStanza type, but %_"
  print(o, FMT % [infostr(e), name(e), descriptor(entry(e))])
  
defmethod print (o:OutputStream, e:NotLSClass) :
  val FMT = "%_Expected %~ to be a LoStanza type, but %_"
  print(o, FMT % [infostr(e), name(e), descriptor(entry(e))])

defmethod print (o:OutputStream, e:NotCapVar) :
  val FMT = "%_Expected %~ to be a captured type variable, but %_"
  print(o, FMT % [infostr(e), name(e), descriptor(entry(e))])
  
defmethod print (o:OutputStream, e:NotPrim) :
  val FMT = "%_%~ is not a recognized HiStanza primitive."
  print(o, FMT % [infostr(e), name(e)])

defmethod print (o:OutputStream, e:NotLSPrim) :
  val FMT = "%_%~ is not a recognized LoStanza primitive."
  print(o, FMT % [infostr(e), name(e)])

defn descriptor (e:VEntry) :
  val typestr = match(type(e)) :
    (t:ValE) : "HiStanza value"
    (t:VarE) : "HiStanza variable"
    (t:TVarE) : "type variable"
    (t:CapVarE) : "captured type variable"
    (t:TypeE) : "HiStanza type"
    (t:MultiE) : "multi"
    (t:FnE) : "HiStanza function"
    (t:LValE) : "LoStanza value"
    (t:LVarE) : "LoStanza variable"
    (t:LFnE) : "LoStanza function"
    (t:LTypeE) : "LoStanza type"
    (t:FieldE) : "field"
    (t:LabelE) : "label"
  val defstr = match(info(e)) :
    (info:FileInfo) : " at %_" % [info]
    (info:False) : ""
  "%~ defined%_ in package %~ is a %_." % [name(e), defstr, package(e), typestr]

defn infostr (info:FileInfo|False) :
  match(info) :
    (info:FileInfo) : "%_: " % [info]
    (info:False) : ""
defn infostr (e:ResolveError) :
  infostr(info(e))
defn infostr (e:VEntry) :
  infostr(info(e))

public defstruct ResolveErrors <: Exception :
  errors: Vector<ResolveError>
defmethod print (o:OutputStream, e:ResolveErrors) :
  print(o, "%n" % [errors(e)])
