;See License.txt for details about licensing.

defpackage stz/resolver :
   import core
   import collections
   import stz/il-ir
   import stz/namemap
   import stz/primitives
   import stz/utils
   import stz/algorithms
   import stz/renamer
   import stz/params
   import stz/dl-ir
   import stz/ids

;============================================================
;====================== Driver ==============================
;============================================================

public deftype Env
public defmulti packageio (e:Env, package:Symbol) -> PackageIO|False

public defstruct ResolvedPackages :
  imports: Tuple<Import>
  packages: Tuple<IPackage>

public defn resolve-il (ipackages:Tuple<IPackage>, env:Env) -> ResolvedPackages|ResolveErrors :
  println("===== Resolving =====")
  do(println, ipackages)
  
  val symtables = SymbolTables(ipackages, env)
  
  for ipackage in ipackages do :
    val eng = Engine(symtables, name(ipackage))
    for e in exps(ipackage) do :
      resolve-exp(e, eng)
  fatal("Done for now")

;============================================================
;===================== Defresolver ==========================
;============================================================

#use-added-syntax(stz-resolver-lang)
defresolver resolve-exp (e:IExp, eng:Engine) :

  ;     Resolving Stanza Expressions
  ;     ----------------------------   
  ;Resolve top level expressions
  resolve te :
    IBegin: (exps:te)
    IDefType: {args:+, parent:t, children:te}
    IDefChild: (name:c, {args:+, parent:t})
    IDef: (type:t, value:e)
    IDefVar: (type:t, value:e)
    IDefn: {targs:+, args:+, a1:t, a2:t, body:e}
    IDefmulti: {targs:+, a1:t, a2:t}
    IDefmethod: (multi:m, {targs:+, args:+, a1:t, a2:t, body:e})
    IPublic: (exp:te)
    IProtected: (exp:te)
    IAnnotate: (body:te)
    + ltc
    + e

  ;Resolve Stanza expressions
  resolve e :
    Let: (def:e, body:e)
    LetRec: (defns:f+, defns:f, body:e)
    ILet: {exp:e}
    IDef: (type:t, value:e, name:+)
    IDefVar: (type:t, value:e, name:+)
    IFn: (a1:t, a2:t, {args:+, body:e})
    IBranch: (types:t, {args:+, body:e})
    INew: (class:pt, methods:dm)
    ICast: (exp:e, type:t)
    IUpCast: (exp:e, type:t)
    ISet: (name:v, value:e)
    IPrim: (op:prim, args:e)
    IDo: (func:farg, args:e)
    IVar: resolve var
    ILiteral: ()
    INone: ()
    IMulti: (_:e)
    IBegin: (_:e)
    IMatch: (_:e)
    ITuple: (_:e)      

  ;Stanza Nested functions
  resolve f :
    IDefn: {targs:+, args:+, a1:t, a2:t, body:e}

  ;Function arguments used in do forms
  resolve farg :
    IOf: (class:e, args:t)
    + e

  ;Nested defmethods in new forms
  resolve dm :
    IDefmethod: (multi:m, {targs:+, args:+, a1:t, a2:t, thisn:this, body:e})

  ;For resolving multis in defmethod forms
  resolve m :
    IVar: resolve multi

  ;For resolving the this argument in nested defmethod forms
  resolve this (Int|False) :
    Int|False: resolve this

  ;For resolving mutable variables in set forms
  resolve v :
    IVar: resolve mutable-var

  ;For resolving HiStanza primitive
  resolve prim :
    IVar: resolve prim

  ;For scanning for nested functions in a letrec form
  define f+ :
    IDefn: (name:+)

  ;For scanning for defined blocks in a labels form
  define blk+ :
    ILSLabeledBlock: (name:+)

  ;     Resolving Types
  ;     ---------------
  ;Resolving a HiStanza type
  resolve t :
    IVar: resolve type
    ICap: (name:cap)
    IOf: (class:c, args:t)
    IExp: (_:t)
     
  ;For resolving class in a A<X> form
  resolve c :
    IVar: resolve class

  ;For resolving the captured type variable
  resolve cap :
    IVar: resolve capvar

  ;     Resolving Parent Types
  ;     ----------------------
  resolve pt :
    IVar: resolve raw-hs-class
    IOf: (class:hclass, args:t)
    IExp: (_:pt)
  resolve hclass :
    IVar: resolve hs-class

  ;     Resolving LoStanza
  ;     ------------------
  ;For resolving top level LoStanza commands
  resolve ltc :
    IBegin: (exps:ltc)
    ILSDef: (exp:le, type:lt)
    ILSDefVar: (exp:le, type:lt)
    ILSDefType: {args:+, parent:pt, types:lt, rtype:lt}
    ILSExtern: (type:lt)
    ILSDefn: {targs:+, a1:lt, a2:lt, args:+, body:lc}
    ILSExternFn: {a1:lt, a2:lt, args:+, body:lc}
    ILSDefmethod: (multi:m, {targs:+, a1:lt, a2:lt, args:+, body:lc})
    + lc

  ;For resolving LoStanza commands
  resolve lc :
    IBegin: (exps:lc)
    ILSSet: (exp:lval, value:le)
    ILSLabels: {blocks:blk+, blocks:lc}
    ILSLabeledBlock: (types:lt, {args:+, body:lc})
    ILSGoto: (name:lbl, args:le)
    ILSReturn: (exp:le)
    ILSLet: {comm:lc}
    ILSIf: (pred:le, {conseq:lc}, {alt:lc})
    ILSMatch: (args:le, branches:lc)
    ILSBranch: (types:lt, {args:+, body:lc})
    ILSDef: (exp:le, type:lt, name:+)
    ILSDefVar: (exp:le, type:lt, name:+)
    ILSDo: (func:lfarg, args:le)
    ILSPrim: (op:lprim, args:le)
    ILSCallC: (_:le)

  ;For resolving a LoStanza expression
  resolve le :
    IVar: resolve var
    ILSAddr: (exp:lval)
    ILSNew: (type:lt, args:le)
    ILSStruct: (type:lt, args:le)
    ILSField: (exp:le)
    ILSDo: (func:lfarg, args:le)
    ILSPrim: (op:lprim, args:le)
    ILSSizeof: (type:lt)
    ILSTagof: (name:lclass)
    ILSAs: (exp:le, type:lt)
    ILSFn: (ref:fn)
    ILiteral: ()
    IExp: (_:le)

  ;For resolving functions in ls-fn forms
  resolve fn :
    IVar: resolve function

  ;For resolving labels in label/goto forms
  resolve lbl :
    IVar: resolve label

  ;For resolving the lvalue expression in a set form
  resolve lval :
    IVar: resolve var
    ILSDeref: (exp:le)
    ILSSlot: (exp:le index:le)
    ILSField: (exp:le)

  ;For resolving the name argument of a prim form
  resolve lprim :
    IVar: resolve ls-prim

  ;For resolving the function argument of a do form
  resolve lfarg :
    ILSOfT: (class:le, args:t)
    + le

  ;For resolving a LoStanza type
  resolve lt :
    IVar: resolve raw-ls-class
    ILSOfT: (class:lclass, args:t)
    ILSRefT: (type:t)
    IExp: (_:lt)
  resolve lclass :
    IVar: resolve ls-class

;============================================================
;===================== Engine ===============================
;============================================================

deftype Engine
defmulti new-definitions (eng:Engine, e:IExp) -> False
defmulti push-scope (eng:Engine) -> False
defmulti pop-scope (eng:Engine) -> False
defmulti resolve (e:IVar, eng:Engine, type:Symbol) -> IExp
defmulti resolve (e:Int|False, eng:Engine, type:Symbol) -> Int|False
defmulti errors (eng:Engine) -> Vector<ResolveError>

defn Engine (symtables:SymbolTables, current-package:Symbol) :
  ;Handling debug printing
  var o:IndentedStream = IndentedStream(current-output-stream(), 0)
  defn indent () : o = IndentedStream(o, 2)
  defn deindent () : o = IndentedStream(o, -2)
  defn iprintln (x) : println(o, x)

  ;Symbol table of current package
  val symtable = symtables[current-package] as SymbolTable

  ;Type predicates
  defn type-pred (f: EType -> True|False) : fn* (e:VEntry) : f(type(e))
  val var? = type-pred({_ is LValE|LVarE|LFnE|ValE|VarE|FnE|MultiE})
  val mvar? = type-pred({_ is LVarE|VarE})
  val fn? = type-pred({_ is LFnE|FnE|MultiE})
  val multi? = type-pred({_ is MultiE})
  val type? = type-pred({_ is TVarE|CapVarE|TypeE|LTypeE})
  val class? = type-pred({_ is TypeE|LTypeE})
  val hs-class? = type-pred({_ is TypeE})
  val ls-class? = type-pred({_ is LTypeE})               
  val tvar? = type-pred({_ is TVarE|CapVarE})
  val capvar? = type-pred({_ is CapVarE})
  val label? = type-pred({_ is LabelE})

  ;Resolve a variable of the given type.
  ;Result can be multiple entries.
  defn resolve-many (e:IVar, pred?:VEntry -> True|False, base?:True|False) -> List<VEntry> :
    val [package-name, local-name] = qualifier(name(e))
    match(package-name) :
      (package-name:Symbol) :        
        if package-name == `\|| :
          resolve-top(local-name)        
        else : 
          match(symtables[package-name]) :
            (t:SymbolTable) : resolve-qualified(t, local-name)
            (_:False) : no-package()
      (package-name:False) :
        resolve-unqualified(local-name)
    where :
      ;Return type-appropriate entries
      defn return (es:Seqable<VEntry>) :
        val es* = filter(pred?, es)
        if empty?(es*) :
          throw(NoResolve(name(e), info(e)))
        else :
          to-list(es*)
        
      ;Qualified with package but could not load package
      defn no-package () :
        throw(NoPackage(name(e), info(e)))

      ;Qualified form: /mysymbol
      defn resolve-top (name:Symbol) :
        return(base(symtable, name))

      ;Qualified form: mypackage/mysymbol
      defn resolve-qualified (table:SymbolTable, name:Symbol) :
        return $ for e in table[name] filter :
          visibility(e) is Public|Protected and
          package(e) == package(table)

      ;Standard unqualified symbol
      defn resolve-unqualified (name:Symbol) :
        if base? : return(base(symtable,name))
        else : return(symtable[name])
  defn resolve-many (e:IVar, pred?:VEntry -> True|False) -> List<VEntry> :
    resolve-many(e, pred?, false)

  ;Resolve a variable of the given type.
  ;Result must be a single unambiguous entry.
  defn resolve-one (e:IVar, pred?:VEntry -> True|False) -> VEntry :
    val es = resolve-many(e, pred?)
    if empty?(tail(es)) : head(es)
    else : throw(AmbResolve(name(e), info(e), es))

  ;Resolve a variable in the immediate scope.
  defn resolve-immediate (e:IVar, pred?:VEntry -> True|False) :
    val es = to-list(filter(type?, immediate(symtable, name(e))))
    if empty?(es) : throw(NoResolve(name(e), info(e)))
    else if one?(es) : head(es)
    else : throw(AmbResolve(name(e), info(e), es))

  ;Accumulate errors
  val errors = Vector<ResolveError>()
  defn catch-error<?T> (f:() -> ?T, default:?T) :
    try :
      f()
    catch (ex:ResolveError) :
      iprintln("ERROR: %_" % [ex])
      add(errors, ex)
      default

  new Engine :
    defmethod errors (this) :
      errors
    defmethod new-definitions (this, e:IExp) :        
      iprintln("new-definitions(%_)" % [e])
      let loop (e:IExp = e) :
        match(e:VarN) : define(symtable, n(e))
        else : do(loop, e)
    defmethod push-scope (this) :
      iprintln("push-scope")
      push-scope(symtable)
      indent()      
    defmethod pop-scope (this) :
      deindent()      
      iprintln("pop-scope")
      pop-scope(symtable)
    defmethod resolve (e:IVar, this, type:Symbol) :
      iprintln("resolve(%_, %_)" % [e, type])

      ;Return a list of entries
      defn return (es:List<VEntry>) :
        if one?(es) : return(head(es))
        else : Mix(map(return,es), info(e))
      defn return (ventry:VEntry) :
        iprintln("return %_" % [ventry])
        VarN(n(ventry), info(e))

      within catch-error(e) :  
        switch(type) :
          `var :
            val vs = resolve-many(e,var?)
            if one?(vs) : return(head(vs))
            else if all?(fn?, vs) : return(vs)
            else : throw(AmbResolve(name(e), info(e), vs))
          `mutable-var :
            val v = resolve-one(e,var?)
            if not mvar?(v) : throw(NotMutable(name(e), info(e), v))
            else : return(v)
          `multi :
            return(resolve-many(e,multi?,true))
          `function :
            val vs = resolve-many(e,var?)
            if one?(vs) :
              val v = head(vs)
              if fn?(v) : return(v)
              else : throw(NotFn(name(e),info(e),v))
            else if all?(fn?, vs) : return(vs)
            else : throw(AmbResolve(name(e), info(e), vs))
          `type :
            val v = resolve-one(e,type?)
            if class?(v) : Raw(return(v), info(e))
            else : return(v)
          `class :
            val v = resolve-one(e,type?)
            if class?(v) : return(v)
            else : throw(NotClass(name(e),info(e),v))
          `capvar :
            val v = resolve-immediate(e, type?)
            if capvar?(v) : return(v)
            else : throw(NotCapVar(name(e), info(e), v))          
          `raw-hs-class :
            val v = resolve-one(e,type?)
            if hs-class?(v) : Raw(return(v), info(e))
            else : throw(NotHSClass(name(e),info(e),v))
          `hs-class :
            val v = resolve-one(e,type?)
            if hs-class?(v) : return(v)
            else : throw(NotHSClass(name(e),info(e),v))
          `raw-ls-class :
            val v = resolve-one(e,type?)
            if ls-class?(v) : Raw(return(v), info(e))
            else : throw(NotLSClass(name(e),info(e),v))
          `ls-class :
            val v = resolve-one(e,type?)
            if ls-class?(v) : return(v)
            else : throw(NotLSClass(name(e),info(e),v))
          `label :
            return(resolve-one(e,label?))          
          `prim :
            throw(NotPrim(name(e),info(e))) when not primitive?(name(e))            
            e
          `ls-prim :
            throw(NotLSPrim(name(e),info(e))) when not ls-primitive?(name(e))            
            e
    defmethod resolve (e:Int|False, this, type:Symbol) :
      fatal("Illegal argument") when type != `this
      val es = to-list(filter(var?, immediate(symtable, `this)))
      fatal("No this argument found.") when empty?(es)
      fatal("Multiple this arguments found.") when length(es) > 1
      n(head(es))

;============================================================
;=================== Symbol Tables ==========================
;============================================================

deftype SymbolTables
defmulti get (st:SymbolTables, package:Symbol) -> SymbolTable|False

defn SymbolTables (ipackages:Tuple<IPackage>, env:Env) :
  val pkg-table = to-hashtable<Symbol, IPackage> $
    for p in ipackages seq :
      name(p) => p

  ;Load exported records into the environment
  ;Rename them to use fresh ids.
  val exports-table = HashTable<Symbol, Tuple<Export>|False>()
  defn get-env-exports (package:Symbol) -> Tuple<Export>|False :
    if not key?(exports-table, package) :
      exports-table[package] = match(packageio(env, package)) :
        (io:PackageIO) :
          to-tuple $ for e in exports(io) seq? :
            match(visibility(e):Public|Protected) :
              One(sub-n(e, fresh-id()))
            else : None()
        (_:False) : false
    exports-table[package]

  ;Construct symbol tables
  val symtables = to-hashtable<Symbol, SymbolTable> $
    for ipackage in ipackages seq :
      val symtable = SymbolTable(name(ipackage), namemap(ipackage))
      val imports = imports(ipackage) as List<IImport>
      for imp in imports do :
        val package-name = name!(package(imp))
        let :
          if key?(pkg-table, package-name) :
            import-source-package()
          else :
            match(get-env-exports(package-name)) :
              (es:Tuple<Export>) : import-env-package(es)
              (_:False) : false
        where :
          defn import-source-package () :      
            val namemap = namemap(pkg-table[package-name])
            import(symtable, namemap, imp)
          defn import-env-package (es:Tuple<Export>) :
            import(symtable, es, imp)
      name(ipackage) => symtable

  ;Return symbol tables structure
  new SymbolTables :
    defmethod get (this, package:Symbol) :
      get?(symtables, package)

deftype SymbolTable
defmulti package (t:SymbolTable) -> Symbol
defmulti import (t:SymbolTable, namemap:NameMap, importexp:IImport) -> False
defmulti import (t:SymbolTable, exports:Tuple<Export>, importexp:IImport) -> False
defmulti push-scope (t:SymbolTable) -> False
defmulti pop-scope (t:SymbolTable) -> False
defmulti define (t:SymbolTable, n:Int) -> False
defmulti get (t:SymbolTable, name:Symbol) -> List<VEntry>
defmulti base (t:SymbolTable, name:Symbol) -> List<VEntry>
defmulti immediate (t:SymbolTable, name:Symbol) -> List<VEntry>

defn SymbolTable (package-name:Symbol, basemap:NameMap) :
  ;Level Table
  val table = MultilevelTable<Symbol, List<VEntry>>()
  val basetable = HashTable<Symbol, List<VEntry>>(List())
  defn add-entry (e:VEntry, prefix:String|False) :
    val name* = add-prefix(prefix, name(e))
    table[name*] =
      if key?(table, name*) : cons(e, table[name*])
      else : List(e)
    if level(table) == 0 :
      update(basetable, cons{e,_}, name*)
      false
  do(add-entry{_, false}, filter(non-local?, basemap)) where :
    defn non-local? (e:VEntry) : visibility(e) is-not Local

  ;Importing a package
  defn import (namemap:NameMap, importexp:IImport) :
    val ptable = PrefixTable(importexp)
    for e in exported(namemap) do :
      add-entry(e, ptable[name(e)])

  ;Importing from DL
  defn import (exports:Tuple<Export>, importexp:IImport) :
    val ptable = PrefixTable(importexp)
    for e in exports do :
      val rid = id(rec(e))
      val etype = match(rec(e)) :
        (r:ValRec) :
          match(mutable?(r), lostanza?(r)) :
            (m:False, ls:False) : ValE()
            (m:True, ls:False) : VarE()
            (m:False, ls:True) : LValE()
            (m:True, ls:True) : LVarE()
        (r:FnRec) :
          if lostanza?(r) : LFnE()
          else : FnE()
        (r:MultiRec) : MultiE()
        (r:ExternFnRec) : LFnE()
        (r:ExternRec) :
          match(type(r)) :
            (t:DFnT) : LFnE()
            (t) : LVarE()
        (r:StructRec) : LTypeE()
        (r:TypeRec) : TypeE()
      val ventry = VEntry(n(e), package(rid), name(rid), visibility(e), etype, false)
      add-entry(ventry, ptable[name(rid)])

  ;Return bindings structure
  new SymbolTable :
    defmethod package (this) :
      package-name
    defmethod import (this, namemap:NameMap, importexp:IImport) :
      import(namemap, importexp)
    defmethod import (this, exports:Tuple<Export>, importexp:IImport) :
      import(exports, importexp)
    defmethod push-scope (this) :
      push-level(table)
    defmethod pop-scope (this) :
      pop-level(table)
    defmethod define (this, n:Int) :
      add-entry(basemap[n], false)
    defmethod get (this, name:Symbol) :
      if key?(table,name,true) : table[name,true]
      else : List()
    defmethod base (this, name:Symbol) :
      get?(basetable, name, List())
    defmethod immediate (this, name:Symbol) :
      if key?(table,name,false) : table[name,false]
      else : List()
    defmethod print (o:OutputStream, this) :
      val o2 = IndentedStream(o)
      val o3 = IndentedStream(o, 4)
      print(o, "symbol table for package %~ :" % [package-name])
      for e in basetable do :
        lnprint(o2, "%~ : " % [key(e)])
        lnprints(o3, value(e))      

;============================================================
;==================== Prefixes ==============================
;============================================================

deftype PrefixTable
defmulti get (t:PrefixTable, name:Symbol) -> String|False

defn PrefixTable (import:IImport) :
  var all-prefix:String|False = false
  val table = HashTable<Symbol,String>()
  val es = prefix(import) as Seqable<IPrefix>
  for e in es do :
    val prefix = to-string(name!(prefix(e)))
    match(names(e)) :
      (names:False) : all-prefix = prefix
      (names:List<IExp>) : do({table[name!(_)] = prefix}, names)
  new PrefixTable :
    defmethod get (this, name:Symbol) :
      match(get?(table, name)) :
        (s:String) : s
        (s:False) : all-prefix
        
defn add-prefix (prefix:String|False, x:Symbol) :
  match(prefix:String) :
    val name* = append(prefix,name(x))
    match(x) :
      (x:StringSymbol) : to-symbol(name*)
      (x:GenSymbol) : gensym(name*)
  else :
    x

;<comment>
;============================================================
;============== ScopeBucket Datastructure ===================
;============================================================
;Represents the environment for a single package

deftype Bucket
defmulti add (b:Bucket, n:Int, x:Symbol, scope:Int) -> False
defmulti get (b:Bucket, x:Symbol, scope:Int) -> List<Int>

defn Bucket () :
  val table = HashTable<[Symbol,Int], List<Int>>()
  new Bucket :
    defmethod add (this, n:Int, x:Symbol, scope:Int) :
      table[[x,scope]] = cons(n, this[x,scope])
    defmethod get (this, x:Symbol, scope:Int) :
      get?(table, [x,scope], List())

deftype ScopeBucket
defmulti add (s:ScopeBucket, x:Symbol, i:Int) -> False
defmulti begin-scope (s:ScopeBucket) -> False
defmulti end-scope (s:ScopeBucket) -> False
defmulti get (s:ScopeBucket, x:Symbol, filter:Int -> True|False) -> List<Int>
defmulti get-local (s:ScopeBucket, x:Symbol, filter:Int -> True|False) -> List<Int>
defmulti get-top (s:ScopeBucket, x:Symbol, filter:Int -> True|False) -> List<Int>
defmulti get-all-top (s:ScopeBucket) -> List<Int>

defn ScopeBucket () :
  val bucket = Bucket()
  val scopes = Vector<Int>()
  val scope-counter = to-seq(1 to false)
  var top-defs:List<Int> = List()
  add(scopes, next(scope-counter))

  new ScopeBucket :
    defmethod add (this, x:Symbol, n:Int) :
      val s = peek(scopes)         
      add(bucket, n, x, s)
      if s == scopes[0] :
        top-defs = cons(n, top-defs)
    defmethod begin-scope (this) :
      add(scopes, next(scope-counter))
    defmethod end-scope (this) :
      pop(scopes)
      false
    defmethod get (this, x:Symbol, f:Int -> True|False) :
      label<List<Int>> return :
        for s in in-reverse(scopes) do :
          val es = filter(f, bucket[x, s])
          return(to-list(es)) when not empty?(es)
        List()   
    defmethod get-local (this, x:Symbol, f:Int -> True|False) :
      to-list(filter(f, bucket[x, peek(scopes)]))
    defmethod get-top (this, x:Symbol, f:Int -> True|False) :
      to-list(filter(f, bucket[x, scopes[0]]))
    defmethod get-all-top (this) :
      top-defs

;============================================================
;================= Prefixer Datastructure ===================
;============================================================
;Creates the prefix environment given a set of Prefix statements

deftype Prefixer
defmulti set-all-prefix (p:Prefixer, prefix:Symbol) -> False
defmulti set-prefix (p:Prefixer, xs:List<Symbol>, prefix:Symbol) -> False
defmulti prefix (p:Prefixer, x:Symbol) -> Symbol

defn Prefixer () :
  var all-prefix:String|False = false
  val prefix-table = HashTable<Symbol,String>()

  new Prefixer :
    defmethod set-all-prefix (this, prefix:Symbol) :
      all-prefix = to-string(prefix)
      clear(prefix-table)
    defmethod set-prefix (this, xs:List<Symbol>, prefix:Symbol) :
      for x in xs do :
        prefix-table[x] = to-string(prefix)
    defmethod prefix (this, x:Symbol) :
      if key?(prefix-table, x) :
        symbol-join([prefix-table[x], x])
      else if all-prefix is-not False :
        symbol-join([all-prefix, x])
      else :
        x

defn Prefixer (ps:List<IPrefix>) :
  defn prefix! (p:IPrefix) : name(prefix(p) as IVar)
  val prefixer = Prefixer()
  for p in ps do :
    match(names(p)) :
      (ns:False) : set-all-prefix(prefixer, prefix!(p))
      (ns:List<IVar>) : set-prefix(prefixer, map(name, ns), prefix!(p))
  prefixer

;============================================================
;=============== Environment Datastructure ==================
;============================================================

;======================================
;==== PackageEntries Datastructure ====
;======================================
defstruct PackageEntries :
  exp: LetPackage|ILoadPackage
  public-entries: ScopeBucket
  protected-entries: ScopeBucket
  private-entries: ScopeBucket

defn attach-exp (es:PackageEntries, e:LetPackage|ILoadPackage) :
  PackageEntries(e, public-entries(es), protected-entries(es), private-entries(es))

;===============================
;==== Environment Interface ====
;===============================
deftype Environment
defmulti public-scope (e:Environment, name:Symbol) -> ScopeBucket
defmulti protected-scope (e:Environment, name:Symbol) -> ScopeBucket
defmulti private-scope (e:Environment, name:Symbol) -> ScopeBucket

defn resolve-with-environment (nm:NameMap,
                               exps:List<LetPackage|ILoadPackage>,
                               f:(Environment,LetPackage) -> LetPackage) ->
                               List<LetPackage|ILoadPackage> :
  ;========================
  ;==== Track Packages ====
  ;========================
  val pkg-table = HashTable<Symbol, PackageEntries>()
  
  defn add-to-pkg-table (e:LetPackage|ILoadPackage) :
    val pkg = name!(e)
    val private-scopes = ScopeBucket()
    val protected-scopes = ScopeBucket()
    val public-scopes = ScopeBucket()
    pkg-table[pkg] = PackageEntries(e, public-scopes, protected-scopes, private-scopes)
    for id in pkg-ids(nm, pkg) do :
      val e = nm[id]
      val [n, name, vis] = [n(e), name(e), visibility(e)]
      add(private-scopes, name, n) when vis is Private|Protected|Public
      add(protected-scopes, name, n) when vis is Protected|Public
      add(public-scopes, name, n) when vis is Public  
  
  defn ensure-loaded (name:Symbol) :
    if not key?(pkg-table, name) :
      fatal("Could not load package %_" % [name])
;      ;Load package
;      val [filename pkg] = find-and-load-package(name)
;      ;Rename and add to package table
;      val renamed = rename(nm, pkg)
;      add-to-pkg-table(ILoadPackage(filename, renamed, false))
;      ;Ensure its dependencies are loaded
;      do(ensure-loaded{package(_)}, imports(ids(renamed)))
;      ;Resolve its ids
;      val resolved = resolve(nm, filename, renamed)
;      pkg-table[name] = attach-exp(
;        pkg-table[name],
;        ILoadPackage(filename, resolved, false))
;
  ;=================
  ;==== Imports ====
  ;=================
  ;Evaluate all imports for a letpackage to compute its private scope
  defn eval-imports (e:LetPackage) :
    val scope = private-entries(pkg-table[name(e)])
    for i in imports(e) as List<IImport> do :
      val import-name = name!(package(i))
      ensure-loaded(import-name)
      val prefixer = Prefixer(prefix(i) as List<IPrefix>)
      for n in get-all-top(public-entries(pkg-table[import-name])) do :
        add(scope, prefix(prefixer, name(nm[n])), n)

  ;=====================
  ;==== Environment ====
  ;=====================
  val environment = new Environment :
    defmethod public-scope (this, name:Symbol) :
      ensure-loaded(name)
      public-entries(pkg-table[name])
    defmethod protected-scope (this, name:Symbol) :
      ensure-loaded(name)
      protected-entries(pkg-table[name])
    defmethod private-scope (this, name:Symbol) :
      ensure-loaded(name)
      private-entries(pkg-table[name])

  ;===================
  ;==== Algorithm ====
  ;===================
  ;Add all packages to table
  do(add-to-pkg-table, exps)

  ;Errors
;  val errors = Vector<?>()
;  defn issue-errors () :
;    throw(PkgFuseErrors(errors)) when not empty?(errors)

  ;Resolve each package
  for entry in to-list(values(pkg-table)) do :
;    try :    
      val e* = match(exp(entry)) :
        (e:LetPackage) :
          eval-imports(e)
          f(environment, e)
;        (e:ILoadPackage) :
;          do(ensure-loaded{package(_)}, imports(ids(pkg(e))))
;          val pkg* = resolve(nm, filename(e), pkg(e))
;          ILoadPackage(filename(e), pkg*, info(e))
      pkg-table[name!(exp(entry))] = attach-exp(entry, e*)
;    catch (e:PkgFuseErrors) :
;      add-all(errors, msgs(e))
  ensure-loaded(`core)
;  issue-errors()
  
  ;Return packages in original order  
  defn new? (e:PackageEntries) :
    none?({name!(_) == name!(exp(e))}, exps)
  to-list $ seq{exp, _} $ cat(
    seq({pkg-table[name!(_)]}, exps)
    filter(new?, values(pkg-table)))

;============================================================
;=============== Ordering Engine ============================
;============================================================

defn order-packages (es:List<LetPackage|ILoadPackage>, input:List<Symbol>) :
  ;Retrieve imports for a package
  defn pkg-imports (e:LetPackage|ILoadPackage) :
    match(e) :
      (e:LetPackage) : map(name!{package(_ as IImport)}, imports(e))
;      (e:ILoadPackage) : map(package, imports(ids(pkg(e))))

  ;Create natural ordering
  val natural = HashTable<Symbol,Int>()
  val counter = to-seq(0 to false)
  for k in cat(input, seq(name!,es)) do :
    (natural[k] = next(counter)) when not key?(natural,k)

  ;Create graph
  val graph = to-hashtable<Symbol,List<Symbol>> $
    for e in es seq :
      name!(e) => pkg-imports(e)
    
  ;Create component table
  val components = Vector<List<Symbol>>()
  val component-table = HashTable<Symbol,Int>()
  for c in strong-components(graph) do :
    match(c) :
      (c:Symbol) :
        component-table[c] = length(components)
        add(components, List(c))
      (cs:List<Symbol>) :
        do({component-table[_] = length(components)}, cs)
        val cs* = to-list(lazy-qsort({natural[_]}, cs))
        add(components, cs*)

  ;Visit depth first
  val visited = IntSet()
  val ordered = Vector<Symbol>()
  defn visit-component (c:Int) :
    if not visited[c] :
      add(visited, c)      
      do(visit-symbols{graph[_]}, components[c])
      add-all(ordered, components[c])
  defn visit-symbols (ss:List<Symbol>) :
    do(visit-component{component-table[_]}, ss)

  ;Visits
  visit-symbols(input)

  ;Convert to packages
  val pkg-table =
    to-hashtable<Symbol,LetPackage|ILoadPackage> $
      for e in es seq :
        name!(e) => e
  to-list(seq({pkg-table[_]}, ordered))

;============================================================
;=============== Resolution Engine ==========================
;============================================================

deftype Engine
defmulti new-definitions (eng:Engine, e:IExp) -> False
defmulti push-scope (eng:Engine) -> False
defmulti pop-scope (eng:Engine) -> False
defmulti resolve (e, eng:Engine, type:Symbol) -> ?

;Messages
val NO-RESOLVE = "%_Could not resolve %_."
val DEFINED-IN = "\n   %_%_ defined in package %_."
val AMB-REF = "%_Ambiguous reference to %_. Possibilities include:%*"
val BAD-SET = "%_Cannot assign to immutable value %_."
val BAD-CAP = "%_Cannot capture explicit type argument %_."
val NO-PACKAGE = "%_No package found with name %_."
val NOT-HS-CLASS = "%_Expected a HiStanza type here but received %_."
val NOT-LS-CLASS = "%_Expected a LoStanza type here but received %_."
val NOT-FN = "%_Expected a function here but received %_."
val NOT-LS-PRIM = "%_%_ is not a recognized LoStanza primitive."
val NOT-PRIM = "%_%_ is not a recognized Stanza primitive."
val NOT-OPTIMIZED = "Inappropriate pkg file: %_ was originally compiled in unoptimized mode."
val NOT-UNOPTIMIZED = "Inappropriate pkg file: %_ was originally compiled in optimized mode."
val WRONG-VERSION = "Inappropriate pkg file: %_ was originally compiled in Stanza version %_. Current compiler version is %_."
val WRONG-PLATFORM = "Inappropriate pkg file: %_ was originally compiled for %_ platform. Desired output platform is %_."

defn info-string (i:False|FileInfo) :
  match(i) :
    (i:False) : ""
    (i:FileInfo) : "%_: " % [i]

public defn resolve (nm:NameMap, exps:List<LetPackage|ILoadPackage>) -> List<LetPackage|ILoadPackage> :
  ;Error System
  val errors = Vector<?>()
  defn resolve-error (msg) :
    add(errors, msg)
    throw(new NotResolved)
  defn no-resolve (v:IVar) :
    resolve-error(NO-RESOLVE % [info-string(info(v)), name(v)])
  defn amb-resolve (v:IVar, ns:List<Int>) :
    val others = for n in ns seq :
      val e = nm[n]
      DEFINED-IN % [info-string(info(e)), name(e), package(e)]
    resolve-error(AMB-REF % [info-string(info(v)), name(v), others])
  defn not-mutable (v:IVar) :
    resolve-error(BAD-SET % [info-string(info(v)), name(v)])
  defn not-cap (v:IVar) :
    resolve-error(BAD-CAP % [info-string(info(v)), name(v)])
  defn no-package (info:False|FileInfo, name:Symbol) :
    resolve-error(NO-PACKAGE % [info-string(info), name])
  defn not-hs-class (v:IVar) :
    resolve-error(NOT-HS-CLASS % [info-string(info(v)), name(v)])
  defn not-ls-class (v:IVar) :
    resolve-error(NOT-LS-CLASS % [info-string(info(v)), name(v)])
  defn not-fn (v:IVar) :
    resolve-error(NOT-FN % [info-string(info(v)), name(v)])
  defn not-ls-prim (v:IVar) :
    resolve-error(NOT-LS-PRIM % [info-string(info(v)), name(v)])
  defn not-prim (v:IVar) :
    resolve-error(NOT-PRIM % [info-string(info(v)), name(v)])

  ;Namespace Utilities
  defn type-pred (f: EType -> True|False) -> Int -> True|False :
    fn (i:Int) :
      f(type(nm[i]))
  defn get-name (e:VarN) :
    name(nm[n(e)])

  ;Resolve a given package
  defn resolve (environment:Environment, p:LetPackage) -> LetPackage :
    ;Retrieve package scope
    val scope = private-scope(environment, name(p))

    ;Retrieve the scope indicated by the given package name
    val imported-packages = HashSet<Symbol>()
    defn get-qualified-scope (name:Symbol) -> ScopeBucket :
      if name == `\|| :
        scope
      else :        
        add(imported-packages, name)
        protected-scope(environment, name)

    ;Resolve a given identifier
    defn resolve-name (name:Symbol, pass?: Int -> True|False) :
      val [package, local-name] = qualifier(name)
      match(package) :
        ;Package qualified identifiers access the top level protected scope.
        (package:Symbol) :
          val scope = get-qualified-scope(package)
          get-top(scope, local-name, pass?)
        ;Otherwise look in current scope
        (package:False) :
          scope[name, pass?]

    ;Resolve an identifier to a single item
    defn resolve-one (e:IVar, pass?: Int -> True|False) :
      val ns = resolve-name(name(e), pass?)
      val l = length(ns)
      if l == 0 : no-resolve(e)
      else if l == 1 : head(ns)
      else : amb-resolve(e, ns)

    ;Resolve an identifier to multiple items
    defn resolve-many (e:IVar, pass?: Int -> True|False) :
      val ns = resolve-name(name(e), pass?)            
      val l = length(ns)
      if l == 0 : no-resolve(e)
      else if l == 1 : head(ns)
      else : ns

    ;Resolve the body of the package
    val body* = resolve-exp{body(p), _} $ new Engine :
      defmethod new-definitions (this, e:IExp) :
        match(e) :
          (e:VarN) : add(scope, get-name(e), n(e))
          (e) : do(new-definitions{this, _}, e)

      defmethod push-scope (this) :
        begin-scope(scope)

      defmethod pop-scope (this) :
        end-scope(scope)

      defmethod resolve (e, this, type:Symbol) :
        val var? = type-pred({_ is LValE|LVarE|LFnE|ValE|VarE|FnE|MultiE})
        val mvar? = type-pred({_ is LVarE|VarE})
        val fn? = type-pred({_ is LFnE|FnE|MultiE})
        val multi? = type-pred({_ is MultiE})
        val type? = type-pred({_ is TVarE|CapVarE|TypeE|LTypeE})
        val class? = type-pred({_ is TypeE|LTypeE})
        val hs-class? = type-pred({_ is TypeE})
        val ls-class? = type-pred({_ is LTypeE})               
        val tvar? = type-pred({_ is TVarE|CapVarE})
        val capvar? = type-pred({_ is CapVarE})
        val label? = type-pred({_ is LabelE})

        try :
          switch {type == _} :
            `var :
              match(resolve-many(e, var?)) :
                (n:Int) :
                  VarN(n, info(e))
                (ns:List<Int>) :
                  if all?(fn?, ns) : Mix(map(VarN{_, info(e)}, ns), info(e))
                  else : amb-resolve(e, ns)
            `mutable-var :
              val n = resolve-one(e, var?)
              not-mutable(e) when not mvar?(n)
              VarN(n, info(e))                        
            `multi :
              match(resolve-many(e, multi?)) :
                (n:Int) : VarN(n, info(e))
                (ns:List<Int>) : Mix(map(VarN{_, info(e)}, ns), info(e))
            `this :
              head(scope[`this, var?])
            `type :
              val n = resolve-one(e, type?)
              if class?(n) : Raw(VarN(n, info(e)), info(e))
              else : VarN(n, info(e))                        
            `capvar :
              val ns = get-local(scope, name(e), tvar?)
              if empty?(ns) : no-resolve(e)
              else if capvar?(head(ns)) : VarN(head(ns), info(e))
              else : not-cap(e)
            `class :
              val n = resolve-one(e, class?)
              VarN(n, info(e))
            `raw-hs-class :
              val n = resolve-one(e, type?)
              if hs-class?(n) : Raw(VarN(n, info(e)), info(e))
              else : not-hs-class(e)
            `hs-class :
              val n = resolve-one(e, type?)
              if hs-class?(n) : VarN(n, info(e))
              else : not-hs-class(e)
            `raw-ls-class :
              val n = resolve-one(e, type?)
              if ls-class?(n) : Raw(VarN(n, info(e)), info(e))
              else : not-ls-class(e)
            `ls-class :
              val n = resolve-one(e, type?)
              if ls-class?(n) : VarN(n, info(e))
              else : not-ls-class(e)
            `label :
              val n = resolve-one(e, label?)
              VarN(n, info(e))
            `function :
              match(resolve-many(e, var?)) :
                (n:Int) :
                  if fn?(n) : VarN(n, info(e))
                  else : not-fn(e)
                (ns:List<Int>) :
                  if all?(fn?, ns) : Mix(map(VarN{_, info(e)}, ns), info(e))
                  else : amb-resolve(e, ns)
            `ls-prim :
              if ls-primitive?(name(e)) : e
              else : not-ls-prim(e)
            `prim :
              if primitive?(name(e)) : e
              else : not-prim(e)
            else :
              fatal("Unknown resolver %~" % [type])
        catch (err:NotResolved) :
          e
             
    ;Compute all imported packages
    val imports* = let :
      for i in imports(p) as List<IImport> do :
        add(imported-packages, name!(package(i)))
      to-list $ for p in imported-packages seq :
        IImport(IVar(p, false), List(), false)

    ;Return new package with resolved body
    LetPackage(name(p), imports*, body*, info(p))

;  defn verify-pkg-files (exps:List<LetPackage|ILoadPackage>) :
;    ;Verify appropriate packages
;    for exp in filter-by<ILoadPackage>(exps) do :
;      ;Verify that optimization setting is the same
;      match(flag-defined?(`OPTIMIZE), pkg(exp)) :
;        (flag:True, pkg:TGPackage) :
;          add(errors, NOT-OPTIMIZED % [filename(exp)])
;        (flag:False, pkg:KPackage) :
;          add(errors, NOT-UNOPTIMIZED % [filename(exp)])
;        (flag, pkg) : false
;      ;Verify that version is the same
;      val ids = ids(pkg(exp))      
;      defn version-str (xs:Tuple<Int>) : string-join(xs, ".")
;      if version(ids) != STANZA-VERSION :
;        add(errors, WRONG-VERSION % [
;          filename(exp), version-str(version(ids)), version-str(STANZA-VERSION)])
;      ;Verify that platform is the same
;      if platform(ids) != OUTPUT-PLATFORM :
;        add(errors, WRONG-PLATFORM % [
;          filename(exp), platform(ids), OUTPUT-PLATFORM])

  ;Driver
;  try :
  val resolved = resolve-with-environment(nm, exps, resolve)     
  ;verify-pkg-files(resolved)           
  throw(ResolveError(errors)) when not empty?(errors)
  order-packages(resolved, map(name!,exps))
;  catch (e:PkgFuseErrors) :
;    add-all(errors, msgs(e))
;    throw(ResolveError(errors))

;============================================================
;===================== Exceptions ===========================
;============================================================

deftype NotResolved <: Exception

defstruct ResolveError <: Exception :
   msgs: Seqable
defmethod print (o:OutputStream, e:ResolveError) :
   print-all(o, join(msgs(e), "\n"))
;<comment>

;============================================================
;======================= Utilities ==========================
;============================================================

defn one? (xs:List) :
  not empty?(xs) and empty?(tail(xs))

;============================================================
;===================== Exceptions ===========================
;============================================================

deftype ResolveError <: Exception
defstruct NoResolve <: ResolveError :
  name:Symbol
  info:FileInfo|False
with:
  printer => true
defstruct NoPackage <: ResolveError :
  name:Symbol
  info:FileInfo|False
with:
  printer => true
defstruct AmbResolve <: ResolveError :
  name:Symbol
  info:FileInfo|False
  entries:List<VEntry>
with:
  printer => true
defstruct NotMutable <: ResolveError :
  name:Symbol
  info:FileInfo|False
  entry:VEntry
with:
  printer => true
defstruct NotFn <: ResolveError :
  name:Symbol
  info:FileInfo|False
  entry:VEntry
with:
  printer => true
defstruct NotClass <: ResolveError :
  name:Symbol
  info:FileInfo|False
  entry:VEntry
with:
  printer => true
defstruct NotHSClass <: ResolveError :
  name:Symbol
  info:FileInfo|False
  entry:VEntry
with:
  printer => true
defstruct NotLSClass <: ResolveError :
  name:Symbol
  info:FileInfo|False
  entry:VEntry
with:
  printer => true
defstruct NotPrim <: ResolveError :
  name:Symbol
  info:FileInfo|False
with:
  printer => true
defstruct NotLSPrim <: ResolveError :
  name:Symbol
  info:FileInfo|False
with:
  printer => true
defstruct NotCapVar <: ResolveError :
  name:Symbol
  info:FileInfo|False
  entry:VEntry
with:
  printer => true

defstruct ResolveErrors <: Exception :
   msgs: Seqable
defmethod print (o:OutputStream, e:ResolveErrors) :
   print-all(o, join(msgs(e), "\n"))
