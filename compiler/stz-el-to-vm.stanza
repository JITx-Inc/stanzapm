defpackage stz/el-to-vm :
  import core
  import collections
  import stz/el-ir with :
    prefix(IntAddOp, IntSubOp, IntMulOp, IntDivOp, IntModOp, IntAndOp, IntOrOp,
           IntXorOp, IntNotOp, IntShlOp, IntShrOp, IntAshrOp, IntLtOp, IntGtOp,
           IntLeOp, IntGeOp, IntNegOp, RefEqOp, RefNeOp, AddOp, SubOp, MulOp,
           DivOp, ModOp, AndOp, OrOp, XorOp, NotOp, ShlOp, ShrOp, AshrOp, EqOp,
           NeOp, LtOp, GtOp, LeOp, GeOp, UleOp, UltOp, UgtOp, UgeOp, NegOp,
           InstanceofOp, TagOp, DetagOp, ConvOp, InterpretOp, DerefOp,
           CurrentStackOp, GlobalsOp, ConstsOp, ConstsDataOp) => E
  import stz/el
  import stz/dl-ir  
  import stz/vm-ir
  import stz/vm-analyze
  import stz/algorithms

;============================================================
;======================== Driver ============================
;============================================================

public defn compile (epackage:EPackage, io:PackageIO) :
  val iotable = IOTable(io)
  val progbuffer = ProgBuffer()
  val global-table = GlobalTable(io, epackage)
  val init-compiler = Compiler(global-table, iotable, progbuffer)
  take-ids(cat(used-ids(io), used-ids(epackage)))
  val dtable = analyze-dependencies(epackage, global-table, io)
  for e in exps(epackage) do :
    println("Compiling %_" % [e])
    match(e) :
      (e:EDefn) : compile(e, global-table, iotable, progbuffer)
      (e:EDefClosure) : compile(e, dtable, global-table, iotable, progbuffer)
      (e:EDefGlobal) : compile(e, global-table, progbuffer)
      (e:EDefStruct) : compile(e, global-table, progbuffer)
      (e:EInit) : compile(init-compiler, e)
      (e:EExtern) : compile(e, progbuffer)
      (e:EDefType) : compile(e, progbuffer)
      (e:EDefObject) : compile(e, dtable, global-table, progbuffer)
      (e:EDefTypeObject) : compile(e, global-table, iotable, progbuffer)
      (e:EDefmulti) : compile(e, global-table, iotable, progbuffer)
      (e:EDefmethod) : compile(e, global-table, iotable, progbuffer)
  val init = compile-init(init-compiler, progbuffer)
  analyze(to-vmpackage(progbuffer, io, init))

;============================================================
;====================== Unique IDs ==========================
;============================================================

val TAKEN-IDS = IntSet()
var ID-COUNTER:Seq<Int> = to-seq(0 to false)

defn take-ids (ids:Seqable<Int>) :
  clear(TAKEN-IDS)
  add-all(TAKEN-IDS, ids)
  ID-COUNTER = to-seq(0 to false)

defn used-ids (io:PackageIO) :
  seq(n, cat(imports(io), exports(io)))
defn used-ids (e:EPackage) :
  for e in exps(e) seq? :
    match(e) :
      (e:EDefGlobal) : One(n(e))
      (e:EDefn) : One(n(e))
      (e:EDefClosure) : One(n(e))
      (e:EDefmulti) : One(n(e))
      (e:EDefmethod) : One(n(e))
      (e:EDefStruct) : One(n(e))
      (e:EExternFn) : One(n(e))
      (e:EExtern) : One(n(e))
      (e:EInit) : None()
      (e:EDefType) : One(n(e))
      (e:EDefObject) : One(n(e))
      (e:EDefTypeObject) : One(n(e))

defn uniqueid () -> Int :
  for i in ID-COUNTER find! :
    not TAKEN-IDS[i]

;============================================================
;================= Dependency Analysis ======================
;============================================================

defn analyze-dependencies (ep:EPackage, gt:GlobalTable, io:PackageIO) :
  ;Returns all dependencies in ELItem
  defn scan (e:ELItem, initial-set:Seqable<Int>) :
    val dependencies = to-intset(initial-set)
    let loop (e:ELItem = e) :    
      do(loop, e)
      match(e) :
        ;Types
        (e:EStructT) : add(dependencies, n(e))
        (e:EOf) : add(dependencies, n(e))
        ;Immediates and Locations
        (e:EVar|EVarLoc) : add(dependencies, n(e)) when global?(gt,n(e))
        (e:ETagof) : add(dependencies, n(e))
        ;Instructions
        (e:EField) : add(dependencies, n(e))
        (e:ENew) : add(dependencies, n(e))
        (e:EObject) : add(dependencies, n(e))
        (e:EArray) : add(dependencies, n(e))
        (e:EStruct) : add(dependencies, n(e))
        (e:ENewObject) : add(dependencies, n(e))
        (e:EObjectGet) : add(dependencies, n(e))
        (e:EObjectTGet) : add(dependencies, n(e))
        (e:EClosureGet) : add(dependencies, n(e))
        (e:EClosureTGet) : add(dependencies, n(e))
        (e:EClosure) : add(dependencies, n(e))
        (e:ETypeObject) : add(dependencies, n(e))
        ;Remaining
        (e) : false
    to-tuple(dependencies)
    
  defn scan (e:ELItem) :
    scan(e, IntSet())    

  ;Compute dependency graph
  val dtable = IntTable<Tuple<Int>>()
  for e in exps(ep) do :
    match(e) :
      (e:EDefGlobal) :
        dtable[n(e)] = scan(e)
      (e:EDefn) :
        dtable[n(e)] = scan(e)
      (e:EDefClosure) :
        dtable[n(e)] = scan(e)
      (e:EDefmulti) :
        dtable[n(e)] = scan(e)
      (e:EDefmethod) :
        dtable[n(e)] = scan(e, [multi(e)])
      (e:EDefStruct) :
        dtable[n(e)] = scan(e)
      (e:EExternFn) :
        dtable[n(e)] = scan(e)
      (e:EExtern) :
        dtable[n(e)] = scan(e)      
      (e:EInit) :
        false
      (e:EDefType) :
        dtable[n(e)] = scan(e, children(e))
      (e:EDefObject) :
        dtable[n(e)] = scan(e, methods(e))
      (e:EDefTypeObject) :
        dtable[n(e)] = scan(e)

  ;Compute function and object dependencies
  val reload-set = to-intset(seq(n,exports(io)))
  val dclosure = bipartite-closure $ 
    for entry in dtable seq? :
      if reload-set[key(entry)] : None()
      else : One(key(entry) => to-list(value(entry)))

  ;Return dependencies
  to-inttable<Tuple<Int>> $
    for entry in dclosure seq :
      key(entry) => to-tuple(value(entry))

;============================================================
;==================== Specific Compilers ====================
;============================================================

defn compile (e:EDefn, global-table:GlobalTable, iotable:IOTable, progbuffer:ProgBuffer) :
  add(progbuffer, compile-efunction(n(e), false, func(e), global-table, iotable, progbuffer))

defn compile (e:EDefClosure, dtable:IntTable<Tuple<Int>>,
              global-table:GlobalTable, iotable:IOTable, progbuffer:ProgBuffer) :
  val f = compile-efunction(n(e), closure(e), func(e), global-table, iotable, progbuffer)
  add(progbuffer, sub-dependencies(f, dtable[n(e)]))

defn compile (e:EDefGlobal, global-table:GlobalTable, progbuffer:ProgBuffer) :
  val size = size(global-table, type(e))
  val offsets = offsets(global-table, type(e))
  val vmtypes = vmtypes(global-table, type(e))
  val roots = roots(global-table, type(e))
  add(progbuffer, VMGlobal(n(e), size, roots))

defn parent-ids (t:EType|False) :
  val ids = Vector<Int>()
  match(t:EType) :
    let loop (t:EType = t) :
      match(t) :
        (t:EOf) : add(ids, n(t))
        (t:EAnd) : do*(loop, t)
  to-tuple(ids)

defn compile (e:EDefStruct, global-table:GlobalTable, progbuffer:ProgBuffer) :
  val parents = parent-ids(parent(e))
  val base-size = size(global-table, n(e))
  val base-roots = roots(global-table, n(e))
  val class = match(items(e)) :
    ;Object class
    (items:False) :            
      VMLeafClass(n(e), [n(e)], parents, base-size, base-roots)
    ;Array class
    (items:EType) :
      val item-size = size(global-table, items)
      val item-roots = roots(global-table, items)
      VMArrayClass(n(e), [n(e)], parents, base-size, item-size, base-roots, item-roots)
  add(progbuffer, class)

defn compile (compiler:Compiler, e:EInit) :
  val body = body(e)
  for l in localtypes(body) do :
    make-tvar-local(compiler, n(l))
  for l in locals(body) do :
    make-locals(compiler, n(l), type(l))
  compile(compiler, ins(body))
  clear-locals(compiler)

defn compile-init (compiler:Compiler, progbuffer:ProgBuffer) -> Int :
  val id = uniqueid()
  emit(compiler, ReturnIns([NumConst(0)]))
  add(progbuffer, VMFunc(id, [], defs(compiler), ins(compiler)))
  id

defn compile (e:EDefObject, dtable:IntTable<Tuple<Int>>, global-table:GlobalTable, progbuffer:ProgBuffer) :
  val parents = parent-ids(parent(e))
  val nslots = ntargs(e) + nargs(e)
  val base-size = 8 * nslots
  val base-roots = to-tuple(0 to nslots)
  add(progbuffer, VMLeafClass(n(e), dtable[n(e)], parents, base-size, base-roots))

defn compile (e:EDefType, progbuffer:ProgBuffer) :
  val parents = parent-ids(parent(e))
  add(progbuffer, VMAbstractClass(n(e), parents, children(e)))

defn compile (e:EExtern, progbuffer:ProgBuffer) :
  add(progbuffer, VMExtern(n(e), lbl(e)))
  
defn compile (e:EDefTypeObject, global-table:GlobalTable, iotable:IOTable, progbuffer:ProgBuffer) :
  ;Create compiler
  val compiler = Compiler(global-table, iotable, progbuffer)

  ;Argument 0: type object
  ;Argument 1: arity
  ;Argument 2: argument to check  
  val tobj = make-local(compiler, VMRef())
  val arg = make-local(compiler, VMRef())
  ;Make locals for free type variables
  val tvars = for i in 0 to nargs(e) map :
    val tvar = make-tvar-local(compiler, i)
    val offset = 8 + 8 + 8 * i
    emit(compiler, LoadIns(tvar, tobj, offset))
    tvar
  ;Function to check whether argument is a type of type
  return-typeof(compiler, arg, type(e))

  ;Compile to function
  val func = VMFunc(n(e), [tobj, false, arg], defs(compiler), ins(compiler))

  ;Add to top level
  add(progbuffer, func)  

defn compile (e:EDefmulti, global-table:GlobalTable, iotable:IOTable, progbuffer:ProgBuffer) :
  val compiler = Compiler(global-table, iotable, progbuffer)

  ;Generate instructions
  val args = for t in a1(e) map : make-local(compiler, VMRef())
  val arity = NumConst(length(a1(e)))
  method-dispatch(compiler, n(e), [false-obj(iotable), arity], args)

  ;Compile to function
  val func = VMFunc(n(e), to-tuple(cat([false, false], args)), defs(compiler), ins(compiler))

  ;Add to top level
  add(progbuffer, func)

defn compile (e:EDefmethod, global-table:GlobalTable, iotable:IOTable, progbuffer:ProgBuffer) :
  add(progbuffer, compile-efn(n(e), false, func(e), global-table, iotable, progbuffer))
  val types = map(to-typeset, a1(func(e)))
  add(progbuffer, VMMethod(multi(e), types, n(e)))

defn compile-efunction (id:Int, closure:Int|False, f:EFunction,
                        global-table:GlobalTable, iotable:IOTable, progbuffer:ProgBuffer) :
  match(f) :
    (f:EFn) :
      compile-efn(id, closure, f, global-table, iotable, progbuffer)
    (f:EMultifn) :
      val funcs* = for f in funcs(f) map :
        val arity = length(args(f))
        arity => compile-efn(-1, closure, f, global-table, iotable, progbuffer)
      VMMultifn(id, 1, funcs*, wrong-arity-fn(-1,iotable))

defn compile-efn (id:Int, closure:Int|False, f:EFn,
                  global-table:GlobalTable, iotable:IOTable, progbuffer:ProgBuffer) :
  ;Create a new compiler to compile the instructions for the given
  ;function.
  val compiler = Compiler(global-table, iotable, progbuffer)

  ;Make local for closure
  val closure-local = match(closure:Int) :
    make-local(compiler, closure, VMRef())
    
  ;Make locals for arguments
  val targ-locals = for t in targs(f) map :
    make-tvar-local(compiler, t)
  val arg-locals = for (a in args(f), t in a1(f)) map-cat :
    make-locals(compiler, a, t)

  ;Make locals for locals
  for l in localtypes(body(f)) do :
    make-tvar-local(compiler, n(l))
  for l in locals(body(f)) do :
    make-locals(compiler, n(l), type(l))

  ;Compile instructions  
  compile(compiler, ins(body(f)))

  ;Return the compiled function
  val args = to-tuple $ cat-all $ [[closure-local, false], targ-locals, arg-locals]
  VMFunc(id, args, defs(compiler), ins(compiler))

defn wrong-arity-fn (id:Int, iotable:IOTable) :
  val zero = NumConst(0)
  val ins = [
    TCallIns(CodeId(core-fn(iotable,`arity-error)), [false-obj(iotable), zero])]
  VMFunc(id, [], [], ins)

;============================================================
;=================== Prog Buffer ============================
;============================================================

deftype ProgBuffer
defmulti add (b:ProgBuffer, e:VMGlobal) -> False
defmulti add (b:ProgBuffer, e:VMData) -> False
defmulti add (b:ProgBuffer, e:VMConst) -> False
defmulti add (b:ProgBuffer, e:VMClass) -> False
defmulti add (b:ProgBuffer, e:VMFunction) -> False
defmulti add (b:ProgBuffer, e:VMExtern) -> False
defmulti add (b:ProgBuffer, e:VMMethod) -> False
defmulti to-vmpackage (b:ProgBuffer, io:PackageIO, init:Int) -> VMPackage

defn ProgBuffer () :
  val globals = Vector<VMGlobal>()
  val datas = Vector<VMData>()
  val consts = Vector<VMConst>()
  val classes = Vector<VMClass>()
  val funcs = Vector<VMFunction>()
  val externs = Vector<VMExtern>()
  val methods = Vector<VMMethod>()
  new ProgBuffer :
    defmethod add (this, e:VMGlobal) : add(globals, e)
    defmethod add (this, e:VMData) : add(datas, e)
    defmethod add (this, e:VMConst) : add(consts, e)
    defmethod add (this, e:VMClass) : add(classes, e)
    defmethod add (this, e:VMFunction) : add(funcs, e)
    defmethod add (this, e:VMExtern) : add(externs, e)
    defmethod add (this, e:VMMethod) : add(methods, e)
    defmethod to-vmpackage (this, io:PackageIO, init:Int) :      
      VMPackage(io, init,
                to-tuple(globals),
                to-tuple(datas),
                to-tuple(consts),
                to-tuple(classes),
                to-tuple(funcs),
                to-tuple(methods),
                to-tuple(externs))
       
;============================================================
;================= Instruction Compiler =====================
;============================================================

deftype Compiler
defmulti make-local (c:Compiler, t:VMType) -> Local
defmulti make-local (c:Compiler, x:Int, t:VMType) -> Local
defmulti make-locals (c:Compiler, x:Int, t:EType) -> Tuple<Local>
defmulti make-label (c:Compiler) -> Int
defmulti make-tvar-local (c:Compiler, x:Int) -> Local
defmulti clear-locals (c:Compiler) -> False
defmulti compile (c:Compiler, ins:Seqable<EIns>) -> False
defmulti defs (c:Compiler) -> Tuple<VMDef>
defmulti ins (c:Compiler) -> Tuple<VMIns>
defmulti emit (c:Compiler, i:VMIns) -> False
defmulti return-typeof (c:Compiler, x:VMImm, t:EType) -> False
defmulti method-dispatch (c:Compiler, multi:Int, ys:Tuple<VMImm>, zs:Tuple<VMImm>) -> False

defn Compiler (gt:GlobalTable, iotable:IOTable, progbuffer:ProgBuffer) :
  ;Defs
  val defs = Vector<VMDef>()
  defn makedef (t:VMType) :
    val n = length(defs)
    add(defs, VMDef(n, t, 0))
    Local(n)
  defn makedefs (ts:Tuple<VMType>) :
    map(makedef, ts)

  ;Instructions
  val insbuffer = Vector<VMIns>()
  defn emit (c:VMIns) : add(insbuffer, c)
  defn emit (c:VMData|VMConst) : add(progbuffer, c)

  ;Define locals
  val locals-table = IntTable<Tuple<Local>>()
  val tlocals-table = IntTable<Local>()
  defn locals (x:EVarLoc) :
    locals-table[n(x)]
  defn local (x:EVarLoc) :
    val xs = locals(x)
    fatal("Incorrect length") when length(xs) != 1
    xs[0]
  defn local (x:ETVarLoc) :
    tlocals-table[n(x)]
    
  ;Define labels  
  val labels-table = IntTable<Int>()
  val num-labels = to-seq(0 to false)
  defn make-label () :
    next(num-labels)
  defn get-label (n:Int) :
    if not key?(labels-table, n) :
      labels-table[n] = next(num-labels)
    labels-table[n]

  ;Put a compiled value into a compiled location
  defn put (x:EVarLoc, y:CVal) :
    val xs = locals(x)
    match(y) :
      (y:CImm) :
        fatal("Mismatch") when length(xs) != length(imms(y))
        for (x in xs, y in imms(y)) do :
          emit(SetIns(x,y))
      (y:CMem) :
        fatal("Mismatch") when length(xs) != length(offsets(y))
        val a = address(y)
        for (x in xs, o in offsets(y)) do :
          emit(LoadIns(x, a, o))

  ;Retrieve the immediate from a CVal
  defn imms! (x:CVal) :
    match(x) :
      (x:CImm) :
        imms(x)
      (x:CMem) :
        val tmp = makedefs(types(x))
        val a = address(x)
        for (t in tmp, o in offsets(x)) do :
          emit(LoadIns(t, a, o))
        tmp
  defn imm! (x:CVal) :
    val xs = imms!(x)
    fatal("Not unary") when length(xs) != 1
    xs[0]
  defn imms! (x:EImm) : imms!(cval(x))
  defn imm! (x:EImm) : imm!(cval(x))
  defn imms! (x:EType) : [imm!(x)]
  defn imm! (x:EType) : tlocals-table[n(x as ETVar)]

  ;Code generation utilities
  defn CallError (f:Int, args:Tuple<VMImm>) :
    val arity = NumConst(length(args))
    val ys = to-tuple $ cat([false-obj(iotable), arity], args)
    TCallIns(CodeId(f), ys)
  defn CallUtil (x:Local, f:Int, args:Tuple<VMImm>) :
    val arity = NumConst(length(args))
    val ys = to-tuple $ cat([false-obj(iotable), arity], args)
    CallIns([x], CodeId(f), ys)

  ;Compile an immediate to a location
  defn cval (x:EImm) -> CVal :   
    match(x) :
      (x:EVar) :
        match(get?(locals-table, n(x))) :
          (v:Tuple<Local>) :
            CImm(v)
          (_:False) :
            val a = ExternId(n(x)) when extern?(gt,n(x))
               else GlobalId(n(x))
            val t = type(gt,n(x))
            val ts = vmtypes(gt,t)
            val os = offsets(gt,t)
            CMem(a, ts, os)
      (x:ELSLiteral) :
        match(value(x)) :
          (v:String) :
            val did = uniqueid()
            emit(VMData(did, string-bytes(v)))
            CImm([DataId(did)])
          (v:Char|Byte|Int|Long|Float|Double) :
            CImm([NumConst(v)])
      (x:ELiteral) :
        match(value(x)) :
          (v:Char|Byte|Int|Float) :
            val tmp = makedef(VMRef())
            val type = core-type{iotable, _} $ match(v) :
              (v:Char) : `Char
              (v:Byte) : `Byte
              (v:Int) : `Int
              (v:Float) : `Float
            emit(Op1Ins(tmp, TagOp(type), NumConst(v)))
            CImm([tmp])
          (v:True) :
            CImm([true-obj(iotable)])
          (v:False) :
            CImm([false-obj(iotable)])
          (v:List|String|Symbol|Long|Double) :
            val cid = uniqueid()
            emit(VMConst(cid, v))
            CMem(ConstId(cid), [VMRef()], [0])
      (x:ESizeof) :
        val sz = size(gt,type(x))
        CImm([NumConst(to-long(sz))])
      (x:ETagof) :
        CImm([Tag(n(x))])

  ;Compile a location to a CVal
  defn cloc (x:ELoc) -> CLoc :
    match(x) :
      (x:EVarLoc) :
        if key?(locals-table, n(x)) :
          LocalLoc(n(x), 0)
        else :
          val v = ExternId(n(x)) when extern?(gt,n(x))
             else GlobalId(n(x))              
          PtrLoc(CImm([v]), false, 0)
      (x:EDeref) :
        PtrLoc(cval(y(x)), false, 0)
      (x:EDeptr) :
        PtrLoc(cval(y(x)), false, 0)
      (x:EField) :
        match(cloc(loc(x))) :
          (l:LocalLoc) :
            val fi = field-index(gt, n(x), index(x))
            LocalLoc(n(l), index(l) + fi)
          (l:PtrLoc) :
            val fo = field-offset(gt, n(x), index(x))
            PtrLoc(base(l), offset(l), const(l) + fo)
      (x:ESlot) :
        val size = size(gt, type(x))
        val base-loc = cloc(loc(x)) as PtrLoc
        val offset* = match(offset(base-loc)) :
          (o:CVal) :
            if size == 1 :
              val tmp = makedef(VMLong())
              emit(Op2Ins(tmp, AddOp(), imm!(o), imm!(index(x))))
              CImm([tmp])
            else :
              val tmp = makedef(VMLong())
              emit(Op2Ins(tmp, MulOp(), imm!(index(x)), NumConst(size)))
              emit(Op2Ins(tmp, AddOp(), imm!(o), tmp))
              CImm([tmp])
          (_:False) :
            if size == 1 :
              cval(index(x))
            else :
              val tmp = makedef(VMLong())
              emit(Op2Ins(tmp, MulOp(), imm!(index(x)), NumConst(size)))
              CImm([tmp])
        PtrLoc(base(base-loc), offset*, const(base-loc))

  ;If x typeof t return 1 otherwise return 0
  defn return-ctypeof (x:VMImm, t:EType):
    match(t) :
      (t:ETVar) :
        val t* = imm!(t)
        emit(TCallClosureIns(t*, [t*, NumConst(1), x]))
      (t:EOf) :
        val ret = makedef(VMLong())
        emit(Op1Ins(ret, InstanceofOp(SingleType(n(t))), x))
        emit(ReturnIns([ret]))
      (t:EAnd) :
        val pass = make-label()
        val fail = make-label()
        ctypeof(pass, fail, x, a(t))
        emit(LabelIns(pass))
        return-ctypeof(x, b(t))
        emit(LabelIns(fail))
        emit(ReturnIns([LongConst(0)]))        
      (t:EOr) :
        val pass = make-label()
        val fail = make-label()
        ctypeof(pass, fail, x, a(t))
        emit(LabelIns(pass))
        emit(ReturnIns([LongConst(1)]))
        emit(LabelIns(fail))
        return-ctypeof(x, b(t))

  ;If x typeof t goto pass, otherwise goto fail
  defn ctypeof (pass:Int, fail:Int, x:VMImm, t:EType) :
    match(t) :    
      (t:ETVar) :
        val pred = makedef(VMLong())
        val t* = imm!(t)
        emit(CallClosureIns([pred], t*, [t*, NumConst(1), x]))
        emit(Branch1Ins(pass, fail, false, pred))
      (t:EOf) :
        emit(Branch1Ins(pass, fail, InstanceofOp(SingleType(n(t))), x))
      (t:EAnd) :
        val next = make-label()
        ctypeof(next, fail, x, a(t))
        emit(LabelIns(next))
        ctypeof(pass, fail, x, b(t))        
      (t:EOr) :
        val next = make-label()
        ctypeof(pass, next, x, a(t))
        emit(LabelIns(next))
        ctypeof(pass, fail, x, b(t))

  ;Method dispatch
  defn method-dispatch (multi:Int, ys:Tuple<VMImm>, zs:Tuple<VMImm>) :
    val default = make-label()
    val amb = make-label()
    emit(MethodDispatchIns(multi, ys, zs, default, amb))
    emit(LabelIns(default))
    emit(CallError(core-fn(iotable, `no-method-error), []))
    emit(LabelIns(amb))
    emit(CallError(core-fn(iotable, `amb-method-error), []))

  ;Compile instructions
  defn compile (ins:EIns) :
    match(ins) :
      (ins:EDef) :
        match(y(ins)) :
          ;Initialize local to tagged primitive
          (y:ELiteral) :            
            match(value(y)) :
              (v:Char|Byte|Int|Float) :
                val x = local(x(ins))
                val type = core-type{iotable, _} $ match(v) :
                  (v:Char) : `Char
                  (v:Byte) : `Byte
                  (v:Int) : `Int
                  (v:Float) : `Float
                emit(Op1Ins(x, TagOp(type), NumConst(v)))
              (v) :
                put(x(ins), cval(y))
          ;Initialize local to given value
          (y:EImm) :
            put(x(ins), cval(y))
          ;Initialize local to fresh value
          (y:False) :
            for x in locals(x(ins)) do :
              val t = type(defs[index(x)])
              val v = match(t) :
                (t:VMByte) : NumConst(0Y)
                (t:VMInt) : NumConst(0)
                (t:VMLong) : NumConst(0L)
                (t:VMFloat) : NumConst(0.0f)
                (t:VMDouble) : NumConst(0.0)
                (t:VMRef) : VoidMarker()
              emit(SetIns(x, v))
      (ins:EShuffle) :
        fatal("Not yet implemented")
        ;public defstruct EShuffle <: EIns :
        ;  xs: Tuple<EVarLoc>
        ;  ys: Tuple<EImm>
      (ins:ETuple) :
        val len = length(ys(ins))
        val size = NumConst(8 + 8 * len)
        val x = local(x(ins))
        emit(AllocIns([x], [core-type(iotable,`Tuple)], [size]))
        emit(StoreIns(x, 0, LongConst(len)))
        for (y in ys(ins), o in 8 to false by 8) do :
          emit(StoreIns(x, o, imm!(y)))
      (ins:EVoidTuple) :
        val len = LongConst(length(ins))
        emit(CallUtil(local(x(ins)), core-fn(iotable, `void-tuple, [`Int]), [len]))
      (ins:ETupleGet) :
        val x = local(x(ins))
        val o = 8 + 8 * index(ins)
        emit(LoadIns(x, imm!(y(ins)), o))
      (ins:ETupleSet) :
        val y = imm!(y(ins))
        val o = 8 + 8 * index(ins)
        val z = imm!(z(ins))
        emit(StoreIns(y, o, z))
      (ins:ECheckLength) :
        val pass-lbl = make-label()
        val fail-lbl = make-label()
        val len = makedef(VMLong())
        val expected-len = LongConst(length(ins))
        emit(LoadIns(len, imm!(y(ins)), 0))
        emit(Branch2Ins(pass-lbl, fail-lbl, EqOp(), len, expected-len))
        emit(LabelIns(fail-lbl))
        emit(CallError(core-fn(iotable, `tuple-length-error, [`Int, `Int]), [len, expected-len]))
        emit(LabelIns(pass-lbl))
      (ins:EObject) :
        val obj-size = size(gt, n(ins))
        val offsets = offsets(gt, n(ins))
        val x = local(x(ins))
        emit(AllocIns([x], [n(ins)], [NumConst(obj-size)]))
        for (o in offsets, y in ys(ins)) do :
          emit(StoreIns(x, o, imm!(y)))
      (ins:ENewObject) :
        val ntargs = length(targs(ins))
        val nargs = length(ys(ins))
        val nslots = ntargs + nargs
        val x = local(x(ins))
        emit(AllocIns([x], [n(ins)], [NumConst(8 * nslots)]))
        for (a in cat(targs(ins), ys(ins)), o in 0 to false by 8) do :
          emit(StoreIns(x, o, imm!(a)))
      (ins:EArray) :
        ;Struct properties
        val base-size = size(gt,n(ins))
        val item-size = item-size(gt,n(ins))
        ;Evaluate arguments
        val ys = map-cat(imms!, ys(ins))
        val len = ys[0]        
        ;Compute size
        val size = makedef(VMLong())
        if item-size == 1 :
          emit(Op2Ins(size, AddOp(), len, LongConst(base-size + 7)))
          emit(Op2Ins(size, AndOp(), size, LongConst(-8)))
        else :
          emit(Op2Ins(size, MulOp(), len, LongConst(item-size)))
          if item-size % 8 == 0 :
            emit(Op2Ins(size, AddOp(), size, LongConst(base-size)))
          else :
            emit(Op2Ins(size, AddOp(), size, LongConst(base-size + 7)))
            emit(Op2Ins(size, AndOp(), size, LongConst(-8)))            
        ;Allocate array
        val x = local(x(ins))
        emit(AllocIns([x], [n(ins)], [size]))
        for (y in ys, o in base+item-offsets(gt,n(ins))) do :
          emit(StoreIns(x, o, y))          
      (ins:EStruct) :
        val xs = to-seq(locals(x(ins)))
        for y in ys(ins) do :
          match(cval(y)) :
            (y:CImm) :
              for y in imms(y) do :
                emit(SetIns(next(xs), y))
            (y:CMem) :
              val a = address(y)
              for o in offsets(y) do :
                emit(LoadIns(next(xs), a, o))
      (ins:EPtr) :        
        val x = local(x(ins))
        val ptr = cloc(loc(ins)) as PtrLoc
        if base(loc(ins)) is EDeref :
          emit(Op1Ins(x, DerefOp(), imm!(base(ptr))))
          if offset(ptr) is CVal :
            emit(Op2Ins(x, AddOp(), x, imm!(offset(ptr) as CVal)))
          if const(ptr) > 0 :
            emit(Op2Ins(x, AddOp(), x, LongConst(const(ptr))))
        else :
          match(offset(ptr) is CVal, const(ptr) > 0) :
            (r1:True, r2:True) :
              emit(Op2Ins(x, AddOp(), imm!(base(ptr)), imm!(offset(ptr) as CVal)))
              emit(Op2Ins(x, AddOp(), x, LongConst(const(ptr))))
            (r1:True, r2:False) :
              emit(Op2Ins(x, AddOp(), imm!(base(ptr)), imm!(offset(ptr) as CVal)))
            (r1:False, r2:True) :
              emit(Op2Ins(x, AddOp(), imm!(base(ptr)), LongConst(const(ptr))))
            (r1:False, r2:False) :
              put(/x(ins), base(ptr))       
      (ins:ELoad) :     
        match(cloc(loc(ins))) :
          (l:LocalLoc) :
            val ys = locals-table[n(l)]
            val len = length(gt,xtype(ins))
            for (x in locals(x(ins)), i in 0 to len) do :
              emit(SetIns(x, ys[index(l) + i]))
          (l:PtrLoc) :
            val base = imm!(base(l))
            val base-offset = match(offset(l)) :
              (o:CVal) : imm!(o)
              (o:False) : false
            for (x in locals(x(ins)), o in offsets(gt,xtype(ins))) do :
              emit(LoadIns(x, base, base-offset, const(l) + o))
      (ins:EStore) :
        match(cloc(loc(ins)), cval(y(ins))) :
          (l:LocalLoc, y:CImm) :
            val xs = locals-table[n(l)]
            for (y in imms(y), i in 0 to false) do :
              emit(SetIns(xs[index(l) + i], y))
          (l:LocalLoc, y:CMem) :
            val xs = locals-table[n(l)]
            val a = address(y)
            for (o in offsets(y), i in 0 to false) do :
              emit(LoadIns(xs[index(l) + i], a, o))
          (l:PtrLoc, y) :
            val base = imm!(base(l))
            val base-offset = match(offset(l)) :
              (o:CVal) : imm!(o)
              (o:False) : false
            for (o in offsets(gt,ytype(ins)), y in imms!(y)) do :
              emit(StoreIns(base, base-offset, const(l) + o, y))                  
      (ins:ELabel) :
        val lbl = get-label(n(ins))
        emit(LabelIns(lbl))
      (ins:EDo) :        
        ;Retrieve arguments
        val xs = match(x(ins)) :
          (x:EVarLoc) : locals(x)
          (x:False) : []
        ;Call a known function
        defn call-code (n:Int, targs:Tuple<EType>, args:Tuple<EImm>) :
          val args* = cat-all $ [
            [false-obj(iotable), NumConst(length(args))]
            seq-cat(imms!, cat(targs, args))]
          val f = ExternId(n) when extern?(gt,n)
             else CodeId(n)
          emit(CallIns(xs, f, to-tuple(args*)))
        ;Call a closure
        defn call-closure (f:EImm, targs:Tuple<EType>, args:Tuple<EImm>) :
          val f* = imm!(f)
          val args* = cat-all $ [
            [f*, NumConst(length(args))]
            seq-cat(imms!, cat(targs, args))]
          emit(CallClosureIns(xs, f*, to-tuple(args*)))
        ;Call a function pointer
        defn call-pointer (f:EImm, args:Tuple<EImm>) :
          val f* = imm!(f)
          val args* = cat-all $ [
            [false-obj(iotable), NumConst(length(args))]
            seq-cat(imms!, args)]
          emit(CallIns(xs, f*, to-tuple(args*)))
        ;Dispatch
        match(f(ins)) :
          (f:ECurry) :
            call-code(n(x(f)), targs(f), ys(ins))
          (f:EVar) :
            if ptr?(ins) : call-pointer(f, ys(ins))
            else if function?(gt, n(f)) : call-code(n(f), [], ys(ins))
            else : call-closure(f, [], ys(ins))
          (f) :
            if ptr?(ins) : call-pointer(f, ys(ins))
            else : call-closure(f, [], ys(ins))
      (ins:EDoC) :        
        ;Retrieve arguments
        val xs = match(x(ins)) :
          (x:EVarLoc) : locals(x)
          (x:False) : []
        ;Retrieve function
        val f* = match(f(ins)) :
          (f:EVar) :
            if function?(gt,n(f)) :
              if extern?(gt,n(f)) : ExternId(n(f))
              else : CodeId(n(f))
            else : imm!(f)
          (f) : imm!(f)
        ;Emit call
        emit(CallCIns(xs, f*, map-cat(imms!,ys(ins))))
      (ins:EDump) :
        val ys* = to-tuple(filter-by<Local>(seq-cat(imms!,ys(ins))))
        emit(DumpIns(ys*))
      (ins:EInterpret) :
        emit(Op1Ins(local(x(ins)), InterpretOp(), imm!(y(ins))))
      (ins:EConv) :        
        emit(Op1Ins(local(x(ins)), ConvOp(), imm!(y(ins))))
      (ins:EGoto) :
        emit(GotoIns(get-label(n(ins))))
      (ins:EPrim) :        
        val x = local(x(ins))
        val vm-op = to-vm-op(op(ins))
        defn y0 () : imm!(ys(ins)[0])
        defn y1 () : imm!(ys(ins)[1])
        emit $ switch(arity(op(ins))) :
          0 : Op0Ins(x, vm-op)
          1 : Op1Ins(x, vm-op, y0())
          2 : Op2Ins(x, vm-op, y0(), y1())
      (ins:EIf) :        
        val pass-lbl = get-label(n1(ins))
        val fail-lbl = get-label(n2(ins))
        defn y0 () : imm!(ys(ins)[0])
        defn y1 () : imm!(ys(ins)[1])
        emit $ match(op(ins)) :
          (op:EOp) :
            val vm-op = to-vm-op(op)
            switch(arity(op)) :
              1 : Branch1Ins(pass-lbl, fail-lbl, vm-op, y0())
              2 : Branch2Ins(pass-lbl, fail-lbl, vm-op, y0(), y1())
          (op:False) :
            Branch1Ins(pass-lbl, fail-lbl, false, y0())
      (ins:EMatch) :
        val ys* = map(imm!, ys(ins))
        val fail-lbl = make-label()
        val branches* = for b in branches(ins) map :
          VMBranch(map(to-typeset, types(b)), get-label(n(b)))
        emit(MatchIns(ys*, branches*, fail-lbl))
        emit(LabelIns(fail-lbl))
        emit(CallError(core-fn(iotable, `no-branch-error), []))
      (ins:EDispatch) :
        val ys* = map(imm!, ys(ins))
        val fail-lbl = make-label()
        val amb-lbl = make-label()
        val branches* = for b in branches(ins) map :
          VMBranch(map(to-typeset, types(b)), get-label(n(b)))
        emit(DispatchIns(ys*, branches*, fail-lbl, amb-lbl))
        emit(LabelIns(fail-lbl))
        emit(CallError(core-fn(iotable, `no-branch-error), []))
        emit(LabelIns(amb-lbl))
        emit(CallError(core-fn(iotable, `amb-branch-error), []))
      (ins:ECheck) :
        val type = normalize(type(ins))
        if type is-not ETop :
          val y = imm!(y(ins))
          val pass-lbl = make-label()
          val fail-lbl = make-label()
          ctypeof(pass-lbl, fail-lbl, y, type)
          emit(LabelIns(fail-lbl))
          emit(CallError(core-fn(iotable, `cast-error), []))
          emit(LabelIns(pass-lbl))
      (ins:ECheckSet) :
        val y = imm!(y(ins))
        val pass-lbl = make-label()
        val fail-lbl = make-label()
        emit(Branch2Ins(pass-lbl, fail-lbl, RefNeOp(), y, VoidMarker()))
        emit(LabelIns(fail-lbl))
        emit(CallError(core-fn(iotable,`variable-uninitialized-error), []))
        emit(LabelIns(pass-lbl))
      (ins:EBox) :
        val x = local(x(ins))
        val v = match(y(ins)) :
          (y:EImm) : imm!(y)
          (y:False) : VoidMarker()
        emit(AllocIns([x], [core-type(iotable,`Box)], [NumConst(8)]))
        emit(StoreIns(x, 0, v))
      (ins:EBoxGet) :        
        val x = local(x(ins))
        emit(LoadIns(x, imm!(y(ins)), 0))
      (ins:EBoxSet) :
        val y = imm!(y(ins))
        val z = imm!(z(ins))
        emit(StoreIns(y, 0, z))
      (ins:EReturn) :
        emit(ReturnIns(imms!(y(ins))))
      (ins:EObjectGet) :
        val x = local(x(ins))
        val y = imm!(y(ins))
        val slot-index = num-targs(gt,n(ins)) + index(ins)
        emit(LoadIns(x, y, slot-index * 8))
      (ins:EObjectTGet) :
        val x = local(x(ins))
        val y = imm!(y(ins))
        emit(LoadIns(x, y, index(ins) * 8))
      (ins:EClosureGet) :
        val x = local(x(ins))
        val y = imm!(y(ins))
        val slot-index = num-targs(gt,n(ins)) + index(ins)
        emit(LoadIns(x, y, 16 + slot-index * 8))
      (ins:EClosureTGet) :
        val x = local(x(ins))
        val y = imm!(y(ins))
        emit(LoadIns(x, y, 16 + index(ins) * 8))
      (ins:ELetRec) :
        val sizes = for c in ys(ins) map :
          val num-slots = length(targs(c)) + length(ys(c))
          NumConst(8 + 8 + num-slots * 8)
        val xs* = map(local, xs(ins))
        val fn-type = core-type(iotable,`Fn)
        val ts = map({fn-type}, xs(ins))
        emit(AllocIns(xs*, ts, sizes))
        for (x in xs*, c in ys(ins)) do :
          val num-slots = length(targs(c)) + length(ys(c))
          emit(StoreIns(x, 0, NumConst(num-slots)))
          emit(StoreIns(x, 8, CodeId(n(c))))
          for (a in cat(targs(c), ys(c)), o in 16 to false by 8) do :
            emit(StoreIns(x, o, imm!(a)))
      (ins:ETypeObject) :
        val x = local(x(ins))
        val size = NumConst(8 + 8 + 8 * length(targs(ins)))
        emit(AllocIns([x], [core-type(iotable,`Type)], [size]))
        emit(StoreIns(x, 0, NumConst(length(targs(ins)))))
        emit(StoreIns(x, 8, CodeId(n(ins))))
        for (a in targs(ins), o in 16 to false by 8) do :
          emit(StoreIns(x, o, imm!(a)))

  ;Return compiler
  new Compiler :
    ;Emit instruction
    defmethod emit (this, i:VMIns) :
      emit(i)
      
    ;Create locals
    defmethod make-local (this, t:VMType) :
      makedef(t)
    defmethod make-local (this, x:Int, t:VMType) :
      val l = makedef(t)
      locals-table[x] = [l]
      l
    defmethod make-locals (this, x:Int, t:EType) :
      val ls = makedefs(vmtypes(gt,t))
      locals-table[x] = ls
      ls
    defmethod make-tvar-local (this, x:Int) :
      val l = makedef(VMRef())
      tlocals-table[x] = l
      l
      
    ;Clear locals
    defmethod clear-locals (this) :
      clear(locals-table)
      clear(tlocals-table)
      clear(labels-table)
      
    ;Compile instructions
    defmethod compile (this, ins:Seqable<EIns>) :
      do(compile, ins)
    defmethod return-typeof (this, x:VMImm, t:EType) :
      return-ctypeof(x,t)
    defmethod method-dispatch (this, multi:Int, ys:Tuple<VMImm>, zs:Tuple<VMImm>) :
      method-dispatch(multi, ys, zs)

    ;Retrieve results
    defmethod defs (this) : to-tuple(defs)
    defmethod ins (this) : to-tuple(insbuffer)
      
deftype CVal
defstruct CImm <: CVal :
  imms: Tuple<VMImm>
defstruct CMem <: CVal :
  address: VMImm
  types: Tuple<VMType>
  offsets: Tuple<Int>

deftype CLoc
defstruct LocalLoc <: CLoc :
  n: Int
  index: Int
defstruct PtrLoc <: CLoc :
  base: CVal
  offset: CVal|False
  const: Int

defn to-vm-type (t:EType) :
  match(t) :
    (t:EByte) : VMByte()
    (t:EInt) : VMInt()
    (t:ELong) : VMLong()
    (t:EFloat) : VMFloat()
    (t:EDouble) : VMDouble()
    (t:EOf) : VMRef()

defn base (l:ELoc) :
  match(l) :
    (l:EField) : base(loc(l))
    (l:ESlot) : base(loc(l))
    (l) : l

defn arity (op:EOp) -> Int :
  match(op) :
    (op:ECurrentStackOp|EGlobalsOp|EConstsOp|EConstsDataOp) : 0
    (op:EIntNotOp|EIntNegOp|ENotOp|ENegOp) : 1
    (op:EIntAddOp|EIntSubOp|EIntMulOp|EIntDivOp|EIntModOp|EIntAndOp|
        EIntOrOp|EIntXorOp|EIntShlOp|EIntShrOp|EIntAshrOp|EIntLtOp|
        EIntGtOp|EIntLeOp|EIntGeOp|ERefEqOp|ERefNeOp|EAddOp|ESubOp|
        EMulOp|EDivOp|EModOp|EAndOp|EOrOp|EXorOp|EShlOp|EShrOp|EAshrOp|
        EEqOp|ENeOp|ELtOp|EGtOp|ELeOp|EGeOp|EUleOp|EUltOp|EUgtOp|EUgeOp) : 2

defn LongConst (x:Int) :
  NumConst(to-long(x))

defn map-cat<?T,?S> (f:T -> Seqable<?S>, xs:Tuple<?T>) :
  to-tuple(seq-cat(f,xs))
defn map-cat<?T1,?T2,?S> (f:(T1,T2) -> Seqable<?S>, xs:Tuple<?T1>, ys:Seqable<?T2>) :
  to-tuple(seq-cat(f,xs,ys))

defn to-vm-op (op:EOp) :
  match(op) :
    (op:EIntAddOp) : IntAddOp()
    (op:EIntSubOp) : IntSubOp()
    (op:EIntMulOp) : IntMulOp()
    (op:EIntDivOp) : IntDivOp()
    (op:EIntModOp) : IntModOp()
    (op:EIntAndOp) : IntAndOp()
    (op:EIntOrOp) : IntOrOp()
    (op:EIntXorOp) : IntXorOp()
    (op:EIntNotOp) : IntNotOp()
    (op:EIntShlOp) : IntShlOp()
    (op:EIntShrOp) : IntShrOp()
    (op:EIntAshrOp) : IntAshrOp()
    (op:EIntLtOp) : IntLtOp()
    (op:EIntGtOp) : IntGtOp()
    (op:EIntLeOp) : IntLeOp()
    (op:EIntGeOp) : IntGeOp()
    (op:EIntNegOp) : IntNegOp()
    (op:ERefEqOp) : RefEqOp()
    (op:ERefNeOp) : RefNeOp()
    (op:EAddOp) : AddOp()
    (op:ESubOp) : SubOp()
    (op:EMulOp) : MulOp()
    (op:EDivOp) : DivOp()
    (op:EModOp) : ModOp()
    (op:EAndOp) : AndOp()
    (op:EOrOp) : OrOp()
    (op:EXorOp) : XorOp()
    (op:ENotOp) : NotOp()
    (op:EShlOp) : ShlOp()
    (op:EShrOp) : ShrOp()
    (op:EAshrOp) : AshrOp()
    (op:EEqOp) : EqOp()
    (op:ENeOp) : NeOp()
    (op:ELtOp) : LtOp()
    (op:EGtOp) : GtOp()
    (op:ELeOp) : LeOp()
    (op:EGeOp) : GeOp()
    (op:EUleOp) : UleOp()
    (op:EUltOp) : UltOp()
    (op:EUgtOp) : UgtOp()
    (op:EUgeOp) : UgeOp()
    (op:ENegOp) : NegOp()
    (op:ECurrentStackOp) : CurrentStackOp()
    (op:EGlobalsOp) : GlobalsOp()
    (op:EConstsOp) : ConstsOp()
    (op:EConstsDataOp) : ConstsDataOp()

;Convert to typeset
defn to-typeset (t:EType) :
  let loop (t:EType = t) :
    match(t) :
      (t:EOf) : SingleType(n(t))
      (t:ETop) : TopType()
      (t:EAnd) : AndType(map(loop, and-types(t)))
      (t:EOr) : OrType(map(loop, or-types(t)))
defn and-types (t:EAnd) :
  to-tuple $ let loop (t:EType = t) :
    match(t:EAnd) : cat(loop(a(t)), loop(b(t)))
    else : [t]
defn or-types (t:EOr) :
  to-tuple $ let loop (t:EType = t) :
    match(t:EOr) : cat(loop(a(t)), loop(b(t)))
    else : [t]

defn string-bytes (s:String) :
  val n = length(s)
  val a = ByteArray(n + 1)  
  for (c in s, i in 0 to false) do :
    a[i] = to-byte(c)
  a[n] = 0Y
  a

;============================================================
;=================== Special Definitions ====================
;============================================================

defn core-fn (iotable:IOTable, name:Symbol) :
  n(iotable[FnId(`core, name, 0, [])])

defn core-fn (iotable:IOTable, name:Symbol, args:Tuple<Symbol>) :
  val dargs = map(DOf{TypeId(`core, _)}, args)
  n(iotable[FnId(`core, name, 0, dargs)])

defn core-type (iotable:IOTable, name:Symbol) :
  n(iotable[TypeId(`core, name)])

defn false-obj (iotable:IOTable) : Marker(core-type(iotable, `False))
defn true-obj (iotable:IOTable) : Marker(core-type(iotable, `True))

;============================================================
;====================== GlobalTable =========================
;============================================================

deftype GlobalTable
;Retrieve type of global variable
defmulti type (t:GlobalTable, n:Int) -> EType
defmulti function? (t:GlobalTable, n:Int) -> True|False
defmulti extern? (t:GlobalTable, n:Int) -> True|False
defmulti global? (t:GlobalTable, n:Int) -> True|False

;Retrieve struct properties
defmulti offsets (t:GlobalTable, t:EType) -> Tuple<Int>
defmulti size (t:GlobalTable, t:EType) -> Int
defmulti length (t:GlobalTable, t:EType) -> Int
defmulti vmtypes (t:GlobalTable, t:EType) -> Tuple<VMType>
defmulti offsets (t:GlobalTable, n:Int) -> Tuple<Int>
defmulti size (t:GlobalTable, n:Int) -> Int
defmulti length (t:GlobalTable, n:Int) -> Int
defmulti vmtypes (t:GlobalTable, n:Int) -> Tuple<VMType>
defmulti alignment (t:GlobalTable, t:EType) -> Int
defmulti field-index (t:GlobalTable, n:Int, index:Int) -> Int
defmulti field-offset (t:GlobalTable, n:Int, index:Int) -> Int
defmulti item-size (t:GlobalTable, n:Int) -> Int
defmulti base+item-offsets (t:GlobalTable, n:Int) -> Seq<Int>
defmulti num-targs (t:GlobalTable, n:Int) -> Int

deftype GlobalEntry
defstruct VarEntry <: GlobalEntry :
  type: EType
  extern?: True|False
defstruct FnEntry <: GlobalEntry :
  extern?: True|False
defstruct StructEntry <: GlobalEntry :  
  base: Tuple<EType>
  items: False|EType
  offsets: Tuple<Int> with: (default => void)
  size: Int with: (default => void)
  length: Int with: (default => void)
  alignment: Int with: (default => void)
  vmtypes: Tuple<VMType> with: (default => void)
  field-indices: Tuple<Int> with: (default => void)
  field-offsets: Tuple<Int> with: (default => void)
defstruct ClosureEntry <: GlobalEntry :
  ntargs: Int
  nargs: Int
defstruct ObjectEntry <: GlobalEntry :
  ntargs: Int
  nargs: Int

defn GlobalTable (io:PackageIO, epackage:EPackage) :
  ;Conversion to ETypes
  val tt = DTypeTable(io)
  defn to-etype (t:DType) : /to-etype(tt, t, [])
  defn to-etype (t:False) : false

  ;Create global entries
  val table = IntTable<GlobalEntry>()  
  for import in imports(io) do :
    match(rec(import)) :
      (r:FnRec|MultiRec|ExternFnRec) :
        table[n(import)] = FnEntry(r is ExternFnRec)
      (r:ValRec|ExternRec) :
        table[n(import)] = VarEntry(to-etype(type(r)), r is ExternRec)
      (r:StructRec) :
        val base* = map(to-etype, base(r))
        val items* = to-etype(items(r))
        table[n(import)] = StructEntry(base*, items*)
      (r) : false
  for e in exps(epackage) do :
    match(e) :
      (e:EDefn|EDefmulti|EExternFn) :
        table[n(e)] = FnEntry(e is EExternFn)
      (e:EDefGlobal|EExtern) :
        table[n(e)] = VarEntry(type(e), e is EExtern)
      (e:EDefStruct) :
        table[n(e)] = StructEntry(base(e), items(e))
      (e:EDefObject) :
        table[n(e)] = ObjectEntry(ntargs(e), nargs(e))
      (e:EDefClosure) :
        table[n(e)] = ClosureEntry(ntargs(e), nargs(e))
      (e) :
        false

  ;Compute struct properties
  defn compute-struct-properties (this:GlobalTable) :
    ;Compute the properties for struct n and all
    ;dependents of struct n.
    val analyzed = IntSet()
    defn compute-properties (sn:Int) :
      if not analyzed[sn] :
        val e = table[sn] as StructEntry
        val structs = filter-by<EStructT>(cat(base(e), [items(e)]))
        do(compute-properties{n(_)}, structs)
        table[sn] = analyze(e)
        add(analyzed, sn)
      
    ;Analyze the given StructEntry
    ;(assumes that all dependencies have been analyzed)
    defn analyze (e:StructEntry) :
      ;Accumulators
      val offsets-list = Vector<Int>()
      var size-accum:Int = 0
      var length-accum:Int = 0
      var alignment-accum:Int = 1
      val vmtypes-list = Vector<VMType>()
      val field-indices-list = Vector<Int>()
      val field-offsets-list = Vector<Int>()
      
      ;Analyze each base field
      for t in base(e) do :
        ;Retrieve properties of this type
        val os = offsets(this,t)
        val vmts = vmtypes(this,t)
        val aln = alignment(this,t)
        val size = size(this,t)
        val len = length(this,t)

        ;Pad to appropriate alignment (assumes aln is power of 2)
        size-accum = (size-accum + aln - 1) & (- aln)

        ;Update accumulators
        add(field-offsets-list, size-accum)
        add(field-indices-list, len)
        add-all(offsets-list, seq({size-accum + _}, os))
        add-all(vmtypes-list, vmts)
        size-accum = size-accum + size
        length-accum = length-accum + len
        alignment-accum = max(alignment-accum, aln)
        
      ;Pad to appropriate alignment to finish
      match(items(e)) :
        (items:EType) :
          val aln = alignment(this, items)
          size-accum = (size-accum + aln - 1) & (- aln)
        (items:False) :
          size-accum = (size-accum + alignment-accum - 1) & (- alignment-accum)
          
      ;Return analyzed StructEntry
      StructEntry(base(e), items(e),
                  to-tuple(offsets-list),
                  size-accum,
                  length-accum,
                  alignment-accum,                  
                  to-tuple(vmtypes-list),
                  to-tuple(field-indices-list),
                  to-tuple(field-offsets-list))

    ;Driver    
    do(compute-properties, struct-ns) where :
      val structs = filter({value(_) is StructEntry}, table)
      val struct-ns = seq(key, structs)

  ;Create and initialize global table
  val gt = new GlobalTable :
    defmethod global? (this, n:Int) :
      get?(table,n) is VarEntry|FnEntry
    defmethod type (this, n:Int) :
      type(table[n] as VarEntry)
    defmethod function? (this, n:Int) :
      get?(table,n) is FnEntry
    defmethod extern? (this, n:Int) :
      extern?(table[n] as VarEntry|FnEntry)
    defmethod num-targs (this, n:Int) :
      match(table[n]) :
        (e:ClosureEntry) : ntargs(e)
        (e:ObjectEntry) : ntargs(e)
    defmethod vmtypes (this, t:EType) :
      match(t) :
        (t:EStructT) : vmtypes(table[n(t)] as StructEntry)
        (t:EFnT) : fatal("Invalid argument")
        (t:EUnknown) : fatal("Invalid argument")
        (t:EBot) : fatal("Invalid argument")
        (t:EByte) : [VMByte()]
        (t:EInt) : [VMInt()]
        (t:ELong) : [VMLong()]
        (t:EFloat) : [VMFloat()]
        (t:EDouble) : [VMDouble()]
        (t:EPtrT) : [VMLong()]
        (t) : [VMRef()]
    defmethod vmtypes (this, n:Int) :
      vmtypes(table[n] as StructEntry)
    defmethod alignment (this, t:EType) :
      match(t) :
        (t:EStructT) : alignment(table[n(t)] as StructEntry)
        (t) : size(this, t)
    defmethod size (this, t:EType) :
      match(t) :
        (t:EStructT) : size(table[n(t)] as StructEntry)
        (t:EFnT) : fatal("Invalid argument")
        (t:EUnknown) : fatal("Invalid argument")
        (t:EBot) : fatal("Invalid argument")
        (t:EByte) : 1
        (t:EInt) : 4
        (t:ELong) : 8
        (t:EFloat) : 4
        (t:EDouble) : 8
        (t) : 8
    defmethod size (this, n:Int) :
      size(table[n] as StructEntry)
    defmethod length (this, t:EType) :
      match(t) :      
        (t:EStructT) : length(table[n(t)] as StructEntry)
        (t:EFnT) : fatal("Invalid argument")
        (t:EUnknown) : fatal("Invalid argument")
        (t:EBot) : fatal("Invalid argument")
        (t) : 1
    defmethod length (this, n:Int) :
      length(table[n] as StructEntry)
    defmethod offsets (this, t:EType) :
      match(t) :
        (t:EStructT) : offsets(table[n(t)] as StructEntry)
        (t:EFnT) : fatal("Invalid argument")
        (t:EUnknown) : fatal("Invalid argument")
        (t:EBot) : fatal("Invalid argument")
        (t) : [0]
    defmethod offsets (this, n:Int) :
      offsets(table[n] as StructEntry)
    defmethod field-index (this, n:Int, index:Int) :
      val e = table[n] as StructEntry
      if index < length(field-indices(e)) :
        field-indices(e)[index]
      else if index == length(field-indices(e)) :
        fatal("No rest field") when items(e) is False
        length(e)
      else :
        fatal("Field index out of bounds.")
    defmethod field-offset (this, n:Int, index:Int) :
      val e = table[n] as StructEntry
      if index < length(field-offsets(e)) :
        field-offsets(e)[index]
      else if index == length(field-offsets(e)) :
        fatal("No rest field") when items(e) is False
        size(e)
      else :
        fatal("Field index out of bounds.")
    defmethod item-size (this, n:Int) :
      val e = table[n] as StructEntry
      fatal("Not an array type") when items(e) is False
      size(this, items(e) as EType)
    defmethod base+item-offsets (this, n:Int) :
      val e = table[n] as StructEntry
      fatal("Not an array type") when items(e) is False
      val base-size = size(this, n)
      val item-size = size(this, items(e) as EType)
      val item-os = offsets(this, items(e) as EType)
      val recur-item-os = 
        for offset in base-size to false by item-size seq-cat :
          seq({offset + _}, item-os)
      cat(offsets(this,n), recur-item-os)
      
  compute-struct-properties(gt)
  gt

defn roots (gt:GlobalTable, t:EType) -> Tuple<Int> :
  roots(offsets(gt,t), vmtypes(gt,t))

defn roots (gt:GlobalTable, n:Int) -> Tuple<Int> :
  roots(offsets(gt, n), vmtypes(gt, n))

defn roots (offsets:Seqable<Int>, types:Seqable<VMType>) :
  val root-offsets = for (o in offsets, t in types) filter : t is VMRef
  to-tuple(seq({_ / 8}, root-offsets))  
  