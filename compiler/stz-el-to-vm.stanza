defpackage stz/el-to-vm :
  import core
  import collections
  import stz/el-ir
  import stz/dl-ir
  import stz/vm-ir
  import stz/vm-analyze
  import stz/loaded-ids

;============================================================
;======================== Driver ============================
;============================================================

public defn compile (epackage:EPackage, io:PackageIO, pkgids:PackageIds) :
  val globals = Vector<VMGlobal>()
  val funcs = Vector<VMFunction>()
  val global-table = GlobalTable(epackage, io, pkgids)
  val init-compiler = Compiler(global-table)
  for e in exps(epackage) do :
    match(e) :
      (e:EDefn) :
        val compiler = Compiler(global-table)
        val func = func(e)
        load-locals(compiler, cat(args(func), locals(func)))
        compile(compiler, ins(func))
        val arglocals = map(local{compiler, n(_)}, args(func))
        val f = pkgids[n(e)]
        add(funcs, VMFunc(id(f), arglocals, defs(compiler), instructions(compiler)))
      (e:EDef) :
        val g = pkgids[n(e)] as GlobalId
        add(globals, VMGlobal(id(g), 8, 0, []))
      (e:EInit) :
        load-locals(init-compiler, locals(e))
        compile(init-compiler, ins(e))
      (e:EDefType) :
        false

  ;Initialization function
  compile(init-compiler, [EReturn(EConst(0))])
  add(funcs, VMFunc(id(init(pkgids)), [], defs(init-compiler), instructions(init-compiler)))

  ;Return program
  analyze $ VMProg(
    to-tuple(globals)
    []
    []
    []
    to-tuple(funcs)
    [])

;============================================================
;================= Dependency Analysis ======================
;============================================================
;
;defn analyze-dependencies (f:EFn) :
;  ;Find locals
;  val locals = IntSet()
;  add-all(locals, targs(f))
;  add-all(locals, seq(n,args(f)))
;  add-all(locals, seq(n,/locals(f)))
;
;  ;Find dependencies
;  val dependencies = IntSet()
;  defn scan (t:EType) :
;    match(t:EOf) :
;      add(dependencies, n(t))
;  defn scan (e:ELocal) :
;    scan(type(e))
;  defn scan (e:EImm) :
;    match(e:EVar) :
;      add(dependencies, n(e)) when not locals[n(e)]  
;
;  ;Scan all immediates and types in all instructions
;  for e in ins(f) do :
;    do-imms(scan, e)
;    do-types(scan, e)
;
;  ;Return dependencies
;  to-tuple(dependencies)
;
;defn do-imms (func:EImm -> ?, ins:EIns) :
;  defn f* (x:EImm) : func(x)
;  defn f* (x:False) : false
;  defn f* (x:Seqable<EImm>) : do(f*, x)  
;  match(ins) :
;    (ins:ESet) : (f*(x(ins)), f*(y(ins)))
;    (ins:EShuffle) : (f*(xs(ins)), f*(ys(ins)))
;    (ins:ELabel) : false
;    (ins:EDo) : (f*(x(ins)), f*(f(ins)), f*(ys(ins)))
;    (ins:EDump) : (f*(ys(ins)))
;    (ins:EReturn) : (f*(y(ins)))
;  
;defn do-types (func:EType -> ?, ins:EIns) :
;  defn f* (x:False) : false
;  defn f* (x:EType) : func(x)
;  match(ins) :
;    (ins:ESet) : false
;    (ins:EShuffle) : false
;    (ins:ELabel) : false
;    (ins:EDo) : f*(xtype(ins))
;    (ins:EDump) : false
;    (ins:EReturn) : false

;============================================================
;==================== Global Table ==========================
;============================================================

;deftype GlobalTable
;
;defn GlobalTable (io:PackageIO, epackage:EPackage, pkgids:PackageIds) :
;  ;Create type table
;  val type-table = DTypeTable(io)
;
;  ;Populate entry table
;  val table = IntTable<ETExp|Rec>()
;  for e in imports(io) do :
;    table[n(e)] = rec(e)
;  for e in exps(epackage) do :
;    match(e:EDefn|EDefmulti|EDefGlobal|EExtern) :
;      table[n(e)] = e
;      
;  new GlobalTable :
;    defmethod address (this, n:Int) :
;      match(table[n]) :
;        (e:EDefn|EDefmulti|)

;
;deftype GlobalTable
;defmulti type (t:GlobalTable, n:Int) -> EType
;defmulti function? (t:GlobalTable, n:Int) -> True|False
;defmulti address (t:GlobalTable, n:Int) -> VMImm
;
;defn GlobalTable (epackage:EPackage, io:PackageIO, pkgids:PackageIds) :
;  ;Create table from TypeIDs to package-local identifiers
;  val type-ids = HashTable<TypeId,Int>()
;  for e in cat(imports(io), exports(io)) do :
;    match(rec(e)) :
;      (r:TypeRec) : type-ids[id(r) as TypeId] = n(e)
;      (r) : false
;
;  ;Convert a descriptor type into an expression type
;  defn to-etype (d:DType) :
;    match(d) :
;      (d:DByte) : EByte()
;      (d:DInt) : EInt()
;      (d:DLong) : ELong()
;      (d:DFloat) : EFloat()
;      (d:DDouble) : EDouble()
;      (d:DOf) :
;        match(get?(type-ids, id(d))) :
;         (i:Int) : EOf(i)
;         (i:False) : fatal("ETop()")
;
;  ;Populate definition table
;  val table = IntTable<ETExp|Rec>()
;  for e in exps(epackage) do :
;    match(e:EDefn|EDef|EDefType) :
;      table[n(e)] = e
;  for e in imports(io) do :
;    table[n(e)] = rec(e)
;    
;  new GlobalTable :
;    defmethod type (this, n:Int) :
;      match(table[n]) :
;        (d:EDef) : type(d)
;    defmethod function? (this, n:Int) :
;      table[n] is EDefn|FnRec
;    defmethod address (this, n:Int) :
;      match(table[n]) :
;        (e:EDefn|FnRec) : pkgids[n] as CodeId
;        (e:EDef) : pkgids[n] as GlobalId
;
;============================================================
;======================= Compiler ===========================
;============================================================

deftype Compiler
defmulti load-locals (c:Compiler, ls:Seqable<ELocal>) -> False
defmulti local (c:Compiler, n:Int) -> Local
defmulti compile (c:Compiler, ins:Seqable<EIns>) -> False
defmulti defs (c:Compiler) -> Tuple<VMDef>
defmulti instructions (c:Compiler) -> Tuple<VMIns>

deftype CVal
defstruct CImm <: CVal :
  imms: Tuple<VMImm>
defstruct CMem <: CVal :
  address: VMImm
  types: Tuple<VMType>
  offsets: Tuple<Int>

defn Compiler () : ;(global-table:GlobalTable) :
  ;Defs
  val defs = Vector<VMDef>()
  defn makedef (t:VMType) :
    val n = length(defs)
    add(defs, VMDef(n, t, 0))
    Local(n)

  ;Instructions
  val insbuffer = Vector<VMIns>()
  defn emit (c:VMIns) : add(insbuffer, c)

  ;Define locals
  val immtable = IntTable<CImm>()

  ;Put a compiled value into a compiled location
  defn put (x:CVal, y:CVal) :
    match(x, y) :
      (x:CImm, y:CImm) :
        for (x in imms(x), y in imms(y)) do :
          emit(SetIns(x as Local, y))
      (x:CImm, y:CMem) :
        val a = address(y)
        for (x in imms(x), o in offsets(y)) do :
          emit(LoadIns(x, a, NumConst(0), o))
      (x:CMem, y:CImm) :
        val a = address(a)
        for (o in offsets(x), y in imms(y)) do :
          emit(StoreIns(a, NumConst(0), o, y))
      (x:CMem, y:CMem) :
        val tmp = CImm(map(makedef, types(y)))
        put(tmp, y)
        put(x, tmp)

  ;Compile function to location
  defn put (x:CVal, f:Tuple<Local> -> False) :
    match(x) :
      (x:CImm) :
        f(imms(x) as Tuple<Local>)
      (x:CMem) :
        val tmp = CImm(map(makedef,type(x)))
        put(tmp, f)
        put(x, tmp)
  defn put (x:CVal, f:Tuple<Local> -> VMIns) :
    put(x, emit{f(_)})
  defn put (x:CVal, f:Local -> VMIns) :
    put(x, emit{f(_[0])})  

  ;Compile an immediate to a location
  defn cval (x:EImm) -> CVal :
    match(x) :
      (x:EConst) :
        NumConst(value(x))
      (x:EVar) :
        if key?(immtable, n(x)) :
          immtable[n(x)]
        else :
          val t = to-vm-type(type(global-table, n(x)))
          Mem(address(global-table,n(x)), t)

  defn imm (x:CVal) :
    match(x:Mem) :
      val tmp = makedef(type(x))
      put(tmp, x)
      tmp
    else :
      x as VMImm
  defn imm (x:EImm) : imm(cval(x))
  defn imms (xs:Tuple<EImm>) : map(imm, xs)

  ;Compile instructions
  defn compile (ins:EIns) :
    match(ins) :
      (ins:ESet) :
        put(cval(x(ins)), cval(y(ins)))
      (ins:ELabel) :
        emit(LabelIns(n(ins)))
      (ins:EDo) :
        val ys* = imms(ys(ins))
        defn call-global (f:Int) :
          within l = store-into-xs(x(ins)) :
            emit(CallIns(l, address(global-table,f), ys*))
        defn call-imm (f:EImm) :
          within l = store-into-xs(x(ins)) :
            emit(CallIns(l, imm(f), ys*))
        match(/f(ins)) :
          (f:EVar) :
            if function?(global-table, n(f)) : call-global(n(f))
            else : call-imm(f)
          (f) : call-imm(f)
      (ins:EDump) :
        val ys* = for y in imms(ys(ins)) map :
          match(y:Local) :
            y
          else :
            val x = makedef(type(y))
            emit(SetIns(x,y))
            x
        emit(DumpIns(ys*))
      (ins:EReturn) :
        emit(ReturnIns([imm(y(ins))]))

  ;Return compiler
  new Compiler :
    defmethod compile (this, ins:Seqable<EIns>) :
      do(compile, ins)
    ;defmethod load-locals (this, locals:Seqable<ELocal>) :
    ;  clear(immtable)
    ;  clear(typetable)
    ;  for x in locals do :
    ;    val t = to-vm-type(type(x))
    ;    typetable[n(x)] = t
    ;    immtable[n(x)] = makedef(t)
    ;defmethod local (this, n:Int) :
    ;  immtable[n] as Local
    ;defmethod defs (this) :
    ;  to-tuple(defs)
    ;defmethod instructions (this) :
    ;  to-tuple(insbuffer)

defn to-vm-type (t:EType) :
  match(t) :
    (t:EByte) : VMByte()
    (t:EInt) : VMInt()
    (t:ELong) : VMLong()
    (t:EFloat) : VMFloat()
    (t:EDouble) : VMDouble()
    (t:EOf) : VMRef()