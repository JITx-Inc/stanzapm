defpackage call-records :
  import core
  import collections
  import stz/backend

;============================================================
;===================== Call Records =========================
;============================================================

public deftype CallLoc
public defstruct RegLoc <: CallLoc :
  index: Int
public defstruct FRegLoc <: CallLoc :
  index: Int
public defstruct MemLoc <: CallLoc :
  index: Int

public deftype CallValue
public defstruct StdArg <: CallValue :
  index: Int
public defstruct ShadowArg <: CallValue :
  index: Int

public defstruct CallRecord :
  loc: CallLoc
  value: CallValue

public defstruct CallRecords :
  records: Tuple<CallRecord>
  num-int-args: Int
  num-real-args: Int
  num-mem-args: Int

public deftype ArgType
public defstruct IntArg <: ArgType
public defstruct RealArg <: ArgType

;============================================================
;========================= Classifier =======================
;============================================================

public defn callc-records (args:Tuple<ArgType>, backend:Backend) -> CallRecords :
  ;Records
  val records = Vector<CallRecord>()
  defn std-arg (i:Int, l:CallLoc) :
    add(records, CallRecord(StdArg(i),l))
  defn shadow-arg (i:Int, l:CallLoc) :
    add(records, CallRecord(ShadowArg(i),l))

  ;Track registers
  val reg-counter = to-seq(0 to length(callc-regs(backend)))
  val freg-counter = to-seq(0 to length(callc-fregs(backend)))
  val mem-counter = to-seq(0 to false)
  defn next-reg () : RegLoc(next(reg-counter))
  defn next-freg () : FRegLoc(next(freg-counter))
  defn next-mem () : MemLoc(next(mem-counter))

  ;Classify
  match(backend) :
    (backend:W64Backend) :
      for (x in args, i in 0 to false) do :
        match(x) :
          (x:IntArg) :
            if empty?(reg-counter) :         ;If no more integer registers
              std-arg(i, next-mem())         ;  place in mem argument
            else :
              std-arg(i, next-reg())         ;Otherwise place in integer register
              next(freg-counter)             ;  and eat real register
          (x:RealArg) :
            if empty?(freg-counter) :        ;If no more real registers
              std-arg(i, next-mem())         ;  place in mem argument
            else :
              std-arg(i, next-freg())        ;Otherwise place in real register
              shadow-arg(i, next-reg())      ;  and place shadow in integer register        
    (backend) :
      for (x in args, i in 0 to false) do :
        match(x) :
          (x:IntArg) :
            if empty?(reg-counter) : std-arg(i, next-mem())    
            else : std-arg(i, next-reg())          
          (x:RealArg) :
            if empty?(freg-counter) : std-arg(i, next-mem())
            else : std-arg(i, next-freg())        

  ;Count number of args used
  defn peek? (xs:Seq<Int>, default:Int) : default when empty?(xs) else peek(xs)
  val num-int-args = peek?(reg-counter, length(callc-regs(backend)))
  val num-real-args = peek?(freg-counter, length(callc-fregs(backend)))
  val num-mem-args = peek(mem-counter)
  CallRecords(to-tuple(records), num-int-args, num-real-args, num-mem-args)