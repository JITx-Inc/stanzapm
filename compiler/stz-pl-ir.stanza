defpackage stz/pl-ir :
  import core
  import collections
  import stz/tl-ir
  import stz/type-calculus
  import stz/ids
  import stz/namemap with :
    prefix(Private,Public,Protected) => NM

#use-added-syntax(stz-ast-lang, stz-printer-lang)

;============================================================
;===================== Structures ===========================
;============================================================

public defstruct PkgIds :
  declarations: List<Declare>
  imports: List<ImportPackage>

public defstruct Declare :
  n: Int
  id: Id
  info: FileInfo

public defstruct ImportPackage :
  package: Symbol
  imports: List<Import>

public defstruct Import :
  n: Int
  id: Id

public defast :
  ;Visibility
  deftype Visibility <: Equalable
  defnodes Visibility :
    Private
    Protected
    Public

  ;Identification Records
  deftype Id <: Equalable
  defnodes Id :
    ValId :
      name: Symbol with: (as-method => true)
      type: Type
      visibility: Visibility with: (as-method => true)
    VarId :
      name: Symbol with: (as-method => true)
      type: Type
      visibility: Visibility with: (as-method => true)
    FnId :
      name: Symbol with: (as-method => true)
      tail?: True|False
      targs: List<Int>
      cargs: List<Int>
      a1: List<Type>
      a2: Type
      visibility: Visibility with: (as-method => true)
    MultiId :
      name: Symbol with: (as-method => true)
      tail?: True|False
      targs: List<Int>
      cargs: List<Int>
      a1: List<Type>
      a2: Type
      visibility: Visibility with: (as-method => true)
    TypeId :
      name: Symbol with: (as-method => true)
      args: List<Int>
      parent: False|Type
      children: List<ChildDec>
      visibility: Visibility with: (as-method => true)
    TArgId :
      name: Symbol with: (as-method => true)
      
    LSValId :
      name: Symbol with: (as-method => true)
      type: LSType
      visibility: Visibility with: (as-method => true)
    LSVarId :
      name: Symbol with: (as-method => true)
      type: LSType
      visibility: Visibility with: (as-method => true)
    LSFnId :
      name: Symbol with: (as-method => true)
      tail?: True|False
      targs: List<Int>
      cargs: List<Int>
      a1: List<LSType>
      a2: LSType
      visibility: Visibility with: (as-method => true)
    LSTypeId :
      name: Symbol with: (as-method => true)
      args: List<Int>
      parent: False|Type
      fields: List<FieldDec>
      visibility: Visibility with: (as-method => true)
    FieldId :
      name: Symbol with: (as-method => true)

    LSExternFnId :
      name: Symbol with: (as-method => true)
      lbl: Symbol
      a1: List<LSType>
      a2: LSType
      visibility: Visibility with: (as-method => true)
    LSExternId :
      name: Symbol with: (as-method => true)
      lbl: Symbol
      type: LSType
      visibility: Visibility with: (as-method => true)

public defmulti name (id:Id) -> Symbol
public defmulti visibility (id:Id) -> Visibility

public defstruct ChildDec <: Equalable :
  n: Int
  args: List<Int>
  parent: Type

public defstruct FieldDec <: Equalable :
  n: Int
  name: Symbol
  type: LSType

;============================================================
;====================== Equality ============================
;============================================================

defmethod equal? (a:FieldDec, b:FieldDec) :
  n(a) == n(b) and
  name(a) == name(b) and
  type(a) == type(b)

defmethod equal? (a:ChildDec, b:ChildDec) :
  n(a) == n(b) and
  args(a) == args(b) and
  parent(a) == parent(b)

defmethod equal? (a:Visibility, b:Visibility) :
  match(a, b) :
    (a:Private, b:Private) : true
    (a:Protected, b:Protected) : true
    (a:Public, b:Public) : true
    (a, b) : false

defmethod equal? (a:Id, b:Id) :
  match(a, b) :
    (a:ValId, b:ValId) :
      name(a) == name(b) and
      type(a) == type(b) and
      visibility(a) == visibility(b)
    (a:VarId, b:VarId) :
      name(a) == name(b) and
      type(a) == type(b) and
      visibility(a) == visibility(b)
    (a:FnId, b:FnId) :
      name(a) == name(b) and
      tail?(a) == tail?(b) and
      targs(a) == targs(b) and
      cargs(a) == cargs(b) and
      a1(a) == a1(b) and
      a2(a) == a2(b) and
      visibility(a) == visibility(b)
    (a:MultiId, b:MultiId) :
      name(a) == name(b) and
      tail?(a) == tail?(b) and
      targs(a) == targs(b) and
      cargs(a) == cargs(b) and
      a1(a) == a1(b) and
      a2(a) == a2(b) and
      visibility(a) == visibility(b)
    (a:TypeId, b:TypeId) :
      name(a) == name(b) and
      args(a) == args(b) and
      parent(a) == parent(b) and
      children(a) == children(b) and
      visibility(a) == visibility(b)
    (a:TArgId, b:TArgId) :
      name(a) == name(b)      
    (a:LSValId, b:LSValId) :
      name(a) == name(b) and
      type(a) == type(b) and
      visibility(a) == visibility(b)
    (a:LSVarId, b:LSVarId) :
      name(a) == name(b) and
      type(a) == type(b) and
      visibility(a) == visibility(b)
    (a:LSFnId, b:LSFnId) :
      name(a) == name(b) and
      tail?(a) == tail?(b) and
      targs(a) == targs(b) and
      cargs(a) == cargs(b) and
      a1(a) == a1(b) and
      a2(a) == a2(b) and
      visibility(a) == visibility(b)
    (a:LSTypeId, b:LSTypeId) :
      name(a) == name(b) and
      args(a) == args(b) and
      parent(a) == parent(b) and
      fields(a) == fields(b) and
      visibility(a) == visibility(b)
    (a:FieldId, b:FieldId) :
      name(a) == name(b)
    (a:LSExternFnId, b:LSExternFnId) :
      name(a) == name(b) and
      lbl(a) == lbl(b) and
      a1(a) == a1(b) and
      a2(a) == a2(b) and
      visibility(a) == visibility(b)
    (a:LSExternId, b:LSExternId) :
      name(a) == name(b) and
      lbl(a) == lbl(b) and
      type(a) == type(b) and
      visibility(a) == visibility(b)
    (a, b) :
      false

;============================================================
;====================== Printers ============================
;============================================================

defprinter (p:PkgIds) :
  PkgIds :
    ($pkg (declarations ...) (imports ...))

defprinter (d:Declare) :
  Declare :
    ($def n id info)

defprinter (d:ImportPackage) :
  ImportPackage :
    ($import-package package imports ...)
    
defprinter (d:Import) :
  Import :
    ($import n id)

defprinter (c:ChildDec) :
  ChildDec :
    ($child n (args ...) parent)

defprinter (c:FieldDec) :
  FieldDec :
    ($field n name type)

defmethod print (o:OutputStream, v:Visibility) :
  print{o, _} $ match(v) :
    (v:Private) : "private"
    (v:Protected) : "protected"
    (v:Public) : "public"

defprinter (id:Id) :
  ValId :
    ($val name type visibility)
  VarId :
    ($var name type visibility)
  FnId :
    if tail?(id) : ($fn* name (targs ...) (cargs ...) (a1 ...) a2 visibility)
    else : ($fn name (targs ...) (cargs ...) (a1 ...) a2 visibility)
  MultiId :
    if tail?(id) : ($multi* name (targs ...) (cargs ...) (a1 ...) a2 visibility)
    else : ($multi name (targs ...) (cargs ...) (a1 ...) a2 visibility)    
  TypeId :
    ($type name (args ...) parent (children ...) visibility)
  TArgId :
    ($targ name)

  LSValId :
    ($lsval name type visibility)
  LSVarId :
    ($lsvar name type visibility)
  LSFnId :
    if tail?(id) : ($lsfn* name (targs ...) (cargs ...) (a1 ...) a2 visibility)
    else : ($lsfn name (targs ...) (cargs ...) (a1 ...) a2 visibility)    
  LSTypeId :
    ($lstype name (args ...) parent (fields ...) visibility)
  FieldId :
    ($field name)

  LSExternFnId :
    ($lsexternfn name lbl (a1 ...) a2 visibility)
  LSExternId :
    ($lsextern name lbl type visibility)

  
;============================================================
;==================== Mappers ===============================
;============================================================

public defn do-ids (f: Int -> ?, t:Type) :
  do(do-ids{f, _}, t)
  match(t) :
    (t:TOf) : f(n(t))
    (t:TTuple) : f(TUPLE-TYPE-ID)
    (t:TArrow) : f(FN-TYPE-ID)
    (t) : false

public defn do-ids (f: Int -> ?, t:LSType) :
  do(do-ids{f, _:LSType}, t)
  match(t) :
    (t:StructT) : f(n(t))
    (t:RefT) : do-ids(f, type(t))
    (t) : false

defn do-ids? (f: Int -> ?, t:Type|False) :
  match(t:Type) : do-ids(f, t)

public defn do-ids (f: Int -> ?, id:Id) :
  match(id) :
    (id:ValId) :
      do-ids(f, type(id))
    (id:VarId) :
      do-ids(f, type(id))
    (id:FnId) :
      do(do-ids{f, _}, a1(id))
      do-ids(f, a2(id))
    (id:MultiId) :
      do(do-ids{f, _}, a1(id))
      do-ids(f, a2(id))
    (id:TypeId) :
      do-ids?(f, parent(id))
      for c in children(id) do :
        f(n(c))
        do-ids(f, parent(c))
    (id:TArgId) :
      false

    (id:LSValId) :
      do-ids(f, type(id))
    (id:LSVarId) :
      do-ids(f, type(id))
    (id:LSFnId) :
      do(do-ids{f, _}, a1(id))
      do-ids(f, a2(id))
    (id:LSTypeId) :
      do-ids?(f, parent(id))
      for fd in fields(id) do :
        do-ids(f, type(fd))
    (id:FieldId) :
      false

    (id:LSExternFnId) :
      do(do-ids{f, _}, a1(id))
      do-ids(f, a2(id))
    (id:LSExternId) :
      do-ids(f, type(id))

;============================================================
;==================== IdTable ===============================
;============================================================

;=================
;==== Id Keys ====
;=================
deftype IdKey <: Hashable & Equalable
defmulti id (k:IdKey) -> Id

defn IdKey (id:Id) :
  val id* = normalize(id)
  new IdKey :
    defmethod id (this) : id*

defn normalize (id:Id) :
  defn env (targs:List<Int>, cargs:List<Int>) ->
           [List<Int>, List<Int>, List<KeyValue<Int,Int>>] :
    val counter = to-seq(0 to false)
    val targs* = map(next{counter}, targs)
    val cargs* = map(next{counter}, cargs)
    val env = map(KeyValue,
                  append(targs, cargs),
                  append(targs*, cargs*))
    [targs*, cargs*, env]

  defn norm (targs:List<Int>, cargs:List<Int>, a1:List<Type>) ->
             [List<Int>, List<Int>, List<Type>] :
    val [targs*, cargs*, env] = env(targs, cargs)
    val a1* = map(sub{_, env}, a1)
    [targs*, cargs*, a1*]

  defn norm (targs:List<Int>, cargs:List<Int>, a1:List<LSType>) ->
             [List<Int>, List<Int>, List<LSType>] :
    val [targs*, cargs*, env] = env(targs, cargs)
    val a1* = map(sub{_, env}, a1)
    [targs*, cargs*, a1*]

  match(id) :
    (id:FnId) :
      if empty?(targs(id)) and empty?(cargs(id)) :
        id
      else :
        val [targs*, cargs*, a1*] = norm(targs(id), cargs(id), a1(id))
        FnId(name(id), tail?(id), targs*, cargs*, a1*, a2(id), visibility(id))
    (id:MultiId) :
      if empty?(targs(id)) and empty?(cargs(id)) :
        id
      else :
        val [targs*, cargs*, a1*] = norm(targs(id), cargs(id), a1(id))
        MultiId(name(id), tail?(id), targs*, cargs*, a1*, a2(id), visibility(id))
    (id:LSFnId) :
      if empty?(targs(id)) and empty?(cargs(id)) :
        id
      else :
        val [targs*, cargs*, a1*] = norm(targs(id), cargs(id), a1(id))
        LSFnId(name(id), tail?(id), targs*, cargs*, a1*, a2(id), visibility(id))
    (id) :
      id

defmethod hash (x:IdKey) :
  match(id(x)) :
    (id:ValId) : hash(name(id))
    (id:VarId) : hash(name(id))
    (id:TypeId) : hash(name(id))
    (id:LSValId) : hash(name(id))
    (id:LSVarId) : hash(name(id))
    (id:LSTypeId) : hash(name(id))
    (id:LSExternId) : hash(name(id))
    (id:FnId) : hash([name(id), targs(id), cargs(id), a1(id)])
    (id:MultiId) : hash([name(id), targs(id), cargs(id), a1(id)])
    (id:LSFnId) : hash([name(id), targs(id), cargs(id), a1(id)])
    (id:LSExternFnId) : hash([name(id), a1(id)])
    (id:TArgId) : hash([name(id)])
    (id:FieldId) : hash([name(id)])

defmethod equal? (a:IdKey, b:IdKey) :
  match(id(a), id(b)) :
    (a:ValId, b:ValId) : name(a) == name(b)
    (a:VarId, b:VarId) : name(a) == name(b)
    (a:TypeId, b:TypeId) : name(a) == name(b)
    (a:LSValId, b:LSValId) : name(a) == name(b)
    (a:LSVarId, b:LSVarId) : name(a) == name(b)
    (a:LSTypeId, b:LSTypeId) : name(a) == name(b)
    (a:LSExternId, b:LSExternId) : name(a) == name(b)
    (a:TArgId, b:TArgId) : name(a) == name(b)
    (a:FieldId, b:FieldId) : name(a) == name(b)
    (a:FnId, b:FnId) :
      name(a) == name(b) and
      targs(a) == targs(b) and
      cargs(a) == cargs(b) and
      a1(a) == a1(b)
    (a:MultiId, b:MultiId) :
      name(a) == name(b) and
      targs(a) == targs(b) and
      cargs(a) == cargs(b) and
      a1(a) == a1(b)
    (a:LSFnId, b:LSFnId) :
      name(a) == name(b) and
      targs(a) == targs(b) and
      cargs(a) == cargs(b) and
      a1(a) == a1(b)
    (a:LSExternFnId, b:LSExternFnId) :
      name(a) == name(b) and
      a1(a) == a1(b)
    (a, b) : false

;==================
;==== Id Table ====
;==================

public deftype IdTable
public defmulti set (t:IdTable, id:Id, n:Int) -> False
public defmulti get (t:IdTable, id:Id) -> Int
public defmulti key? (t:IdTable, id:Id) -> True|False

defn IdTable (ts:IdTables) :
  val table = HashTable<IdKey, Int>()
  new IdTable :
    defmethod get (this, id:Id) : table[IdKey(id)]
    defmethod key? (this, id:Id) : key?(table, IdKey(id))
    defmethod set (this, id:Id, n:Int) :
      table[IdKey(id)] = n
      ts[id] = n

;===================
;==== Id Tables ====
;===================

public deftype IdTables
public defmulti get (t:IdTables, n:Int)  -> Id
public defmulti get (t:IdTables, pkg:Symbol) -> IdTable
defmulti set (t:IdTables, id:Id, n:Int) -> False

public defn IdTables () :
  val tables = HashTable<Symbol,IdTable>()
  val ids = HashTable<Int,Id>()
  new IdTables :
    defmethod set (this, id:Id, n:Int) : ids[n] = id
    defmethod get (this, n:Int) : ids[n]
    defmethod get (this, pkg:Symbol) :
      if not key?(tables, pkg) :
        tables[pkg] = IdTable(this)
      tables[pkg]

;============================================================
;==================== Printing ==============================
;============================================================

defn holes (name:Int -> Symbol, t:Type) -> Type :
  let loop (t:Type = t) :
    match(t) :
      (t:TVar) : TVar(n(t), name(n(t)))
      (t:TCap) : TCap(n(t), name(n(t)))
      (t) : map(loop, t)

defn holes (name:Int -> Symbol, t:LSType) -> LSType :
  map(holes{name, _:Type},
  map(holes{name, _:LSType}, t))

defn type-holes () :
  val names = [`T `R `S `U `V `W `X `Y `Z `A `B `C `D
               `E `F `G `H `I `J `K `L `M `N `O `P `Q]
  val table = HashTable<Int,Symbol>()
  val counter = to-seq(0 to false)
  fn (n:Int) :
    if not key?(table, n) :
      val i = next(counter)
      table[n] = 
        if i < length(names) : names[i]
        else : to-symbol("T%_" % [i - length(names) + 1])
    table[n]

public defn printable (nm:NameMap, id:Id, declaration?:True|False) :  
  val hole-name = type-holes()
  defn #name (n:Int) : name(nm[n])
  defn #? (x:Symbol) : "?%_" % [x]
  defn #targs (id:FnId|MultiId|LSFnId) :
    if empty?(targs(id)) and empty?(cargs(id)) :
      ""
    else :
      "<%,>" %
      if declaration? :
        [cat(seq(#name, targs(id)), seq(#?{#name(_)}, cargs(id)))]
      else :
        [cat(seq(hole-name, targs(id)), seq(#?{hole-name(_)}, cargs(id)))]
  defn #targs (id:LSTypeId|TypeId|ChildDec) :
    if empty?(args(id)) :
      ""
    else :
      "<%,>" %
      if declaration? : [seq(#name, args(id))]
      else : [seq(hole-name, args(id))]
  defn #type (id:ValId|VarId|LSValId|LSVarId|LSExternId) :
    printable(nm, type(id))
  defn #type (id:FieldDec) :
    printable{nm, _} $
    if declaration? : type(id)
    else : holes(hole-name, type(id))
  defn #tail? (id:FnId|MultiId|LSFnId) :
    "*" when tail?(id) else ""
  defn #a1 (id:FnId|MultiId|LSFnId) :
    if declaration? : map(printable{nm, _}, a1(id))
    else : map(printable{nm, holes(hole-name, _)}, a1(id))
  defn #a1 (id:LSExternFnId) :
    map(printable{nm, _}, a1(id))
  defn #a2 (id:FnId|MultiId|LSFnId) :
    if declaration? : printable(nm, a2(id))
    else : printable(nm, holes(hole-name, a2(id)))
  defn #a2 (id:LSExternFnId) :
    printable(nm, a2(id))
  defn #parent (id:LSTypeId|TypeId) :
    match(parent(id)) :
      (parent:Type) : " <: %_" %
        if declaration? : [printable(nm, parent)]
        else : [printable(nm, holes(hole-name, parent))]
      (parent:False) : ""
  defn #parent (id:ChildDec) :
    if declaration? : printable(nm, parent(id))
    else : printable(nm, holes(hole-name, parent(id)))
  defn #name (c:ChildDec) :
    #name(n(c))
  defn #lines (f: (? -> False) -> False) :
    new Printable :
      defmethod print (o:OutputStream, this) :
        val counter = to-seq(0 to false)
        defn item (x) :
          if next(counter) > 0 : print(o, "\n")
          print(o, x)
        f(item)
  
  match(id) :
    (id:ValId) : "%_ val %_ : %_" % [visibility(id), name(id), #type(id)]
    (id:VarId) : "%_ var %_ : %_" % [visibility(id), name(id), #type(id)]
    (id:FnId) : "%_ defn%_ %_%_ (%,) -> %_" % [
      visibility(id), #tail?(id), name(id), #targs(id), #a1(id), #a2(id)]
    (id:MultiId) : "%_ defmulti%_ %_%_ (%,) -> %_" % [
      visibility(id), #tail?(id), name(id), #targs(id), #a1(id), #a2(id)]
    (id:LSValId) : "%_ lostanza val %_ : %_" % [visibility(id), name(id), #type(id)]      
    (id:LSVarId) : "%_ lostanza var %_ : %_" % [visibility(id), name(id), #type(id)]      
    (id:LSExternId) : "%_ extern %_(%_) : %_" % [visibility(id), name(id), lbl(id), #type(id)]
    (id:LSFnId) : "%_ lostanza defn%_ %_%_ (%,) -> %_" % [
      visibility(id), #tail?(id), name(id), #targs(id), #a1(id), #a2(id)]
    (id:LSExternFnId) : "%_ extern defn %_(%_) (%,) -> %_ (" % [
      visibility(id), name(id), lbl(id), #a1(id), #a2(id)]
    (id:LSTypeId) :
      if empty?(fields(id)) :
        "%_ lostanza deftype %_%_%_" % [visibility(id), name(id), #targs(id), #parent(id)]
      else :
        #lines $ fn (put) :
          put("%_ lostanza deftype %_%_%_ :" % [visibility(id), name(id), #targs(id), #parent(id)])
          for f in fields(id) do :
            put("  %_: %_" % [name(f), #type(f)])          
    (id:TypeId) :
      if empty?(children(id)) :
        "%_ deftype %_%_%_" % [visibility(id), name(id), #targs(id), #parent(id)]
      else :
        #lines $ fn (put) :
          put("%_ deftype %_%_%_ :" % [visibility(id), name(id), #targs(id), #parent(id)])
          for c in children(id) do :
            put("  %_%_ <: %_" % [#name(c), #targs(c), #parent(c)])
    (id:TArgId) :
      "targ %_" % [name(id)]
    (id:FieldId) :
      "field %_" % [name(id)]