defpackage stz/pl-ir :
  import core
  import collections
  import stz/tl-ir

#use-added-syntax(stz-ast-lang, stz-printer-lang)

;============================================================
;===================== Structures ===========================
;============================================================

public defstruct PkgIds :
  declarations: List<Declare>
  imports: List<ImportPackage>

public defstruct Declare :
  n: Int
  id: Id
  info: FileInfo

public defstruct ImportPackage :
  package: Symbol
  imports: List<Import>

public defstruct Import :
  n: Int
  id: Id

public defast :
  ;Visibility
  deftype Visibility
  defnodes Visibility :
    Private
    Protected
    Public

  ;Identification Records
  deftype Id
  defnodes Id :
    ValId :
      name: Symbol with: (as-method => true)
      type: Type
      visibility: Visibility with: (as-method => true)
    VarId :
      name: Symbol with: (as-method => true)
      type: Type
      visibility: Visibility with: (as-method => true)
    FnId :
      name: Symbol with: (as-method => true)
      tail?: True|False
      targs: List<Int>
      cargs: List<Int>
      a1: List<Type>
      a2: Type
      visibility: Visibility with: (as-method => true)
    MultiId :
      name: Symbol with: (as-method => true)
      tail?: True|False
      targs: List<Int>
      cargs: List<Int>
      a1: List<Type>
      a2: Type
      visibility: Visibility with: (as-method => true)
    TypeId :
      name: Symbol with: (as-method => true)
      args: List<Int>
      parent: False|Type
      children: List<ChildDec>
      visibility: Visibility with: (as-method => true)
    TArgId :
      name: Symbol with: (as-method => true)
      
    LSValId :
      name: Symbol with: (as-method => true)
      type: LSType
      visibility: Visibility with: (as-method => true)
    LSVarId :
      name: Symbol with: (as-method => true)
      type: LSType
      visibility: Visibility with: (as-method => true)
    LSFnId :
      name: Symbol with: (as-method => true)
      tail?: True|False
      targs: List<Int>
      cargs: List<Int>
      a1: List<LSType>
      a2: LSType
      visibility: Visibility with: (as-method => true)
    LSTypeId :
      name: Symbol with: (as-method => true)
      args: List<Int>
      parent: False|Type
      fields: List<FieldDec>
      visibility: Visibility with: (as-method => true)
    FieldId :
      name: Symbol with: (as-method => true)

    LSExternFnId :
      name: Symbol with: (as-method => true)
      lbl: Symbol
      a1: List<LSType>
      a2: LSType
      visibility: Visibility with: (as-method => true)
    LSExternId :
      name: Symbol with: (as-method => true)
      lbl: Symbol
      type: LSType
      visibility: Visibility with: (as-method => true)

public defmulti name (id:Id) -> Symbol
public defmulti visibility (id:Id) -> Visibility

public defstruct ChildDec :
  n: Int
  args: List<Int>
  parent: Type

public defstruct FieldDec :
  n: Int
  type: LSType

;============================================================
;====================== Printers ============================
;============================================================

defprinter (p:PkgIds) :
  PkgIds :
    ($pkg (declarations ...) (imports ...))

defprinter (d:Declare) :
  Declare :
    ($def n id info)

defprinter (d:ImportPackage) :
  ImportPackage :
    ($import-package package imports ...)
    
defprinter (d:Import) :
  Import :
    ($import n id)

defprinter (c:ChildDec) :
  ChildDec :
    ($child n (args ...) parent)

defprinter (c:FieldDec) :
  FieldDec :
    ($field n type)

defprinter (v:Visibility) :
  Private :
    ($private)
  Protected :
    ($protected)
  Public :
    ($public)

defprinter (id:Id) :
  ValId :
    ($val name type visibility)
  VarId :
    ($var name type visibility)
  FnId :
    if tail?(id) : ($fn* name (targs ...) (cargs ...) (a1 ...) a2 visibility)
    else : ($fn name (targs ...) (cargs ...) (a1 ...) a2 visibility)
  MultiId :
    if tail?(id) : ($multi* name (targs ...) (cargs ...) (a1 ...) a2 visibility)
    else : ($multi name (targs ...) (cargs ...) (a1 ...) a2 visibility)    
  TypeId :
    ($type name (args ...) parent (children ...) visibility)
  TArgId :
    ($targ name)

  LSValId :
    ($lsval name type visibility)
  LSVarId :
    ($lsvar name type visibility)
  LSFnId :
    if tail?(id) : ($lsfn* name (targs ...) (cargs ...) (a1 ...) a2 visibility)
    else : ($lsfn name (targs ...) (cargs ...) (a1 ...) a2 visibility)    
  LSTypeId :
    ($lstype name (args ...) parent (fields ...) visibility)
  FieldId :
    ($field name)

  LSExternFnId :
    ($lsexternfn name lbl (a1 ...) a2 visibility)
  LSExternId :
    ($lsextern name lbl type visibility)

  