defpackage stz/tl-to-dl :
  import core
  import collections
  import stz/namemap with:
    prefix(EType, Private, Public, Protected) => NM
  import stz/tl-ir
  import stz/dl-ir

;============================================================
;============= Extract Exports from TPackage ================
;============================================================

public defn compute-packageio (p:TPackage, namemap:NameMap) -> TPackage :
  val io = packageio(p)
  val io* = sub-exports(io, compute-exports(p, namemap))
  sub-packageio(p, io*)

defn compute-exports (p:TPackage, namemap:NameMap) :
  ;Utilities
  defn get-package (n:Int) : package(namemap[n])
  defn get-name (n:Int) : name(namemap[n])
  defn get-typeid (n:Int) : TypeId(get-package(n), get-name(n))
  defn get-valid (n:Int) : ValId(get-package(n), get-name(n))
  defn get-fnid (n:Int, targs:Seqable<Int>, cargs:Seqable<Int>, a1:Seqable<Type|False>, a2:Type|False) :
    val targs* = to-tuple(targs)
    val cargs* = to-tuple(cargs)
    val tcargs* = to-tuple(cat(targs*,cargs*))
    val a1* = to-tuple(seq(to-dtype{_ as Type, tcargs*}, a1))
    val a2* = to-dtype(a2 as Type, tcargs*)
    [FnId(get-package(n), get-name(n), length(targs*), length(cargs*), a1*), a2*]
  defn get-fnid (n:Int, targs:Seqable<Int>, cargs:Seqable<Int>, a1:Seqable<LSType>, a2:LSType) :
    val targs* = to-tuple(targs)
    val cargs* = to-tuple(cargs)
    val tcargs* = to-tuple(cat(targs*,cargs*))
    val a1* = to-tuple(seq(to-dtype{_, tcargs*}, a1))
    val a2* = to-dtype(a2, tcargs*)
    [FnId(get-package(n), get-name(n), length(targs*), length(cargs*), a1*), a2*]

  ;Type Conversion
  defn to-dtype (t:Type, targs0:Seqable<Int>) :
    val targs = to-tuple(targs0)
    defn lookup-var (n:Int) :
      DTVar(index-of!(targs, n))
    defn and-types (t:Type) :
      val ts = Vector<Type>()
      let loop (t:Type = t) :
        match(t:TAnd) : (loop(a(t)), loop(b(t)))
        else : add(ts, t)
      ts
    defn or-types (t:Type) :
      val ts = Vector<Type>()
      let loop (t:Type = t) :
        match(t:TOr) : (loop(a(t)), loop(b(t)))
        else : add(ts, t)
      ts
    let loop (t:Type = t) :
      match(t) :
        (t:TCap) : DCap(lookup-var(n(t)))
        (t:TOf) : DOf(get-typeid(n(t)), to-tuple(targs)) where :
                    val targs = seq(loop, types(type(t) as TTuple))
        (t:TTuple) : DTuple(to-tuple(seq(loop,types(t))))
        (t:TOr) : DOr?(seq(loop, cat(or-types(a(t)), or-types(b(t)))))
        (t:TAnd) : DAnd?(seq(loop, cat(and-types(a(t)), and-types(b(t)))))
        (t:TVar) : lookup-var(n(t))
        (t:TArrow) : DArrow(a1, a2) where :
                       val a1 = to-tuple(seq(loop, types(a(t) as TTuple)))
                       val a2 = loop(b(t))
        (t:TGradual) : DTop()
        (t:TBot) : DBot()

  defn to-dtype (t:LSType, targs0:Seqable<Int>) :
    val targs = to-tuple(targs0)
    let loop (t:LSType = t) :      
      match(t) :
        (t:ByteT) : DByte()
        (t:IntT) : DInt()
        (t:LongT) : DLong()
        (t:FloatT) : DFloat()
        (t:DoubleT) : DDouble()
        (t:UnknownT) : DUnknown()
        (t:PtrT) : DPtrT(loop(type(t)))
        (t:RefT) : to-dtype(type(t), targs)
        (t:FnT) : DFnT(a*, r*, b*) where :
          val a* = to-tuple(seq(loop,a(t)))
          val r* = match(r(t):LSType) : loop(r(t) as LSType)
          val b* = loop(b(t))
        (t:StructT) : DStructT(get-typeid(n(t)), to-tuple(targs)) where :
                        val targs = for t in types(type(t) as TTuple) seq :
                                      to-dtype(t, targs)
  defn to-dtype (t:Type) : to-dtype(t, [])
  defn to-dtype (t:LSType) : to-dtype(t, [])
  defn to-dtype? (t:Type, targs:Seqable<Int>) : to-dtype(t, targs)
  defn to-dtype? (t:LSType, targs:Seqable<Int>) : to-dtype(t, targs)
  defn to-dtype? (f:False, targs:Seqable<Int>) : false

  ;Discover all exported entries
  val exports = Vector<Export>()
  defn export (n:Int, r:Rec) :
    val vis = if key?(namemap,n) : visibility(namemap[n])
              else : Private()
    add(exports, Export(n, vis, r))
    
  for c in comms(p) do :
    match(c) :
      (c:TDefType) :
        val id = get-typeid(n(c))
        val ntargs = length(args(c))
        val dparent = to-dtype?(parent(c), args(c))
        val children = to-tuple $ for c in children(c) seq :
          val id = get-typeid(n(c))
          val ntargs = length(args(c))
          val parent = to-dtype(parent(c), args(c)) as DOf
          Child(id, ntargs, parent)
        export(n(c), TypeRec(id, ntargs, dparent, children))
      (c:TLDefType) :
        val id = get-typeid(n(c))
        val ntargs = length(args(c))
        val parent = to-dtype?(parent(c), args(c))
        val last-field-type = type(last(fields(c))) when not empty?(fields(c))
        defn sfield (f:Field) : StructField(name(f), to-dtype(type(f), args(c)))
        val [base-fields, items-field] =
          match(last-field-type:RestT) :
            val lf = last(fields(c))
            [to-tuple(seq(sfield, but-last(fields(c))))                
             StructField(name(lf), to-dtype(type(last-field-type), args(c)))]
          else :
            [to-tuple(seq(sfield,fields(c))), false]
        export(n(c), StructRec(id, ntargs, parent, base-fields, items-field))
      (c:TDef) :
        val id = get-valid(n(c))
        val type = to-dtype(type(c) as Type)
        export(n(c), ValRec(id, type, false, false))
      (c:TDefTuple) :
        for (n in ns(c), t in types(c)) do :
          val id = get-valid(n)
          val type = to-dtype(t as Type)
          export(n, ValRec(id, type, false, false))
      (c:TDefVar) :
        val id = get-valid(n(c))
        val type = to-dtype(type(c) as Type)
        export(n(c), ValRec(id, type, true, false))
      (c:TDefn) :
        val [id, a2] = get-fnid(n(c), targs(c), cargs(c), a1(c), a2(c))
        export(n(c), FnRec(id, a2, false, tail?(c)))
      (c:TDefmulti) :
        val [id, a2] = get-fnid(n(c), targs(c), cargs(c), a1(c), a2(c))
        export(n(c), MultiRec(id, a2))
      (c:TLDef) :
        val id = get-valid(n(c))
        val type = to-dtype(type(c))
        export(n(c), ValRec(id, type, false, true))
      (c:TLDefVar) :
        val id = get-valid(n(c))
        val type = to-dtype(type(c))
        export(n(c), ValRec(id, type, true, true))
      (c:TLDefn) :
        val [id, a2] = get-fnid(n(c), targs(c), cargs(c), a1(c), a2(c))
        export(n(c), FnRec(id, a2, true, tail?(c)))
      (c:TLExternFn) :
        val [id, a2] = get-fnid(n(c), [], [], a1(c), a2(c))
        export(n(c), ExternFnRec(id, a2, get-name(n(c))))
      (c:TExtern) :
        val id = get-valid(n(c))
        val type = to-dtype(type(c))
        export(n(c), ExternRec(id, type, get-name(n(c))))
      (c) : false
  
  to-tuple(exports)

;============================================================
;================ Convert DType to Type =====================
;============================================================
;
;public deftype Env
;public defmulti get (e:Env, id:TypeId) -> Int
;
;public defn to-type? (t:DType, type-args:Tuple<Type>, env:Env) :
;  to-type(t, type-args, env)
;public defn to-type? (t:False, type-args:Tuple<Type>, env:Env) :
;  false
;
;public defn to-type (t:DType, type-args:Tuple<Type>, env:Env) :
;  defn loop (t:DType) :
;    defn to-tuple (ts:Tuple<DType>) :
;      TTuple(to-list(seq(loop, ts)))
;    match(t) :
;      (t:DOf) : TOf(env[id(t)], to-tuple(targs(t)))
;      (t:DTVar) : type-args[index(t)]
;      (t:DCap) : TCap(n(loop(tvar(t)) as TVar), false)
;      (t:DAnd) : reduce(TAnd, seq(loop, types(t)))
;      (t:DOr) : reduce(TOr, seq(loop, types(t)))
;      (t:DTop) : TGradual()
;      (t:DBot) : TBot()
;      (t:DTuple)  : to-tuple(types(t))
;      (t:DArrow)  : TArrow(to-tuple(a1(t)), loop(a2(t)))
;  loop(t)
;
;public defn to-lstype (t:DType, type-args:Tuple<Type>, env:Env) :
;  defn loop (t:DType) -> LSType :
;    defn to-tuple (ts:Tuple<DType>) :      
;      val dts = seq(to-type{_, type-args, env}, ts)
;      TTuple(to-list(dts))
;    match(t) :
;      (t:DByte) : ByteT()
;      (t:DInt) : IntT()
;      (t:DLong) : LongT()
;      (t:DFloat) : FloatT()
;      (t:DDouble) : DoubleT()
;      (t:DUnknown) : UnknownT()
;      (t:DPtrT) : PtrT(loop(type(t)))
;      (t:DFnT) : FnT(a*, r*, b*) where :
;        val a* = to-list(seq(loop,a(t)))
;        val r* = match(r(t)) :
;                   (r:DType) : loop(r)
;                   (r:False) : false
;        val b* = loop(b(t))
;      (t:DStructT) : StructT(env[id(t)], to-tuple(targs(t)))
;      (t) : RefT(to-type(t, type-args, env))
;  loop(t)