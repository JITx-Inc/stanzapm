defpackage stz/tl-to-dl :
  import core
  import collections
  import stz/namemap with:
    prefix(EType) => NM
  import stz/tl-ir
  import stz/dl-ir

public defn to-dl (p:TPackage, namemap:NameMap) -> PackageIO :
  val exports = exports(DLCompiler(namemap), p)
  PackageIO(name(p), [], exports)

deftype DLCompiler
defmulti exports (c:DLCompiler, p:TPackage) -> Tuple<Export>
defn DLCompiler (namemap:NameMap) :
  ;Utilities
  defn get-package (n:Int) : package(namemap[n])
  defn get-name (n:Int) : name(namemap[n])
  defn get-typeid (n:Int) : TypeId(get-package(n), get-name(n))
  defn get-valid (n:Int) : ValId(get-package(n), get-name(n))
  defn get-fnid (n:Int, targs:Seqable<Int>, cargs:Seqable<Int>, a1:Seqable<Type|False>, a2:Type|False) :
    val targs* = to-tuple(cat(targs,cargs))
    val a1* = to-tuple(seq(to-dtype{_ as Type, targs*}, a1))
    val a2* = to-dtype(a2 as Type, targs*)
    [FnId(get-package(n), get-name(n), length(targs*), a1*), a2*]
  defn get-fnid (n:Int, targs:Seqable<Int>, cargs:Seqable<Int>, a1:Seqable<LSType>, a2:LSType) :
    val targs* = to-tuple(cat(targs,cargs))
    val a1* = to-tuple(seq(to-dtype{_, targs*}, a1))
    val a2* = to-dtype(a2, targs*)
    [FnId(get-package(n), get-name(n), length(targs*), a1*), a2*]

  ;Type Conversion
  defn to-dtype (t:Type, targs0:Seqable<Int>) :
    val targs = to-tuple(targs0)
    defn lookup-var (n:Int) :
      DTVar(index-of!(targs, n))
    defn and-types (t:Type) :
      val ts = Vector<Type>()
      let loop (t:Type = t) :
        match(t:TAnd) : (loop(a(t)), loop(b(t)))
        else : add(ts, t)
      ts
    defn or-types (t:Type) :
      val ts = Vector<Type>()
      let loop (t:Type = t) :
        match(t:TOr) : (loop(a(t)), loop(b(t)))
        else : add(ts, t)
      ts
    let loop (t:Type = t) :
      match(t) :
        (t:TCap) : lookup-var(n(t))
        (t:TOf) : DOf(get-typeid(n(t)))
        (t:TTuple) : DOf(TypeId(`core,`Tuple))
        (t:TOr) : DOr?(seq(loop, cat(or-types(a(t)), or-types(b(t)))))
        (t:TAnd) : DAnd?(seq(loop, cat(and-types(a(t)), and-types(b(t)))))
        (t:TVar) : lookup-var(n(t))
        (t:TArrow) : DOf(TypeId(`core,`Fn))
        (t:TGradual) : DTop()
        (t:TBot) : DBot()

  defn to-dtype (t:LSType, targs0:Seqable<Int>) :
    val targs = to-tuple(targs0)
    let loop (t:LSType = t) :
      match(t) :
        (t:ByteT) : DByte()
        (t:IntT) : DInt()
        (t:LongT) : DLong()
        (t:FloatT) : DFloat()
        (t:DoubleT) : DDouble()
        (t:UnknownT) : DUnknown()
        (t:PtrT) : DPtrT(loop(type(t)))
        (t:RefT) : to-dtype(type(t), targs)
        (t:FnT) : DFnT(a*, r*, b*) where :
          val a* = to-tuple(seq(loop,a(t)))
          val r* = match(r(t):LSType) : loop(r(t) as LSType)
          val b* = loop(b(t))
        (t:StructT) : DStructT(get-typeid(n(t)))

  defn to-dtype (t:Type) : to-dtype(t, [])
  defn to-dtype (t:LSType) : to-dtype(t, [])
  defn to-dtype? (t:Type, targs:Seqable<Int>) : to-dtype(t, targs)
  defn to-dtype? (t:LSType, targs:Seqable<Int>) : to-dtype(t, targs)
  defn to-dtype? (f:False, targs:Seqable<Int>) : false

  ;Discover all exported entries
  defn exports (return:Export -> ?, p:TPackage) :
    defn export (n:Int, r:Rec) :
      return(Export(n,r))
    for c in comms(p) do :
      match(c) :
        (c:TDefType) :
          val id = get-typeid(n(c))
          val ntargs = length(args(c))
          val parent = to-dtype?(parent(c), args(c))
          val children = to-tuple(seq(get-typeid{n(_)}, children(c)))          
          export(n(c), TypeRec(id, ntargs, parent, children))
        (c:TLDefType) :
          val id = get-typeid(n(c))
          val ntargs = length(args(c))
          val parent = to-dtype?(parent(c), args(c))
          val last-field-type = type(last(fields(c))) when not empty?(fields(c))
          val [base-types, item-type] =
            match(last-field-type:RestT) : [seq(type, but-last(fields(c))), type(last-field-type)]
            else : [seq(type,fields(c)), false]
          val base = to-tuple(seq(to-dtype{_, args(c)}, base-types))
          val items = to-dtype?(item-type, args(c))
          export(n(c), StructRec(id, ntargs, parent, base, items))
        (c:TDef) :
          val id = get-valid(n(c))
          val type = to-dtype(type(c) as Type)
          export(n(c), ValRec(id, type, false, false))
        (c:TDefTuple) :
          for (n in ns(c), t in types(c)) do :
            val id = get-valid(n)
            val type = to-dtype(t as Type)
            export(n, ValRec(id, type, false, false))
        (c:TDefVar) :
          val id = get-valid(n(c))
          val type = to-dtype(type(c) as Type)
          export(n(c), ValRec(id, type, true, false))
        (c:TDefn) :
          val [id, a2] = get-fnid(n(c), targs(c), cargs(c), a1(c), a2(c))
          export(n(c), FnRec(id, a2, false))
        (c:TDefmulti) :
          val [id, a2] = get-fnid(n(c), targs(c), cargs(c), a1(c), a2(c))
          export(n(c), MultiRec(id, a2))
        (c:TLDef) :
          val id = get-valid(n(c))
          val type = to-dtype(type(c))
          export(n(c), ValRec(id, type, false, true))
        (c:TLDefVar) :
          val id = get-valid(n(c))
          val type = to-dtype(type(c))
          export(n(c), ValRec(id, type, true, true))
        (c:TLDefn) :
          val [id, a2] = get-fnid(n(c), targs(c), cargs(c), a1(c), a2(c))
          export(n(c), FnRec(id, a2, true))
        (c:TLExternFn) :
          val [id, a2] = get-fnid(n(c), [], [], a1(c), a2(c))
          export(n(c), ExternFnRec(id, a2, get-name(n(c))))
        (c:TExtern) :
          val id = get-valid(n(c))
          val type = to-dtype(type(c))
          export(n(c), ExternRec(id, type, get-name(n(c))))
        (c) : false

  new DLCompiler :
    defmethod exports (this, p:TPackage) :
      val es = Vector<Export>()
      exports(add{es, _}, p)
      to-tuple(es)