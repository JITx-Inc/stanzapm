;See License.txt for details about licensing.

defpackage stz/utils :
   import core
   import collections
   import stz/params

;============================================================
;======================= Lists ==============================
;============================================================

public defn lastn<?T> (xs:List<?T>, n:Int) :
  val len = length(xs)
  if len < n : fatal("List has less than %_ elements." % [n])
  tailn(xs, len - n)

public defn select<?T> (xs:List<?T>, mask:List<True|False>) -> List<T> :
  to-list(filter(xs, mask))

;============================================================
;===================== Arithmetic ===========================
;============================================================

public defn ceil8 (x:Int) :
   (x + 7) & -8

;============================================================
;===================== Header ===============================
;============================================================

public defn header (input-msg) :
   val msg = to-string(input-msg)
   val l = length(msg)
   val n1 = 30 - 1 - (l / 2)
   val n2 = 60 - (n1 + 2 + l)
   println("\n\n\n")
   println(String(60, '='))
   println-all([String(n1, '='), ' ', msg, ' ', String(n2, '=')])
   println(String(60, '='))

public defn vheader (msg) :
   header(msg) when flag-defined?(`VERBOSE)      

public defn vprintln (msg) :
   println(msg) when flag-defined?(`VERBOSE)

;============================================================
;====================== Either ==============================
;============================================================

public deftype Either<A,B>
public defstruct Left<A> <: Either<A,Void> : (value: A)
public defstruct Right<B> <: Either<Void,B> : (value: B)
public defn Left<?A> (x:?A) : Left<A>(x)
public defn Right<?B> (x:?B) : Right<B>(x)

;============================================================
;==================== HashTable =============================
;============================================================

public defn to-hashtable<K,V> (es:Seqable<KeyValue<K,V>>) -> HashTable<K,V> :
  to-hashtable<K,V>(seq(key, es), seq(value, es))

public defn to-hashtable<K,V> (ks:Seqable<K>, vs:Seqable<V>) -> HashTable<K,V> :
  val t = HashTable<K,V>()
  do({t[_] = _}, ks, vs)
  t

;============================================================
;======================= Counter ============================
;============================================================
public deftype Counter
public defmulti next (c:Counter, n:Int) -> Int
public defn value (c:Counter) : next(c, 0)
public defmulti set-value (c:Counter, x:Int) -> False

public defn Counter (init:Int) :
  var x = init
  new Counter :
    defmethod set-value (this, x2:Int) :
      x = x2
    defmethod next (this, n:Int) :
      val cur-x = x
      x = x + n
      cur-x