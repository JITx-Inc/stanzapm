;See License.txt for details about licensing.

defpackage stz/utils :
   import core
   import collections
   import stz/params

;============================================================
;======================= Lists ==============================
;============================================================

public defn lastn<?T> (xs:List<?T>, n:Int) :
  val len = length(xs)
  if len < n : fatal("List has less than %_ elements." % [n])
  tailn(xs, len - n)

public defn select<?T> (xs:List<?T>, mask:List<True|False>) -> List<T> :
  to-list(filter(xs, mask))

public defn replace<?T> (xs:List<?T>, mask:List<True|False>, ys:List<?T>) -> List<T> :
  val ys-seq = to-seq(ys)
  for (x in xs, m in mask) map :
    next(ys-seq) when m else x

public defn wrap-in-list<T> (c:T|List<T>) -> List<T> :
  match(c) :
    (c:List<T>) : c
    (c:T) : List(c)

public defn accumulate<T> (f: (T -> False) -> ?) :
  val accum = Vector<T>()
  f(add{accum, _})
  to-list(accum)

;============================================================
;======================= Tuples =============================
;============================================================
public defn fst<?T> ([x y]:[?T ?]) : x
public defn snd<?T> ([x y]:[? ?T]) : y

;============================================================
;===================== Arithmetic ===========================
;============================================================

public defn ceil8 (x:Int) :
   (x + 7) & -8

;============================================================
;===================== Header ===============================
;============================================================

public defn header (input-msg) :
   val msg = to-string(input-msg)
   val l = length(msg)
   val n1 = 30 - 1 - (l / 2)
   val n2 = 60 - (n1 + 1 + l + 1)
   if n1 >= 0 and n2 >= 0 :
     println("\n\n\n")
     println(String(60, '='))
     println-all([String(n1, '='), ' ', msg, ' ', String(n2, '=')])
     println(String(60, '='))
   else :
     println(String(l, '='))
     println(msg)
     println(String(l, '='))

public defn vheader (msg) :
   header(msg) when flag-defined?(`VERBOSE)      

public defn vprintln (msg) :
   println(msg) when flag-defined?(`VERBOSE)

;============================================================
;====================== Either ==============================
;============================================================

public deftype Either<A,B>
public defstruct Left<A> <: Either<A,Void> : (value: A)
public defstruct Right<B> <: Either<Void,B> : (value: B)
public defn Left<?A> (x:?A) : Left<A>(x)
public defn Right<?B> (x:?B) : Right<B>(x)

;============================================================
;======================= Counter ============================
;============================================================
public deftype Counter
public defmulti next (c:Counter, n:Int) -> Int
public defn value (c:Counter) : next(c, 0)
public defmulti set-value (c:Counter, x:Int) -> False

public defn Counter (init:Int) :
  var x = init
  new Counter :
    defmethod set-value (this, x2:Int) :
      x = x2
    defmethod next (this, n:Int) :
      val cur-x = x
      x = x + n
      cur-x

;============================================================
;======================= Lazy ===============================
;============================================================

public defn lazy<?T> (f: () -> ?T) -> () -> T :
  var x = None()
  fn () :
    if empty?(x) :
      x = One(f())
    value!(x)

;============================================================
;======================= Timing =============================
;============================================================
val TIMERS = HashTable<String,Long>(0L)
val TIMER-ORDER = Vector<String>()
val START = current-time-us()
var ACTIVE-TIMER = false

public defn time-ms<?T> (name:String, f: () -> ?T) -> T :
  ;Track new timers
  add(TIMER-ORDER,name) when not key?(TIMERS,name)

  ;Remember active timer
  val active = ACTIVE-TIMER
  ACTIVE-TIMER = name

  ;Time function
  val t0 = current-time-us()
  val result = f()
  val t1 = current-time-us()

  ;No longer active
  ACTIVE-TIMER = active

  ;Update timers
  update(TIMERS, {_ + t1 - t0}, name)
  update(TIMERS, {_ - (t1 - t0)}, active as String) when active is String

  ;Return result
  result

public defn print-timing-results () :
  val total = current-time-us() - START
  defn report (name:String) :
    val t = TIMERS[name]
    val percent = t * 1000L / total
    val n0 = percent / 10L
    val n1 = percent % 10L
    println("  %_ : %_ ms (%_.%_%% of total)" % [
      name, t, n0, n1])
  println("Total time: %_ ms" % [total])
  do(report, TIMER-ORDER)