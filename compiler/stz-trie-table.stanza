defpackage stz/trie-table :
  import core
  import collections
  import stz/trie
  import stz/hash

;<doc>=======================================================
;=================== Trie Table Representation ==============
;============================================================

Here is how a trie is stored:

  I | N | DTable ... | Key, Value ... | Default

Where:

  I is the index of the register to perform dispatch on.
  N is the length of the table.
  DTable are the entries of the first-level hash table.
  Key are the keys for each branch.
  Value are the values for each branch.

If N is less than or equal to 4, then the DTable is omitted, and we
perform a linear lookup instead.

If a key is not in the table, then we interpret the action given by Default.

Two cases are encoded into the value and Default :

  (- (Target + 1)) when Value < 0
  (Table offset)   when Value >= 0

When the Value is negative, it encodes the target to return.
Otherwise, it encodes the address of the next table.

;============================================================
;=======================================================<doc>

;Convert a list of branches into a trie and
;encode it
public defn encode-trie (branches:Tuple<IDispatchBranch>) -> Vector<Int> :
  val trie = to-trie(branches) when not empty?(branches)
  encode-trie(trie)

;Encode Trie into Int Vector
public defn encode-trie (trie:IfTrie|False) -> Vector<Int> :
  ;Accumulator for storing encoded trie
  val accum = Vector<Int|AccumValue>()
  defn emit (x:Int|AccumValue) : add(accum,x)
  defn pos () : length(accum)

  ;Store the addresses of all the encoded tries
  val trie-addresses = IntTable<Int>()

  ;Overall algorithm
  defn driver () :
    match(trie) :
      (t:IfTrie) : encode(t, 0)
      (t:False) : encode-empty-trie()
    fill-accum-values()
    accum as Vector<Int>

  ;Encode a trie for dispatching on given arg-index.
  defn encode (t:IfTrie, arg-index:Int) :
    ;Track all staged tries
    val staged-tries = Vector<KeyValue<Int,IfTrie>>()

    ;Compute all table entries
    var default-entry = Target(0)
    val table-entries = Vector<KeyValue<Int,AccumValue>>()
    for b in branches(t) do :
      ;Compute value for this branch
      val v = match(value(b)) :
        (v:IfTrie) :
          val id = genid()
          add(staged-tries, id => v)
          TrieId(id)
        (v:EndTrie) :
          Target(target(v))
      ;Add entries
      match(key(b)) :
        (k:ISubset) :
          do(add{table-entries, _ => v}, xs(k))
        (k:IAll) :
          default-entry = v

    ;Encode table
    val n = length(table-entries)
    emit(arg-index)
    emit(n)
    if n <= 4 :
      for e in table-entries do :
        emit(key(e))
        emit(value(e))
      emit(default-entry)
    else :
      val table = PerfectHashTable(table-entries)
      fatal("Unexpected size difference") when n != length(table)
      for i in 0 to n do :
        emit(dentry(table,i))
      for i in 0 to n do :
        val e = entry(table,i)
        emit(key(e))
        emit(value(e))
      emit(default-entry)
    
    ;Encode staged tries
    for e in staged-tries do :
      trie-addresses[key(e)] = pos()
      encode(value(e), arg-index + 1)

  ;Encode an empty trie
  defn encode-empty-trie () :
    emit(0)
    emit(0)
    emit(Target(0))

  ;Fill in delayed accum values
  defn fill-accum-values () :
    for v in accum map! :
      match(v) :
        (v:Int) :
          v
        (v:Target) :
          (- (value(v) + 1))
        (v:TrieId) :
          trie-addresses[id(v)]

  ;Launch
  driver()

deftype AccumValue
defstruct Target <: AccumValue: (value:Int)
defstruct TrieId <: AccumValue: (id:Int)
