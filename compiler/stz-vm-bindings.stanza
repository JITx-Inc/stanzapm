defpackage stz/vm-bindings :
  import core
  import collections
  import stz/vm-ir
  import stz/vm

defn analyze-func (f:VMFunc) :
  ;Construct definition table
  val deftable = to-inttable<VMDef> $
    for def in defs(f) seq :
      id(def) => def
  ;Immediate type
  defn imm-type (x:VMImm) :
    match(x:Local) : type(deftable[index(x)])
    else : type(x)
  defn imm-type (f:False) :
    false
  ;Scan through instructions for Call-C
  for ins in ins(f) do :
    match(ins:CallCIns) :    
      val xtypes = map(imm-type, xs(ins))
      val ytypes = map(imm-type, ys(ins))
      val format = CallFormat(xtypes, ytypes)
      println("Call format: %_" % [format])

defn main () :
  val filename = command-line-arguments()[1]
  val prog = read-vm-prog(filename)
  println(prog)

  ;For each extern print it out
  println("===== Externs =====")
  do(println, externs(prog))

  ;Discover all C calling formats
  println("===== C Calling Formats =====")
  do(analyze-func, funcs(prog))

main()