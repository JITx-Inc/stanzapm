defpackage stz/vm-bindings :
  import core
  import collections
  import macro-utils
  import stz/vm-ir
  import stz/vm

;============================================================
;==================== Generation ============================
;============================================================

defn choice-index (t:VMType) :
  match(t) :
    (t:VMByte) : 0
    (t:VMInt) : 1
    (t:VMLong) : 2
    (t:VMFloat) : 3
    (t:VMDouble) : 4
    
defn gen-type (t:VMType, index:Int) :
  val lostanza-types = [`byte `int `long `float `double]
  val int-types = [`byte `int `long `int `long]
  val vm-types = [`(VMByte()), `(VMInt()), `(VMLong()), `(VMFloat()), `(VMDouble())]
  val i = choice-index(t)
  [`#type => choice(i)
   `#arg => gensym(`arg)
   `#temp => gensym(`temp)
   `#index => index
   `lostanza-type => lostanza-types[i]
   `int-type => int-types[i]
   `vm-type => splice(substitute(vm-types[i], []))]

defn gen-format (f:CallFormat) :
  val template = `(
    lostanza defn #call-function (f:long, registers:ptr<long>) -> long :
      val fptr = f as ptr<((args{lostanza-type}) -> (ret{lostanza-type}))>
      args{
        #type{
          val #arg = registers[#index]
        }{
          val #arg = registers[#index]
        }{
          val #arg = registers[#index]
        }{
          val #temp = registers[#index] as int-type
          val #arg = ($ls-prim fnum #temp)
        }{
          val #temp = registers[#index] as int-type
          val #arg = ($ls-prim fnum #temp)          
        }
      }
      val result = call-c [fptr](args{#arg})
      ret{
        #type{
          registers[0] = result
        }{
          registers[0] = result
        }{
          registers[0] = result
        }{
          registers[0] = ($ls-prim bits result)
        }{
          registers[0] = ($ls-prim bits result)
        }
      }
      return 0
    defn #CallFormat () :
      CallFormat([ret{vm-type}], [args{vm-type}])
    lostanza let :
      val f = addr(#call-function) as long
      set(FORMAT-TABLE, #CallFormat(), new Long{f}))
  substitute(template, [
    `#call-function => gensym(`call-function)
    `args => nested(to-list(seq(gen-type, ys(f), 0 to false)))
    `ret => nested(to-list(seq(gen-type, xs(f) as Tuple<VMType>, 0 to false)))
    `#CallFormat => gensym(`CallFormat)])

defn gen-extern (e:VMExtern) :
  val template = `(
    extern name : long
    val name-sym = `name
    lostanza let :
      val f = addr(name) as long
      set(EXTERN-TABLE, name-sym, new Long{f}))
  substitute(template, [
    `name => to-symbol(name(e))
    `name-sym => gensym(name(e))])

defn gen-extern-defn (e:VMExternDefn, extern-index:Int) :
  val template = `(
    extern defn #name (args{#arg:lostanza-type}) -> ret{lostanza-type} :
      val #registers = vm-registers()
      args{
        #type{
          #registers[#index] = #arg
        }{
          #registers[#index] = #arg
        }{
          #registers[#index] = #arg
        }{
          #registers[#index] = ($ls-prim bits #arg)
        }{
          #registers[#index] = ($ls-prim bits #arg)
        }        
      }
      call-extern(#extern-index)
      ret{
        val result = #registers[0] as int-type
        #type{
          return result
        }{
          return result
        }{
          return result
        }{
          return ($ls-prim fnum result)
        }{
          return ($ls-prim fnum result)
        }
      }
    lostanza let :
      val f = addr(#name) as long      
      set(EXTERN-DEFN-TABLE, `#name, new Int{#extern-index}, new Long{f}))
  substitute(template, [
    `#name => lbl(e)
    `args => nested(to-list(seq(gen-type, a1(e), 0 to false)))
    `ret => nested([gen-type(a2(e), 0)])
    `#registers => gensym(`registers)
    `#extern-index => extern-index])

defn gen-bindings (externs:Seqable<VMExtern>,
                   formats:Seqable<CallFormat>,
                   extern-defns:Seqable<VMExternDefn>) :
  val template = `(
    defpackage stz/generated-bindings
    externs,
    formats,
    extern-defns)
  gen-fill(template, [
    `externs => splice(to-list(seq(gen-extern, externs)))
    `formats => splice(to-list(seq(gen-format, formats)))
    `extern-defns => splice(to-list(seq(gen-extern-defn, extern-defns, 0 to false)))])

defn gen-fill (template, bindings:Seqable<KeyValue>) :
  val bindings* = to-tuple(cat(bindings, GEN-DEFAULT-BINDINGS))
  fill-template(template, bindings*)

val GEN-DEFAULT-BINDINGS = [
  qualified(`stz/vm/set)
  qualified(`stz/vm/vm-registers)
  qualified(`stz/vm/call-extern)  
  qualified(`stz/vm/EXTERN-TABLE)
  qualified(`stz/vm/EXTERN-DEFN-TABLE)
  qualified(`stz/vm/FORMAT-TABLE)
  qualified(`stz/vm/CallFormat)
  qualified(`stz/vm-ir/VMByte)
  qualified(`stz/vm-ir/VMInt)
  qualified(`stz/vm-ir/VMLong)
  qualified(`stz/vm-ir/VMFloat)
  qualified(`stz/vm-ir/VMDouble)
  qualified(`core/Int)
  qualified(`core/Long)]

defn qualified (s:Symbol) :
  val [p, n] = qualifier(s)
  n => deep(s)

;============================================================
;=================== Analysis ===============================
;============================================================

defn call-formats (f:VMFunc) -> Seq<CallFormat> :
  ;Construct definition table
  val deftable = to-inttable<VMDef> $
    for def in defs(f) seq :
      id(def) => def
  ;Immediate type
  defn imm-type (x:VMImm) :
    match(x:Local) : type(deftable[index(x)])
    else : type(x)
  defn imm-type (f:False) :
    false
  ;Scan through instructions for Call-C
  for ins in ins(f) seq? :
    match(ins:CallCIns) :    
      val xtypes = map(imm-type, xs(ins))
      val ytypes = map(imm-type, ys(ins))
      One(CallFormat(xtypes, ytypes))
    else : None()

defn call-formats (prog:VMPackage) :
  val formats = for f in funcs(prog) seq-cat :
    match(func(f)) :
      (f:VMFunc) : call-formats(f)
      (f:VMMultifn) : seq-cat(call-formats{value(_)}, funcs(f))
  unique(seq(coalesce, formats))

;============================================================
;===================== Driver ===============================
;============================================================

public defn gen-vm-bindings (vmpackages:Seqable<VMPackage>) :
  val vmexterns = Vector<VMExtern>()
  val formats = Vector<CallFormat>()
  val externdefns = Vector<VMExternDefn>()
  for package in vmpackages do :
    add-all(vmexterns, externs(package))
    add-all(formats, call-formats(package))
    add-all(externdefns, extern-defns(package))
  gen-bindings(vmexterns, formats, externdefns)

;============================================================
;===================== Scratch ==============================
;============================================================
;<COMMENT>
defn main () :
  val filename = command-line-arguments()[1]
  val output = command-line-arguments()[2]
  val vmexterns = Vector<VMExtern>()
  val formats = Vector<CallFormat>()
  for package in read-vm-packages(filename) do :
    add-all(vmexterns, externs(package))
    add-all(formats, call-formats(package))
  val bindings = gen-bindings(vmexterns, formats)
  spit(output, bindings)

main()
;<COMMENT>