defpackage stz/defs-db-ir :
  import core
  import collections
  import stz/visibility
  import stz/package-stamps

;===============================================================================
;================================ Types ========================================
;===============================================================================
doc: "The reserved words and definitions in a stanza project."
public defstruct DefinitionsDatabase : 
  reserved-words:Tuple<String>
  packages:Tuple<PackageDefinitions>
  unresolved-symbols:Tuple<UnresolvedSymbol>

doc: "All definitions within a package."
public defstruct PackageDefinitions :
  name:Symbol
  stamp:PackageStamp
  source: SrcDefinitionSource
  imports:Tuple<PackageImport>
  definitions:Tuple<Definition>
  documentation?:False|String

doc: "A single defined item."
public defstruct Definition <: Equalable : 
  name:Symbol
  file-info:FileInfo 
  kind:SrcDefinitionKind 
  visibility:Visibility
  annotation?:False|DefinitionAnnotation  
  documentation?:False|String

doc: "Represents the kind of item associated with a definition."
public defenum SrcDefinitionKind : 
  SrcDefUnknown
  SrcDefMulti 
  SrcDefMethod 
  SrcDefFunction 
  SrcDefVariable
  SrcDefType
  SrcDefPackage

doc: "Represents whether the definition was found in a source file or pkg."
public public defenum SrcDefinitionSource : 
  PkgDefinition 
  SrcDefinition

doc: "A DefinitionAnnotation is some definition-specific \
      metadata that is useful for tooling, for example \
      function signatures."
public deftype DefinitionAnnotation <: Equalable

doc: "Annotations given to defn objects."
public defstruct DefnAnnotation <: DefinitionAnnotation :
  targs:Tuple<Symbol>,
  args:Tuple<FnArgAnnotation>
  return-type?:Symbol|False

doc: "A single function argument."
public defstruct FnArgAnnotation <: Equalable :
  name?:Symbol|False
  type?:Symbol|False
  keyword?:True|False
  variadic?:True|False
  optional?:True|False

doc: "An imported package and its prefixes."
public defstruct PackageImport : 
  name:Symbol
  prefixes:Tuple<PackageImportPrefix>
  only:False|Tuple<Symbol>
  forward:True|False

doc: "A prefix in a package import."
public defstruct PackageImportPrefix : 
  names:False|Tuple<Symbol>
  prefix:String

doc: "An unresolved symbol in a source file."
public defstruct UnresolvedSymbol :
  symbol:Symbol
  info:FileInfo|False

;------------------------------------------------------------
;----------------- Equality ---------------------------------
;------------------------------------------------------------

defmethod equal? (l:Definition, r:Definition) :
  name(l)        == name(r)       and 
  file-info(l)   == file-info(r)  and  
  kind(l)        == kind(r)       and  
  visibility(l)  == visibility(r) and
  annotation?(l) == annotation?(r)

defmethod equal? (l:DefnAnnotation, r:DefnAnnotation) : 
  return-type?(l) == return-type?(r)  and 
  all?(equal?, args(l), args(r))      and 
  all?(equal?, targs(l), targs(r))

defmethod equal? (l:FnArgAnnotation, r:FnArgAnnotation) : 
  name?(l) == name?(r) and 
  type?(l) == type?(r) and
  keyword?(l) == keyword?(r) and
  variadic?(l) == variadic?(r) and
  optional?(l) == optional?(r)

;===============================================================================
;============================== Printers =======================================
;===============================================================================
defmethod print (o:OutputStream, ddb:DefinitionsDatabase):
  print(o, "DefinitionsDatabase:")
  val o2 = IndentedStream(o)
  lnprint-block(o2, "Reserved Words", reserved-words(ddb))
  lnprint-block(o2, "Packages", packages(ddb))
  lnprint-block(o2, "Unresolved Symbols", unresolved-symbols(ddb))


defmethod print (o:OutputStream, defs:PackageDefinitions) :
  print(o, "PackageDefinitions %_ :" % [name(defs)])
  val o2 = IndentedStream(o)
  lnprint(o2, "stamp: %_" % [stamp(defs)])
  lnprint(o2, "source: %_" % [source(defs)])
  lnprint(o2, "documentation?:\n%_" % [Indented(documentation?(defs))])  
  do(lnprint{o2, _}, imports(defs))
  do(lnprint{o2, _}, definitions(defs))

defmethod print (o:OutputStream, def:Definition) :
  print(o, "Definition %_ defined at %_:" % [name(def), file-info(def)])
  val oo = IndentedStream(o)
  lnprint(oo, "kind: %_" % [kind(def)])
  lnprint(oo, "visibility: %_" % [visibility(def)])
  lnprint(oo, "annotation?: %_" % [annotation?(def)])
  lnprint(oo, "documentation?:\n%_" % [Indented(documentation?(def))])

defmethod print (o:OutputStream, a:FnArgAnnotation) : 
  match(name?(a), type?(a)) : 
    (n:Symbol, t:False)  : print(o, n)
    (n:False,  t:Symbol) : print(o, "_:%_" % [t])
    (n:Symbol, t:Symbol) : print(o, "%_:%_" % [n, t])
    (n:False,  t:False)  : print(o, "?")
  if optional?(a):
    print(o, " = ?")
  if variadic?(a):
    print(o, " ...")

defmethod print (o:OutputStream, f:DefnAnnotation) : 
  if not empty?(targs(f)) : 
    print(o, "<%,>" % [targs(f)])
  ; Split on keyword/non-keyword
  val grps = map(to-tuple, split(keyword?, args(f)))
  val kwArgs = grps[0]
  val posArgs = grps[1]
  print(o, " (%," % [posArgs])
  if length(kwArgs) > 0:
    print(o, " -- %,)" % [kwArgs])
  else:
    print(o, ")")
  val return-type? = return-type?(f)
  match(return-type?:Symbol) : 
    print(o, " -> %_" % [return-type?])

; Note: does not use forwarding information or import list
defmethod print (o:OutputStream, p:PackageImport) :
  val heading = to-string("import %_" % [name(p)])
  if empty?(prefixes(p)) :
    print(o, heading)
  else :
    print-block(o, to-string(heading), prefixes(p))

defmethod print (o:OutputStream, p:PackageImportPrefix) : 
  match(names(p)) : 
    (f:False) : 
      print(o, "prefix => %_" % [prefix(p)])
    (n:Tuple<Symbol>) : 
      print(o, "prefix(%,) => %_" % [n, prefix(p)])

defmethod print (o:OutputStream, e:UnresolvedSymbol) :
  print(o, "unresolved symbol `%~` at %_" % [symbol(e), info(e)])

defn lnprint-block (o:OutputStream, name:String, xs:Seqable) :
  print(o, "\n")
  print-block(o, name, xs)
  
defn print-block (o:OutputStream, name:String, xs:Seqable) :
  val xs-items = to-seq(xs)
  if empty?(xs-items) :
    print(o, "%_ : ()" % [name])
  else :
    print(o, "%_ :" % [name])
    val o2 = IndentedStream(o)
    do(lnprint{o2, _}, xs-items)