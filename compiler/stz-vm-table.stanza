defpackage stz/vm-table :
  import core
  import collections
  import stz/vm-ir

;============================================================
;================ Definition of all Tables ==================
;============================================================

lostanza deftype VMTable :
  ;Globals
  global-table:ref<IntTable<Int>>    ;Will not be needed after indices are dense
  num-globals:int
  globals:ptr<long>
  global-roots:ref<Vector<Int>>

  ;Constants
  const-table:ref<IntTable<Int>>     ;Will not be needed after indices are dense
  num-consts:int
  consts:ptr<long>
  new-consts:ptr<long>
  consts-data:ptr<byte>

  ;Data
  data-table:ref<IntTable<Int>>      ;Will not be needed after indices are dense
  num-data:int
  data:ptr<long>
  
  ;Functions
  function-table:ref<IntTable<Int>>  ;Will not be needed after indices are dense
  instructions:ref<Vector<LinkedIns>>

  ;Externs
  extern-table:ref<IntTable<Int>>    ;Will not be needed after indices are dense
  num-externs:int
  externs:ptr<long>

;============================================================
;======================= Initialization =====================
;============================================================

lostanza val VOID-MARKER:long = VOID-TYPE-ID.value << 3L + MARKER-TAG-BITS
lostanza defn void-mem (n:int) -> ptr<long> :
  val mem:ptr<long> = call-c clib/malloc(n * 8)
  for (var i:int = 0, i < n, i = i + 1) :
    mem[i] = VOID-MARKER
  return mem

lostanza defn VMTable () -> ref<VMTable> :
  return new VMTable{
    ;Globals
    IntTable<Int>(),
    0,
    0L as ptr<long>,
    Vector<Int>(),

    ;Constants
    IntTable<Int>(),
    0,
    0L as ptr<long>,
    0L as ptr<long>,
    0L as ptr<byte>,

    ;Data
    IntTable<Int>(),
    0,
    0L as ptr<long>,

    ;Functions
    IntTable<Int>(),
    Vector<LinkedIns>(),

    ;Externs
    IntTable<Int>()
    0,
    0L as ptr<long>}

;============================================================
;============================================================
;============================================================