defpackage stz/basic-ops :
  import core
  import collections

public deftype BasicOp

;HiStanza comparison operations
public defstruct RefEqOp <: BasicOp
public defstruct RefNeOp <: BasicOp

;LoStanza arithmetic operations
public defstruct AddOp <: BasicOp
public defstruct SubOp <: BasicOp
public defstruct MulOp <: BasicOp
public defstruct DivOp <: BasicOp
public defstruct ModOp <: BasicOp
public defstruct AndOp <: BasicOp
public defstruct OrOp <: BasicOp
public defstruct XorOp <: BasicOp
public defstruct NotOp <: BasicOp
public defstruct ShlOp <: BasicOp
public defstruct ShrOp <: BasicOp
public defstruct AshrOp <: BasicOp
public defstruct NegOp <: BasicOp
public defstruct EqOp <: BasicOp
public defstruct NeOp <: BasicOp
public defstruct LtOp <: BasicOp
public defstruct GtOp <: BasicOp
public defstruct LeOp <: BasicOp
public defstruct GeOp <: BasicOp
public defstruct UleOp <: BasicOp
public defstruct UltOp <: BasicOp
public defstruct UgtOp <: BasicOp
public defstruct UgeOp <: BasicOp

;GC intrinsics
public defstruct LowestZeroBitCountOp <: BasicOp
public defstruct TestBitOp <: BasicOp
public defstruct TestAndSetBitOp <: BasicOp
public defstruct TestAndClearBitOp <: BasicOp
public defstruct SetBitOp <: BasicOp
public defstruct ClearBitOp <: BasicOp

;System operations
public defstruct FlushVMOp <: BasicOp
public defstruct GCOp <: BasicOp
public defstruct PrintStackTraceOp <: BasicOp
public defstruct CollectStackTraceOp <: BasicOp
public defstruct CRSPOp <: BasicOp

;============================================================
;====================== Utilities ===========================
;============================================================

public defn arity (op:BasicOp) :
  match(op) :
    (op:RefEqOp) : 2
    (op:RefNeOp) : 2
    (op:AddOp) : 2
    (op:SubOp) : 2
    (op:MulOp) : 2
    (op:DivOp) : 2
    (op:ModOp) : 2
    (op:AndOp) : 2
    (op:OrOp) : 2
    (op:XorOp) : 2
    (op:ShlOp) : 2
    (op:ShrOp) : 2
    (op:AshrOp) : 2
    (op:EqOp) : 2
    (op:NeOp) : 2
    (op:LtOp) : 2
    (op:GtOp) : 2
    (op:LeOp) : 2
    (op:GeOp) : 2
    (op:UleOp) : 2
    (op:UltOp) : 2
    (op:UgtOp) : 2
    (op:UgeOp) : 2
    (op:NegOp) : 1
    (op:NotOp) : 1
    (op:LowestZeroBitCountOp) : 1
    (op:TestBitOp) : 2
    (op:TestAndSetBitOp) : 2
    (op:TestAndClearBitOp) : 2
    (op:SetBitOp) : 2
    (op:ClearBitOp) : 2
    (op:GCOp) : 1
    (op:PrintStackTraceOp) : 1
    (op:CollectStackTraceOp) : 1
    (op:FlushVMOp) : 0
    (op:CRSPOp) : 0


;============================================================
;===================== Printer ==============================
;============================================================

defmethod print (o:OutputStream, op:BasicOp) :
  print{o, _} $ match(op) :
    (op:RefEqOp) : "ref-eq"
    (op:RefNeOp) : "ref-ne"
    (op:AddOp) : "add"
    (op:SubOp) : "sub"
    (op:MulOp) : "mul"
    (op:DivOp) : "div"
    (op:ModOp) : "mod"
    (op:AndOp) : "and"
    (op:OrOp) : "or"
    (op:XorOp) : "xor"
    (op:NotOp) : "not"
    (op:ShlOp) : "shl"
    (op:ShrOp) : "shr"
    (op:AshrOp) : "ashr"
    (op:EqOp) : "eq"
    (op:NeOp) : "ne"
    (op:LtOp) : "lt"
    (op:GtOp) : "gt"
    (op:LeOp) : "le"
    (op:GeOp) : "ge"
    (op:UleOp) : "ule"
    (op:UltOp) : "ult"
    (op:UgtOp) : "ugt"
    (op:UgeOp) : "uge"
    (op:NegOp) : "neg"
    (op:LowestZeroBitCountOp) : "lowest-zero-bit-count"
    (op:TestBitOp) : "test-bit"
    (op:TestAndSetBitOp) : "test-and-set-bit"
    (op:TestAndClearBitOp) : "test-and-clear-bit"
    (op:SetBitOp) : "set-bit"
    (op:ClearBitOp) : "clear-bit"
    (op:FlushVMOp) : "flush-vm"
    (op:GCOp) : "collect-garbage"
    (op:PrintStackTraceOp) : "print-stack-trace"
    (op:CollectStackTraceOp) : "collect-stack-trace"
    (op:CRSPOp) : "crsp"

;============================================================
;===================== Reader ===============================
;============================================================

defsyntax basic-ops :
  public defproduction basic-op : BasicOp
  defrule basic-op = (?x:#basic-op2) : x
  defrule basic-op = (?x:#basic-op1) : x
  defrule basic-op = (?x:#basic-op0) : x

  public defproduction basic-op2 : BasicOp
  defrule basic-op2 = (add) : AddOp()
  defrule basic-op2 = (sub) : SubOp()
  defrule basic-op2 = (mul) : MulOp()
  defrule basic-op2 = (div) : DivOp()
  defrule basic-op2 = (mod) : ModOp()
  defrule basic-op2 = (and) : AndOp()
  defrule basic-op2 = (or) : OrOp()
  defrule basic-op2 = (xor) : XorOp()
  defrule basic-op2 = (shl) : ShlOp()
  defrule basic-op2 = (shr) : ShrOp()
  defrule basic-op2 = (ashr) : AshrOp()
  defrule basic-op2 = (eq) : EqOp()
  defrule basic-op2 = (ne) : NeOp()
  defrule basic-op2 = (lt) : LtOp()
  defrule basic-op2 = (gt) : GtOp()
  defrule basic-op2 = (le) : LeOp()
  defrule basic-op2 = (ge) : GeOp()
  defrule basic-op2 = (ule) : UleOp()
  defrule basic-op2 = (ult) : UltOp()
  defrule basic-op2 = (ugt) : UgtOp()
  defrule basic-op2 = (uge) : UgeOp()
  defrule basic-op2 = (ref-eq) : RefEqOp()
  defrule basic-op2 = (ref-ne) : RefNeOp()
  defrule basic-op2 = (test-bit) : TestBitOp()
  defrule basic-op2 = (test-and-set-bit) : TestAndSetBitOp()
  defrule basic-op2 = (test-and-clear-bit) : TestAndClearBitOp()
  defrule basic-op2 = (set-bit) : SetBitOp()
  defrule basic-op2 = (clear-bit) : ClearBitOp()

  public defproduction basic-op1 : BasicOp
  defrule basic-op1 = (not) : NotOp()
  defrule basic-op1 = (neg) : NegOp()
  defrule basic-op1 = (lowest-zero-bit-count) : LowestZeroBitCountOp()
  defrule basic-op1 = (collect-garbage) : GCOp()
  defrule basic-op1 = (print-stack-trace) : PrintStackTraceOp()
  defrule basic-op1 = (collect-stack-trace) : CollectStackTraceOp()

  public defproduction basic-op0 : BasicOp
  defrule basic-op0 = (flush-vm) : FlushVMOp()
  defrule basic-op0 = (crsp) : CRSPOp()