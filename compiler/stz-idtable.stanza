defpackage stz/idtable :
  import core
  import collections
  import stz/namemap
  import stz/il-ir
  import stz/dl-ir

public deftype IDTable
public defmulti get (t:IDTable, id:TypeId) -> Int
defmulti add (t:IDTable, id:TypeId, n:Int) -> False

public defn IDTable () :
  val table = HashTable<TypeId,Int>()
  new IDTable :
    defmethod get (this, id:TypeId) : table[id]
    defmethod add (this, id:TypeId, n:Int) :
      fatal("Key %_ already exists." % [id]) when key?(table,id)
      table[id] = n

public defn import (t:IDTable, namemap:NameMap) :
  for e in toplevel(namemap) do :
    match(type(e):TypeE|LTypeE) :
      val id = TypeId(package(e), name(e))
      add(t, id, n(e))

public defn import (t:IDTable, ipackage:IPackage) :
  import(t, namemap(ipackage))

public defn import (t:IDTable, exports:Seqable<Export>) :
  for e in exports do :
    val id = id(rec(e))
    match(id:TypeId) :
      add(t, id, n(e))

var CURRENT-IDTABLE : IDTable|False = false
public defn typeid (id:TypeId) -> Int :
  (CURRENT-IDTABLE as IDTable)[id]

public defn set-idtable<?T> (f:() -> ?T, idtable:IDTable) :
  let-var CURRENT-IDTABLE = idtable :
    f()