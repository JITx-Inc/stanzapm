defpackage test-dyn-graph :
  import core
  import collections
  import stz/dynamic-graph

defn parse-edge-sets (forms) :
  match-syntax(forms) :
    ((edgeset ?ids:_ : ((?srcs => ?dsts) @...)) @...) :
      to-tuple $ for (id in ids, src in srcs, dst in dsts) seq :
        val edges = to-tuple(seq(Edge, src, dst))
        EdgeSet(id as Int, edges)

defn main () :
  val g = DynamicGraph()
  defn test (edges, nodes:Tuple<Int>) :
    val update = update(g, GraphChange(parse-edge-sets(edges), nodes))
    println(g)
    println("Update: %_" % [update])

  test(
    `(edgeset 0 :
        0 => 1
        1 => 4
      edgeset 1 :
        2 => 5
        2 => 6
      edgeset 2 :
        0 => 2)
    [])

  test(
    `(edgeset 2 :
        2 => 0)
    [])

  test(
    `()
    [5])

main()