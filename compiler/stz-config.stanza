;See License.txt for details about licensing.

defpackage stz/config :
  import core
  import collections
  import parser
  import stz/params

defsyntax stanza-config :
  defn ut (x) : unwrap-token(x)

  defn PE (info:False|FileInfo, msg) :
    match(info) :
      (info:FileInfo) : Exception("%_: %_" % [info, msg])
      (info:False) : Exception(msg)

  defproduction sym: Symbol
  defrule sym = (?x) when ut(x) is Symbol : ut(x)
  
  defproduction string: String
  defrule string = (?x) when ut(x) is String : ut(x)

  defproduction string!: String
  defrule string! = (?s:#string) : s
  fail-if string! = () : PE(closest-info(), "Expected a string here.")

  defproduction platform!: Symbol
  defrule platform! = (?x:#sym) :
    try :
      ensure-supported-platform(x),
      x
    catch (e:Exception) :
      throw(PE(closest-info(), e))
  fail-if platform! = () :
    PE(closest-info(), "Expected a platform here.")

  public defproduction entry: False
  defrule entry = (install-dir = ?path:#string!) :
    STANZA-INSTALL-DIR = path
  defrule entry = (platform = ?p:#platform!) :
    OUTPUT-PLATFORM = p
  defrule entry = (pkg-dirs = (?paths:#string ...)) :
    STANZA-PKG-DIRS = append(paths, STANZA-PKG-DIRS)
  defrule entry = (fast-pkg-dirs = (?paths:#string ...)) :
    STANZA-FAST-PKG-DIRS = append(paths, STANZA-FAST-PKG-DIRS)
  fail-if entry = () :
    PE(closest-info(), "Invalid configuration rule.")

var STANZA-CONFIGURED? = false
public defn read-config-file () :
  if not STANZA-CONFIGURED? :
    ;Extract parameters from config file
    label<False> break :
      defn extract-from-file (filename:String) :
        if file-exists?(filename) :
          val forms = read-file(filename)
          parse-syntax[stanza-config / #entry ...](forms)
          break(false)

      defn extract-from-env (name:String) :
        match(get-env(name)) :
          (path:String) : extract-from-file(norm-path("%_/.stanza" % [path]))
          (path:False) : false

      extract-from-file(".stanza")
      extract-from-env("STANZA_CONFIG")
      extract-from-env("HOME")
      throw(Exception("Could not locate .stanza configuration file."))

    ;Verify parameters
    val license-file = norm-path("%_/License.txt" % [STANZA-INSTALL-DIR])
    if not file-exists?(license-file) :
      throw $ Exception(STANZA-LICENSE-MSG % [STANZA-INSTALL-DIR, license-file])

    ;Set configured to true
    STANZA-CONFIGURED = true

val STANZA-LICENSE-MSG = "Stanza install directory is set to %_, but could not locate license file at %_."   