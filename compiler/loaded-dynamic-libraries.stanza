;<doc>=======================================================
;================= Loaded Dynamic Libraries =================
;============================================================

Represents all the libraries that have been loaded by the Stanza
system. Used to look up addresses of extern definitions.

# Core State #

  Package to library table:

    mypackage => ["mylib", "mylib2", ...]
    ...

  List of all loaded libraries:

    "mylib" => DynamicLibrary1
    "gzip" => DynamicLibrary2
    ....

  Static Extern Table:

    "printf" => 0
    "memcpy" => 1
    ...

  Symbol List:

    SymbolProperties for "lib1/printf"
    SymbolProperties for "lib1/world"
    ...

  Extern Symbol Table:

    ExternSymbol("lib1", `printf) => 0
    ExternSymbol("lib1", `world) => 1
    ...

  Search folders:

    "path/lib/dlls"
    "path/lib2/dlls"

;============================================================
;=======================================================<doc>

defpackage stz/loaded-dynamic-libraries :
  import core
  import collections
  import core/dynamic-library
  import core/parsed-path
  import stz/utils

;============================================================
;========================== API =============================
;============================================================

;Representation of the library itself.
public deftype LoadedDynamicLibraries

;Set the ordered sequence of folders to look in to find libraries.
public defmulti set-library-folders (libs:LoadedDynamicLibraries, folders:Tuple<String>) -> False

;Load the given dynamic library. Throws exception if unsuccessful.
public defmulti load-libraries (libs:LoadedDynamicLibraries, package:Symbol, names:Tuple<String>) -> False

;Load the given symbols. Throws exception if unsuccessful.
public defmulti load-symbols (libs:LoadedDynamicLibraries, symbols:Tuple<ExternSymbol>) -> False

;Retrieve the id of the already-loaded symbol.
public defmulti id (libs:LoadedDynamicLibraries, package:Symbol, symbol:Symbol) -> Int

;Retrieve the address of an extern.
public defmulti extern-address (libs:LoadedDynamicLibraries, id:Int) -> Long

;Represents an extern symbol in some Stanza package.
public defstruct ExternSymbol <: Hashable & Equalable :
  package: Symbol
  symbol: Symbol
with:
  hashable => true
  equalable => true

;============================================================
;===================== Implementation =======================
;============================================================

public defn LoadedDynamicLibraries () :

  ;Table holding the libraries that each package requires.
  val package-libraries-table = HashTable<Symbol,Tuple<String>>()

  ;Table holding all the loaded libraries.
  val libraries = HashTable<String,DynamicLibrary>()

  ;The static extern table.
  val static-extern-table = extern-id-table()

  ;Symbol list.
  val symbol-list = Vector<SymbolProperty>()

  ;Extern symbol table.
  val extern-symbol-table = HashTable<ExternSymbol,Int>()

  ;Search folders.
  var search-folders:Tuple<String> = []

  ;Helper: Add a new extern symbol
  defn add-symbol (sym:ExternSymbol, props:SymbolProperty) :
    add(symbol-list, props)
    extern-symbol-table[sym] = length(symbol-list) - 1

  ;Return the type.
  new LoadedDynamicLibraries :

    defmethod set-library-folders (this, fs:Tuple<String>) :
      search-folders = fs

    defmethod load-libraries (this, package:Symbol, names:Tuple<String>) :
      package-libraries-table[package] = names
      for name in names do :
        if not key?(libraries, name) :
          val lib =
            try : dynamic-library-open(search-folders, name)
            catch (e) : throw(LoadLibraryError(package, name, search-folders))
          libraries[name] = lib

    defmethod load-symbols (this, symbols:Tuple<ExternSymbol>) :

      ;Hold any symbols that weren't able to be loaded
      ;to generate an error message at the end.
      val missing = Vector<MissingExternSymbol>()

      ;Loop through the symbols and load any that aren't already
      ;in the extern-symbol-table.
      for sym in symbols do :
        if not key?(extern-symbol-table, sym) :

          ;Determine whether the given package uses the static extern table
          ;for its symbols or whether its dynamically loaded from a lib.
          ;Case: Static extern table if no libraries associated with it.
          val libs = get?(package-libraries-table, package(sym), [])
          val load-from-static-lib? = empty?(libs)

          ;Case: Load from static extern table.
          if load-from-static-lib? :
            match(get?(static-extern-table, symbol(sym))) :
              (index:Int) : add-symbol(sym, static-symbol-properties(index))
              (f:False) : add(missing, MissingExternSymbol(sym, libs))
              
          ;Case: Load from dynamic lib.          
          else :
            ;Loop through libs and find the first library that it can be
            ;loaded from. If none of the libraries contain the symbol, then add
            ;the symbol to the 'missing' list.
            label break :
              for lib in libs any? :
                try :
                  val dysym = dynamic-library-symbol(libraries[lib], to-string(symbol(sym)))
                  add-symbol(sym, properties(dysym))
                  break()
                catch (e) :
                  false
              add(missing, MissingExternSymbol(sym, libs))

      ;Issue an error for any missing symbols.
      if not empty?(missing) :
        throw(LoadSymbolsError(to-tuple(missing)))

    defmethod id (this, package:Symbol, sym:Symbol) :
      val extsym = ExternSymbol(package, sym)
      if not key?(extern-symbol-table,extsym) :
        fatal("Extern symbol %_ not yet loaded." % [extsym])
      extern-symbol-table[extsym]

    defmethod extern-address (this, id:Int) :
      address(symbol-list[id])

;============================================================
;================== Searching for Libraries =================
;============================================================

;Look in the given folders for the dynamic library with the
;given name. If the name contains a slash then skip the search
;folders.
defn dynamic-library-open (folders:Tuple<String>, name:String) -> DynamicLibrary :
  label<DynamicLibrary> return :
    if contains?(name, '/') :
      dynamic-library-open(name)
    else :
      for folder in folders do :
        val folder-path = parse-path(folder)
        val path = force-slash(to-string(relative-to-dir(folder-path, name)))
        return(dynamic-library-open(path)) when file-exists?(path)
      dynamic-library-open(name)

;dlopen(path) implements the following logic:
;- If 'path' does not contain any slashes, then it
;  performs a system-wide search for the library.
;- If 'path' does contain slashes, then it is interpreted
;  as a proper absolute or relative path, and searches
;  only in that location.
;This function forces a slash to be in the name if
;there isn't one already.
defn force-slash (path:String) -> String :
  if contains?(path, '/') : path
  else : string-join(["./" path])

;============================================================
;===================== Symbol Properties ====================
;============================================================

;Holds the properties of a dynamically loaded or static extern symbol.
;- address: The memory address of the symbol. Can either be a
;  dynamically loaded address (for DynamicSymbol) or a static
;  program address (for statically-compiled symbols).
lostanza deftype SymbolProperty :
  address:ptr<?>

;Retrieve the address as a 64-bit Long.
lostanza defn address (p:ref<SymbolProperty>) -> ref<Long> :
  return new Long{p.address as long}

;Extract the address from the given symbol.
lostanza defn properties (sym:ref<DynamicSymbol>) -> ref<SymbolProperty> :
  return new SymbolProperty{sym.address}

;Extract the address from the given static extern symbol.
lostanza defn static-symbol-properties (index:ref<Int>) -> ref<SymbolProperty> :
  return new SymbolProperty{extern-address(index.value) as ptr<?>}

;============================================================
;========================= Errors ===========================
;============================================================

;Represents all errors occurring during dynamic library loading.
public deftype DynamicLibrariesError <: Exception

;Occurs when we are unable to load a library.
public defstruct LoadLibraryError <: DynamicLibrariesError :
  package:Symbol
  library:String
  folders:Tuple<String>

defmethod print (o:OutputStream, e:LoadLibraryError) :
  print(o, "Error occurred when attempting to load dynamic library %~ which is \
            required by package '%~'." % [library(e), package(e)])
  if not empty?(folders(e)) :
    val folder-strs = "%n" % [seq(written,folders(e))]
    print(o, " Original list of search folders are:\n%_" % [Indented(folder-strs)])

;Occurs when symbols could not be loaded from libraries.
public defstruct LoadSymbolsError <: DynamicLibrariesError :
  symbols:Tuple<MissingExternSymbol>

;Represents an extern symbol that could not be loaded, and where
;we attempted to load it from.
public defstruct MissingExternSymbol :
  exsymbol:ExternSymbol
  libraries:Tuple<String>

defmethod print (o:OutputStream, e:LoadSymbolsError) :
  ;Accumulate all messages here.
  val messages = Vector<?>()

  ;Group symbols by the libraries they're from.
  val groups = group-by(libraries, symbols(e))

  ;Helper for collecting names of symbols.
  defn symbol-names (ss:Seqable<MissingExternSymbol>) :
    val names = for s in ss seq : symbol(exsymbol(s))
    Indented("%n" % [names])

  ;Generate messages for all symbols from libraries.
  val lib-groups = for g in groups filter : not empty?(key(g))
  for entry in lib-groups do :
    add(messages, "The following extern symbols could not be loaded from dynamic libraries %,:\n%_" % [
      seq(written,key(entry)), symbol-names(value(entry))])

  ;Generate message for all symbols expecting to be statically included.
  if key?(groups, []) :
    val msg = "The following extern symbols were expected to be statically-included in the current compiler, \
               but were not found:\n%_" % [symbol-names(groups[[]])]
    add(messages, msg)

  ;Print the final message.
  print-all(o, join(messages, "\n\n"))
