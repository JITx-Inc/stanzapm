defpackage stz/proj-variable-substitution :
  import core
  import collections
  import stz/proj-ir
  import stz/proj-stage0
  import stz/proj-errors

;============================================================
;================ Build Variable Table ======================
;============================================================

;Fully-evaluate all variables in the given files, and produce
;the final table of variable substitutions.

public defn build-variable-table (fs:Seqable<ProjFileS0>) -> HashTable<Symbol,ProjValue> :
  ;Track the current values of all variables.
  val symbol-table = HashTable<Symbol,ProjValue>()

  ;Accumulate errors
  val errors = Vector<ProjFileError>()

  ;Evaluate all var statements in the given stmt.
  defn eval (s:ProjStmt, proj-file-id:Int) -> False :
    match(s) :
      (s:IncludedStmtsS0) :
        for stmt in stmts(s) do :
          eval(stmt, /proj-file-id(s))
      (s:VarStmtS0) :
        defn lookup-var (name:Symbol) : get?(symbol-table,name)
        val value* = sub-vars(lookup-var, value(s), proj-file-id, errors)
        symbol-table[name(s)] = value*
      (s) :
        false

  ;Evaluate all statements in all files.
  for f in fs do :
    do(eval{_, id(f)}, stmts(f))

  ;Throw any errors, and return the variable table.
  throw-proj-file-errors?(errors)
  symbol-table

;============================================================
;============ Variable Substitution on File =================
;============================================================

;Perform variable substitution in the given file, with the
;provided symbol table.
;This function is meant to be used twice:
;1) After we build the initial variable table, and upon the
;   isolated foreign package params statements.
;2) After we compute the full set of variable substitutions, and
;   upon the remaining set of statements.

public defn variable-substitution (f:ProjFileS0,
                                   symbol-table:HashTable<Symbol,ProjValue>) -> ProjFileS0 :
  ;Accumulate errors
  val errors = Vector<ProjFileError>()

  ;Perform substitution on the given statement.
  defn sub-stmt-vars (s:ProjStmt, proj-file-id:Int) -> ProjStmt :
    match(s) :
      (s:IncludedStmtsS0) :
        val result = for item in s map :
          sub-stmt-vars(item as ProjStmt, /proj-file-id(s))
        result as IncludedStmtsS0
      (s) :
        defn lookup-var (name:Symbol) : get?(symbol-table,name)
        sub-vars(lookup-var, s, proj-file-id, errors)

  ;Launch!
  val stmts* = map(sub-stmt-vars{_, id(f)}, stmts(f))
  throw-proj-file-errors?(errors)
  sub-stmts(f, stmts*)

;============================================================
;============= Variable Substitution on Value ===============
;============================================================

;Perform variable substitution on the given value.
;Used to analyze default values.
public defn variable-substitution (v:ProjValue,
                                   symbol-table:HashTable<Symbol,ProjValue>,
                                   errors:Vector<ProjFileError>) -> ProjValue :
  defn lookup-var (name:Symbol) : get?(symbol-table,name)
  sub-vars(lookup-var, v, 0, errors)

;============================================================
;========== Variable Substitution within Statement ==========
;============================================================

;Perform variable substitution on the given statement.
;Just calls the sub-vars function recursively on all nested
;ProjValue. Cannot be called on IncludedStmtsS0 as that
;one contains nested statements.

defn sub-vars (f:Symbol -> ProjValue|False,
               stmt:ProjStmt,
               proj-file-id:Int,
               errors:Vector<ProjFileError>) -> ProjStmt :
  ;Sanity check.
  if stmt is IncludedStmtsS0 :
    fatal("Illegal input.")
  ;Perform substitution within item.
  defn subvalue (v:ProjItem) -> ProjItem :
    sub-vars(f, v as ProjValue, proj-file-id, errors) as ProjValue
  map(subvalue, stmt) as ProjStmt

;============================================================
;=============== Variable within ProjValue ==================
;============================================================

;Substitutes variables in the given ProjValue.
;This function is guaranteed to succeed but the return
;result may contain dummy values.
;
;This function contains built-in support for looking up:
;  - Special placeholders {.} and {WORKDIR}
;  - Environment variables
;
;- f: The function for looking up the replacement value
;  given a variable name. Allowed to fail and return false if
;  no substitution can be found.

defn sub-vars (f:Symbol -> ProjValue|False,
               v:ProjValue,
               proj-file-id:Int,
               errors:Vector<ProjFileError>) -> ProjValue :

  ;Lookup a variable with the given name.
  defn lookup-var (info:FileInfo|False, name:Symbol) -> ProjValue :
    match(f(name)) :
      ;Case: A variable exists with that name.
      (v:ProjValue) :
        v
      ;Case: No variable exists, so then check the environment variables.
      (f:False) :
        ;Case: Is it one of the special variables?
        if name == `. :
          ProjDir(proj-file-id, info)
        else if name == `WORKDIR :
          WorkDir(info)
        else if name == `STANZA_DIR :
          StanzaDir(info)
        ;Case: Finally check the environment variables.
        else :
          val env-v = get-env(to-string(name))
          ;Case: An environment variable exists, so return that.
          match(env-v:String) :
            AtomValue(info, env-v)
          ;Case: No variable exists.
          else :
            ;Record error.
            val msg = "Cannot resolve variable %_." % [name]
            add(errors, ProjFileError(info, to-string(msg)))
            ;Return dummy value.
            AtomValue(info, "")

  ;Substitute all curlies in the given string.
  defn sub-vars-in-string (info:FileInfo|False, str:String) -> ProjValue :
    within name = sub-curly(info, str, errors) :
      lookup-var(info,to-symbol(name))

  ;Recursively substitute variables in the entire ProjValue.
  defn sub-vars (v:ProjValue) -> ProjValue :
    match(v) :
      ;Lookup the replacement value for the given variable.
      (v:VarValue) :
        lookup-var(info(v), name(v))

      ;Replace the curlies in the strings within AtomValue.
      (v:AtomValue) :
        match(value(v)) :
          (value:String) : sub-vars-in-string(info(v), value)
          (value:Symbol) : v

      ;Call sub-curly recursively.
      (v) :
        val result = map(sub-vars{_ as ProjValue}, v)
        result as ProjValue

  ;Launch!
  sub-vars(v)


;============================================================
;================= Curly Substitution Utility ===============
;============================================================

;Substitutes appearances of {VARIABLE} in strings, and
;returns the results represented using either a AtomValue or a
;a SplicedString. If the string contains no curlies, then an AtomValue
;is returned, otherwise a SplicedString is returned.
;- f: The function for looking up the value of a variable.
;- info: The FileInfo of the returned AtomValue|SplicedString.

defn sub-curly (f:String -> ProjValue,
                info:FileInfo|False,
                s:String,
                errors:Vector<ProjFileError>) -> ProjValue :
  ;Case: No curlies at all.
  if index-of-char(s, '{') is False :
    AtomValue(info, s)
  else :
    ;Create a buffer to hold all the ProjValue.
    val buffer = Vector<ProjValue>()

    ;Iterate through the curlies
    let loop (start:Int = 0) :

      match(curly-bounds(s, start)) :
        ;Case: A curly was found.
        (c:PairedCurlies) :
          ;Add string up to curly
          if start < /start(c) :
            add(buffer, AtomValue(info, s[start to /start(c)]))

          ;Add replacement
          val variable = s[(/start(c) + 1) through (end(c) - 1)]
          val replacement = f(variable)
          match(check-valid-substitution(replacement)) :
            (illegal-type:String) :
              add(errors, IllegalSubstitution(info, variable, illegal-type))
            (f:False) :
              add(buffer, replacement)

          ;Continue past } char
          loop(end(c) + 1)

        ;Case: An escaped brace was found.
        (b:EscapedBrace) :
          ;Add string up to first { char.
          add(buffer, AtomValue(info, s[start through index(b)]))
          
          ;Continue past second { char.
          loop(index(b) + 2)

        ;Case: No curlies remaining.
        (f:False) :
          ;End of string, add the rest
          if start < length(s) :
            add(buffer, AtomValue(info, s[start to false]))

    ;Return spliced string
    SplicedString(info, to-tuple(buffer))

;Check whether the given value is allowed to be substituted into a string.
;Returns false if it can.
;If it cannot, returns the name of the illegal type that the value contains.
defn check-valid-substitution (v:ProjValue) -> String|False :
  match(v) :
    (v:AtomValue|ProjDir|WorkDir|StanzaDir|SplicedString) : false
    (v:ProjValues) : find-by<String>(seq(check-valid-substitution, values(v)))
    (v:ProjTuple) : check-valid-substitution(value(v))
    (v:ProjTableS0) : "table"
    (v:CondPlatform) : find-by<String>(seq(check-valid-substitution{value(_)}, values(v)))
    (v:CondLink) : find-by<String>(seq(check-valid-substitution{value(_)}, values(v)))

;============================================================
;================ Look for Curly Bounds =====================
;============================================================

;Represents a {...} pairing.
defstruct PairedCurlies :
  start:Int
  end:Int

;Represents an escaped brace: {{.
defstruct EscapedBrace :
  index:Int

;Helper: Determine the indices of the matched '{' and '}' characters
;in the string starting from index 'start'. For escape purposes:
;the character following the '{' cannot be another '{', thus
;{{my var}} does not count as matched braces.
defn* curly-bounds (s:String, start:Int) -> PairedCurlies|EscapedBrace|False :
  val i = index-of-char(s, start to false, '{')
  ;Case: Found an opening '{' in string.
  match(i:Int) :
    val j = index-of-char(s, (i + 1) to false, '}')
    ;Case: Found an ending '}' in string.
    match(j:Int) :
      ;Case: '{' immediately followed by another '{'.
      if get?(s, i + 1) == '{' :
        EscapedBrace(i)
      ;Case: Found '{' and '}' pairing.
      else :
        PairedCurlies(i, j)
    ;Case: No ending '}' remaining.
    else :
      false
  ;Case: No opening '{' remaining.
  else :
    false

;Helper: Return the character at the i'th position in 's', or
;false if it is past the bounds of the string.
defn get? (s:String, i:Int) -> Char|False :
  s[i] when i < length(s)