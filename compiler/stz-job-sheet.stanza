defpackage stz/job-sheet :
  import core
  import collections

;============================================================
;==================== Basic Structure =======================
;============================================================

public defstruct CompileJobSheet :
  optimized?: True|False
  stmts: Vector<JStmt> with: (init => Vector<JStmt>())

;============================================================
;================= New Job Sheet with Inputs ================
;============================================================

public defn CompileJobSheet (optimized?:True|False,
                             inputs:Seqable<Symbol|String>) :
  val sheet = CompileJobSheet(optimized?)
  add-all(sheet, seq(load-input, inputs))

;============================================================
;================== Categorize Input ========================
;============================================================

public defn load-input (input:Symbol|String) :
  match(input) :
    (input:Symbol) :
      LoadPkg(input)
    (input:String) :
      switch suffix?{input, _} :
        ".stanza" : LoadStanzaFile(input)
        ".pkg" : LoadPkgFile(input)
        ".fpkg" : LoadPkgFile(input)
        ".vmbindings" : LoadBindingsFile(input)
        ".proj" : LoadProjFile(input)
        else : throw(InvalidExtensionError(input))

;============================================================
;================== Read All IPackages ======================
;============================================================

public defn load-ipackages (js:CompileJobSheet) :
  for s in filter-by<LoadStanzaFile>(stmts(js)) do :
    ;Lex file into s-expressions
    val forms = read-file(filename(s))
    ;Expand macros
    val expanded = cons(`$begin, parse-syntax[core / #exps!](forms))
    ;Convert to IPackage using standard imports
    val core-imports = [IImport(`core), IImport(`collections)]
    set-ipackages(s, to-ipackages(expanded, core-imports))
    ;Set timestamp
    set-timestamp(s, time-modified(filename(s)))

;============================================================    
;==================== Load All Pkgs =========================
;============================================================    

public defn load-pkgs (js:CompileJobSheet) :
  for s in filter-by<LoadPkgFile>(stmts(js)) do :
    set-pkg(s, load-package(filename(s), false, optimized?(js)))
  for s in filter-by<LoadPkg>(stmts(js)) do :
    load-pkg(js, s)

defn load-pkg (js:CompileJobSheet, s:LoadPkg) :
  val filename = find-pkg!(name(s), optimized?(js))
  set-filename(s, filename)
  set-pkg(s, load-package(filename, name(s), optimized?(js)))  

;============================================================
;===================== Ensure Loaded ========================
;============================================================

public defn ensure-loaded (js:CompileJobSheet, package-name:Symbol) :
  ;Determine whether package loaded
  val loaded? = for s in stmts(js) any? :
    match(s) :
      (s:LoadStanzaFile) :
        for p in ipackages(s) as Tuple<IPackage> any? :
          name(p) == package-name
      (s:LoadPkgFile) :
        name(pkg as Pkg) == package-name
      (s:LoadPkg) :
        name(s) == package-name
      (s) : false
  ;If not loaded already
  val s = LoadPkg(package-name)
  load-pkg(js, s)
  add(stmts, js, s)
  pkg(s)

;============================================================
;=================== Load Bindings File =====================
;============================================================

public defn load-bindings (js:CompileJobSheet) :
  val bindings = collapse $
    for s in filter-by<LoadBindingsFile>(stmts(js)) seq :
      read-bindings(filename(s))
  add(stmts(js), LoadedBindings(bindings))

;============================================================
;=============== Convert Bindings to VMPackage ==============
;============================================================

public defn convert-bindings-to-vmpackage (js:CompileJobSheet) :
  val s = find!({_ is LoadedBindings}, stmts(js)) as LoadedBindings
  if not empty?(extern-defns(bindings(s))) :
    val pkg = to-vmpackage(bindings(s))
    for dependency in imported-packages(packageio(pkg)) do :
      ensure-loaded(js, dependency)
    set-vmpackage(s, pkg)

;============================================================
;===================== Compile to EL ========================
;============================================================

public defn compile-to-el (js:CompileJobSheet) :
  ;Rename packages
  
  

  ;Resolve packages

;============================================================
;=================== Registered Steps =======================
;============================================================

deftype JStmt

public defstruct LoadStanzaFile <: JStmt :
  filename: String
  timestamp: Long with: (setter => set-timestamp, init => void)
  ipackages: Tuple<IPackage> with: (setter => set-ipackages, init => void)  

public defstruct LoadPkgFile <: JStmt :
  filename: String
  pkg: Pkg with: (setter => set-pkg, init => void)

public defstruct LoadPkg <: JStmt :
  name: Symbol
  filename: String with: (setter => set-name, init => void)
  pkg: Pkg with: (setter => set-pkg, init => void)

public defstruct LoadBindingsFile <: JStmt :
  filename: String

public defstruct LoadedBindings <: JStmt :
  bindings: Bindings
  vmpackage: VMPackage|False with: (setter => set-vmpackage, init => false)

public defstruct LoadProjFile <: JStmt :
  filename: String

;============================================================
;======================= Utilities ==========================
;============================================================

defn do-load-stanza (f:LoadStanzaFile -> ?, js:CompileJobSheet) :
  do(f, filter-by<LoadStanzaFile>(stmts(js)))

defn map-ipackages (f:IPackage -> IPackage, js:CompileJobSheet) :
  for s in js do-load-stanza :
    set-ipackages(s, map(f, ipackages(s)))