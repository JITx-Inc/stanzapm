defpackage stz/dl :
  import core
  import collections
  import stz/dl-ir

deftype DEnv
defmulti set-live (e:DEnv, live:Seqable<Rec>) -> False
defmulti load (e:DEnv, ps:Tuple<PackageIO>) -> LoadResult

deftype LoadResult
defstruct LoadErrors <: LoadResult : (errors: Tuple<LoadError>)
defstruct LoadSuccess <: LoadResult

;============================================================
;============================================================
;============================================================

defn DEnv () :
  ;Initialize package table and live set
  val packages = HashTable<Symbol,PackageIO>()
  var live:Tuple<Rec> = []

  ;Load packages into environment
  defn load (ps:Tuple<PackageIO>) :
    ;Figure out dependencies
    val reload-set = to-hashset<Symbol>(seq(package, ps))
    val dependencies = cat(package-dependencies, live-dependencies) where :
      val package-dependencies = for p in values(packages) seq-cat :
        if not reload-set[package(p)] :
          for import in imports(p) seq? :
            if reload-set[package(id(import))] :
              val src = PackageDependency(package(p))
              One(Dependency(src, rec(import)))
            else : None()
        else : []
      val live-dependencies = for r in live seq :
        Dependency(LiveDependency(), r)

    ;Check dependencies
    val new-recs = to-hashtable<RecId,Rec> $
      for p in ps seq-cat :
        for e in exports(p) seq :
          id(r) => r
    for d in dependencies do :
      match(get?(new-recs, id(rec(d)))) :
        (r:Rec) : check-dependency(d, r)
        (r:False) : no-dependency(d)

  ;Return new environment
  new DEnv :
    defmethod set-live (this, recs:Seqable<Rec>) :
      val ids = HashSet<RecId>()
      live = to-tuple $ for r in recs seq? :
        if add(ids, id(r)) : One(r)
        else : None()
    defmethod load (this, pkgs:Tuple<PackageIO>) :
      load(pkgs)

defstruct Dependency : (source:DependencySource, rec:Rec)
deftype DependencySource
defstruct PackageDependency <: DependencySource : (package:Symbol)
defstruct LiveDependency <: DependencySource