defpackage stz/build :
  import core
  import collections
  import parser
  import reader
  import stz/serializer

#use-added-syntax(stz-serializer-lang)

;============================================================
;=================== Build File Parsing =====================
;============================================================

defstruct ProjectBuild :
  name: Symbol
  filenames: List<String>
  assembly: Maybe<String>
  output: Maybe<String>
  platform: Maybe<Symbol>
  ccflags: Maybe<String>
  flags: List<Symbol>
  pkg-path: Maybe<String>
  pkg: Maybe<String>
  optimize: True|False
  verbose: True|False

defsyntax stanza-build :
  defn ut (x) : unwrap-token(x)
  val no-value = gensym()

  ;================
  ;==== Errors ====
  ;================
  defn BE (info:False|FileInfo, msg) :
    val msg* = match(info) :
      (info:FileInfo) : "%_: %_" % [info, msg]
      (info:False) : msg
    throw(Exception(msg*))

  ;=======================
  ;==== Type Checking ====
  ;=======================
  defn as-option (key:Symbol, info:False|FileInfo, x) :
    defn E! (description:String) :
      BE(info, "Option %_ should be a %_." % [key, description])
    defn as-strings () :
      match(x:List) : x when all?({_ is String}, x) else E!("list of strings")
      else : E!("list of strings")
    defn as-symbols () :
      match(x:List) : x when all?({_ is Symbol}, x) else E!("list of symbols")
      else : E!("list of symbols")      
    defn as-string () :
      match(x:String) : x
      else : E!("string")
    defn as-symbol () :
      match(x:Symbol) : x
      else : E!("symbol")
    defn as-no-value () :
      if x != no-value :
        BE(info, "Option %_ does not accept a value." % [key])
      no-value
    
    key => switch(key) :
      `filenames : as-strings()
      `s : as-string()
      `o : as-string()
      `platform : as-symbol()
      `ccflags : as-string()
      `flags : as-symbols()
      `pkg-path : as-string()
      `pkg : as-string()
      `optimize : as-no-value()
      `verbose : as-no-value()
      else : BE(info, "Unrecognized project build option: %_." % [key])  

  ;========================
  ;==== Option Parsing ====
  ;========================
  defn make-project (info:False|FileInfo, name:Symbol, es:List<KeyValue<Symbol,?>>) :
    defn field? (name:Symbol) :
      for e in es first :
        if key(e) == name : One(value(e))
        else : None()
    defn field (name:Symbol) :
      val x = field?(name)
      if empty?(x) : BE(info, "Required build option %_ is missing." % [name])
      else : value!(x)
    defn list (name:Symbol) :
      val x = field?(name)
      if empty?(x) : List()
      else : value!(x)
    defn bool (name:Symbol) :
      any?({key(_) == name}, es)
    ProjectBuild(
      name,
      field(`filenames),
      field?(`assembly),
      field?(`output),
      field?(`platform),
      field?(`ccflags),
      list(`flags),
      field?(`pkg-path),
      field?(`pkg),
      bool(`optimize),
      bool(`verbose))

  ;===============
  ;==== Rules ====
  ;===============
  ;Symbols
  defproduction sym: Symbol
  defrule sym = (?x) when ut(x) is Symbol :
    ut(x)

  ;Projects
  public defproduction proj!: ProjectBuild
  defrule proj! = (?name:#sym : (?es:#entry! ...)) :
    make-project(closest-info(), name, es)
  fail-if proj! = () :
    BE(closest-info(), "Invalid project entry.")

  ;Entries
  defproduction entry!: KeyValue<Symbol,?>
  defrule entry! = (?key:#sym : ?value) :
    as-option(key, closest-info(key), unwrap-all(value))
  defrule entry! = (?key:#sym) :
    as-option(key, closest-info(key), no-value)
  fail-if entry! = () :
    BE(closest-info(), "Invalid key-value entry.")

defn read-build-file () :
  try :
    val forms = read-file("stanza.build")
    parse-syntax[stanza-build / #proj! ...](forms)
  catch (e:FileOpenException) :
    throw(NoBuildFileError())

defstruct NoBuildFileError <: Exception
defmethod print (o:OutputStream, e:NoBuildFileError) :
  print(o, "Could not open Stanza build file stanza.build. Please run stanza init to create an example build file.")

;============================================================
;==================== Timestamp Table =======================
;============================================================

defstruct TimestampTable :
  entries: List<KeyValue<String,Long>>

defn changed? (tt:TimestampTable, filename:String) :
  val e = find({key(_) == filename}, entries(tt))
  match(e:KeyValue<String,Long>) :
    value(e) != time-modified(filename)
  else : true

;============================================================
;================ File Timestamp Parsing ====================
;============================================================

defserializer (out:FileOutputStream, in:FileInputStream) :
  ;=================
  ;==== Overall ====
  ;=================
  defunion timestamp-table (TimestampTable) :
    TimestampTable: (entries:list(kv))

  defunion kv (KeyValue<String,Long>) :
    KeyValue: (key:string, value:long)

  ;=====================
  ;==== Combinators ====
  ;=====================
  reader defn read-list<?T> (f: () -> ?T) :
    val n = read-int()
    to-list(repeatedly(f, n))

  writer defn write-list<?T> (f: T -> False, xs:List<?T>) :
    write-int(length(xs))
    do(f, xs)

  ;===============
  ;==== Atoms ====
  ;===============
  defatom int (x:Int) :
    writer :
      put(out, x)
    reader :
      match(get-int(in)) :
        (x:Int) : x
        (x:False) : throw(DeserializeException())

  defatom char (x:Char) :
    writer :
      print(out, x)
    reader :
      match(get-char(in)) :
        (x:Char) : x
        (x:False) : throw(DeserializeException())

  defatom long (x:Long) :
    writer :
      put(out, x)
    reader :
      match(get-long(in)) :
        (x:Long) : x
        (x:False) : throw(DeserializeException())
      
  defatom string (x:String) :
    writer :
      write-int(length(x))
      print(out, x)
    reader :
      val n = read-int()
      String(repeatedly(read-char, n))

defn read-time-stamp-table () :
  try :
    val f = FileInputStream("stanza.aux")
    deserialize-timestamp-table(f)
  catch (e:DeserializeException) :
    throw(CorruptedAuxFileError())
  catch (e:FileOpenException) :
    TimestampTable(List())

defn write-time-stamp-table (builds:List<ProjectBuild>) :
  try :
    val table = TimestampTable{to-list(_)} $
      for filename in seq-cat(filenames, builds) seq? :
        try : One(filename => time-modified(filename))
        catch (e:FileStatException) : None()
    val f = FileOutputStream("stanza.aux")
    serialize(f, table)
  catch (e:SerializeException|IOException) :
    throw(BadWriteAuxError())    

defstruct CorruptedAuxFileError <: Exception
defmethod print (o:OutputStream, e:CorruptedAuxFileError) :
  print(o, "Stanza auxiliary file stanza.aux is corrupted. Clean the project and try again.")

defstruct BadWriteAuxError <: Exception
defmethod print (o:OutputStream, e:BadWriteAuxError) :
  print(o, "Could not write Stanza auxiliary file stanza.aux.")

;============================================================
;=================== Workspace ==============================
;============================================================

protected extern file_time_modified: ptr<byte> -> long

lostanza defn linux-error-msg () -> ref<String> :
   val s = call-c clib/strerror(call-c clib/get_errno())
   return String(s)

lostanza defn time-modified (filename:ref<String>) -> ref<Long> :
  val t = call-c file_time_modified(addr!(filename.chars))
  if t == 0 : throw(FileStatException(filename, linux-error-msg()))
  return new Long{t}

defstruct FileStatException <: IOException :
  filename: String
  cause: String
defmethod print (o:OutputStream, e:FileStatException) :
  print(o, "Error occurred when attempting to read statistics of file %_. %_." % [
    filename(e), cause(e)])

;============================================================
;===================== Main =================================
;============================================================

defn main () :
  val builds = read-build-file()
  val ts-table = read-time-stamp-table()
  for proj in builds do :
    println("Project %_ :" % [name(proj)])
    for file in filenames(proj) do :
      if changed?(ts-table, file) :
        println("  File %_ changed." % [file])
  write-time-stamp-table(builds)

main()