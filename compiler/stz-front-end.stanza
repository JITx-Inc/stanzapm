defpackage stz/front-end :
  import core
  import reader
  import collections
  import stz/pkg
  import stz/il-ir
  import stz/dl-ir
  import stz/el-ir
  import stz/tl-ir
  import stz/input
  import stz/core-macros
  import stz/bindings
  import stz/renamer
  import stz/resolver
  import stz/ids
  import stz/type
  import stz/tl-to-el
  import stz/dl

;<doc>=======================================================
;======================== Algorithm =========================
;============================================================

1. The following state tables are updated through the algorithm steps:

  package-table: HashTable<Symbol,IPackage|Pkg|False>
  package-exports-table: HashTable<Symbol,PackageExports>

  The package-table associates each successfully loaded and renamed
  package during the algorithm. An IPackage indicates it is a source
  package, a Pkg indicates it is a .pkg file, and False indicates that
  the package could not be found.

  The package-exports-table stores the computed PackageExports
  datastructure for each .pkg file.

2. The first step is to read in all the given inputs. The following
  file types are supported:

  *.stanza - Read, macroexpand, and convert to IL-IR.
  *.pkg - Read in.
  *.fpkg - Read in.
  *.vmbindings - Read in to Bindings file.

  If the input is a Symbol, then we first locate the filename for that
  package, and then read as normal.

  The output is Vector<IPackage|Pkg|Bindings> for representing each
  object.

3. The next step is to rename all of the input packages, and load them
into the package-table. An error is thrown if we detect duplicate
packages, or if something fails during renaming.

4. Next we need to resolve the packages. In order to do that, we need
to implement a resolver environment which is responsible for loading a
package when given its name.

5. Next, we compile the resolved packages to EL, which requires
running the type inferencer and the EL compiler.

6. The last step is to check for type consistency. Whether the types
in the source packages are consistent with their expected types in the
precompiled .pkg packages.

Inconsistencies will be caused by out-of-date packages loaded from
.pkg files. Inconsistencies are classified into either unrecoverable
errors, or errors potentially recoverable by reloading the original
source file corresponding to the .pkg file. 

;============================================================
;=======================================================<doc>

public deftype FrontEndInputs
public defmulti inputs (e:FrontEndInputs) -> Tuple<String|Symbol>
public defmulti find-package (inputs:FrontEndInputs, name:Symbol) -> String|False
public defmulti source-file? (inputs:FrontEndInputs, name:Symbol) -> String|False

public defn compile-to-el (sys:FrontEndInputs) -> FrontEndResult :
  ;----------------------------------------------------------
  ;--------------------- State ------------------------------
  ;----------------------------------------------------------
  val package-table = HashTable<Symbol,IPackage|Pkg|False>()
  val package-exports-table = HashTable<Symbol,PackageExports>()
  val file-assocs = Vector<FileAssoc>()

  ;----------------------------------------------------------
  ;------------------ Main Algorithm ------------------------
  ;----------------------------------------------------------
  defn main () :
    val input-objs = read-inputs(inputs(sys))
    load-package-table(input-objs)
    let loop () :
      val resolved = resolve-packages()
      val epackages = compile-to-el(resolved)
      match(check-type-consistency!(epackages)) :
        (f:False) :
          form-output(input-objs, epackages)
        (ss:Tuple<PackageSource>) :
          load-package-table $ read-inputs(ss)
          loop()

  ;----------------------------------------------------------
  ;-------------------- Utilities ---------------------------
  ;----------------------------------------------------------
  defn put-in-package-table (p:IPackage|Pkg) :
    package-table[name(p)] = p

  defn record-file-assoc (package:Symbol, filename:String) :
    val timestamp = time-modified(filename)
    val filename* = resolve-path(filename) as String
    add(file-assocs, FileAssoc(package, filename*, timestamp))

  defn record-file-assocs (packages:Seqable<Symbol>, filename:String) :
    val timestamp = time-modified(filename)
    val filename* = resolve-path(filename) as String
    for p in packages do :
      add(file-assocs, FileAssoc(p, filename*, timestamp))

  defn most-recent-file-assocs () :
    val exists = HashSet<Symbol>()    
    to-tuple $ for assoc in in-reverse(file-assocs) filter :
      add(exists, package(assoc))

  ;----------------------------------------------------------
  ;------------------- Reading Inputs -----------------------
  ;----------------------------------------------------------
  defn read-inputs (inputs:Seqable<Symbol|String|PackageSource>) -> Vector<IPackage|Pkg|Bindings> :
    val objects = Vector<IPackage|Pkg|Bindings>()
    defn read-file (filename:String, expected-package:Symbol|False) :
      switch suffix?{filename, _} :
        ".stanza" :
          val ps = read-ipackages(filename)
          match(expected-package:Symbol) :
            ensure-contains-package!(ps, filename, expected-package)
          add-all(objects, ps)
        ".pkg" :
          val pkg = load-package(filename, expected-package, false)
          record-file-assoc(name(pkg), filename)
          add(objects, pkg)
        ".fpkg" :
          val pkg = load-package(filename, expected-package, true)
          record-file-assoc(name(pkg), filename)
          add(objects, pkg)
        ".vmbindings" :
          read-bindings(filename)
        else : throw(InvalidExtensionError(filename))
    for input in inputs do :
      match(input) :
        (input:String) :
          read-file(input, false)
        (input:PackageSource) :
          read-file(filename(input), name(input))
        (input:Symbol) :
          read-file(find-package!(sys, input), input)
            
    ;Return objects
    objects  

  defn read-ipackages (filename:String) -> Tuple<IPackage> :
    val forms = read-file(filename)    
    val expanded = parse-syntax[core / #exp!](List(forms))
    val core-imports = [IImport(`core), IImport(`collections)]
    val packages = to-ipackages(expanded, core-imports)
    record-file-assocs(seq(name,packages), filename)
    packages

  ;----------------------------------------------------------
  ;-------------- Initialize Package Table ------------------
  ;----------------------------------------------------------
  defn load-package-table (objects:Collection<IPackage|Pkg|Bindings>) :
    ensure-no-duplicate-packages!(filter-by<IPackage|Pkg>(objects))
    ensure-not-already-loaded!(filter-by<IPackage|Pkg>(objects))
    val ipackages = to-tuple(filter-by<IPackage>(objects))
    do(put-in-package-table, rename-il!(ipackages))
    do(put-in-package-table, filter-by<Pkg>(objects))

  ;----------------------------------------------------------
  ;--------------- Resolving Package ------------------------
  ;----------------------------------------------------------

  defn package-exports (pkg:Pkg) :
    set?(package-exports-table, name(pkg), fn () :
      val pexs = to-package-exports(packageio(pkg))
      defn rename-id (e:Export) : sub-n(e, fresh-id())
      sub-exports(pexs, map(rename-id, exports(pexs))))

  defn to-resolver-input (pkg:IPackage) : pkg
  defn to-resolver-input (pkg:False) : pkg
  defn to-resolver-input (pkg:Pkg) : package-exports(pkg)

  defn resolver-environment () :
    defn imported-package (package:Symbol) :
      ;If there is no entry in the package table, then locate the package
      ;and load it.
      if not key?(package-table, package) :
        match(find-package(sys, package)) :
          (filename:String) : load-package-table $ read-inputs $ [PackageSource(package, filename)]
          (filename:False) : false
      to-resolver-input(package-table[package])
    ;Make environment
    new stz/resolver/Env :
      defmethod imported-package (this, package:Symbol) :
        imported-package(package)

  defn resolve-packages () -> Tuple<IPackage> :
    val packages = to-tuple $
                   seq{to-resolver-input, _} $
                   filter-by<IPackage|Pkg>(
                   values(package-table))    
    resolve-il!(packages, resolver-environment())

  ;----------------------------------------------------------
  ;------------------- Compile to EL ------------------------
  ;----------------------------------------------------------
  defn compile-to-el (resolved:Tuple<IPackage>) -> Tuple<EPackage> :
    val env = new stz/type/Env :
      defmethod stz/type/exports (this, package:Symbol) :
        package-exports-table[package]
    val typed = type-program!(resolved, env)
    to-el(typed, false)

  ;----------------------------------------------------------
  ;------------------ Check Consistency ---------------------
  ;----------------------------------------------------------

  ;Check type consistency
  defn check-type-consistency! (epkgs:Tuple<EPackage>) -> Tuple<PackageSource>|False :
    val packageios = to-tuple{seq(packageio, _)} $
      cat(epkgs, filter-by<Pkg>(values(package-table)))
    val denv = DEnv()
    val result = load(denv, packageios, [])
    match(result:LoadErrors) :
      val package-sources = Vector<PackageSource>()
      val unrecoverable-errors = Vector<LoadError>()
      for e in errors(result) do :
        match(source(e)) :
          (src:LoadedPackage) :
            match(source-file?(sys, package(src))) :
              (file:String) : add(package-sources, PackageSource(package(src), file))
              (file:False) : add(unrecoverable-errors, e)
          (src:LiveObject) :
            add(unrecoverable-errors, e)
      if not empty?(unrecoverable-errors) :
        throw(LoadErrors(to-tuple(unrecoverable-errors)))
      ;Return package sources
      to-tuple(package-sources)

  ;----------------------------------------------------------
  ;------------------- Make Output --------------------------
  ;----------------------------------------------------------
  defn form-output (input-objects:Collection<IPackage|Pkg|Bindings>, epackages:Tuple<EPackage>) :
    val input-ordering = to-tuple $
      for obj in input-objects seq? :
        match(obj:IPackage|Pkg) : One(name(obj))
        else : None()
    FrontEndResult(
      epackages,
      to-tuple(filter-by<Pkg>(values(package-table))),
      input-ordering,
      most-recent-file-assocs())

  ;----------------------------------------------------------
  ;------------------ Error Handling ------------------------
  ;----------------------------------------------------------
  defn find-package! (sys:FrontEndInputs, package:Symbol) -> String :
    match(find-package(sys, package)) :
      (file:String) : file
      (file:False) : throw(CannotLocatePackage(package))
 
  defn rename-il! (ps:Tuple<IPackage>) -> Tuple<IPackage> :
    match(rename-il(ps)) :
      (e:RenameErrors) : throw(e)
      (ps:Tuple<IPackage>) : ps

  defn resolve-il! (ps:Tuple<IPackage|PackageExports>, env:stz/resolver/Env) -> Tuple<IPackage> :
    match(resolve-il(ps, env, false)) :
      (e:ResolveErrors) : throw(e)
      (ps:Tuple<IPackage>) : ps

  defn type-program! (ipackages:Tuple<IPackage>, env:stz/type/Env) :
    match(type-program(ipackages,env)) :
      (p:TProg) : p
      (e:TypeErrors) : throw(e)

  defn ensure-no-duplicate-packages! (ps:Seqable<IPackage|Pkg>) :
    val added-set = HashSet<Symbol>()
    val duplicates = unique $ for name in seq(name,ps) filter :
      not add(added-set, name)
    if not empty?(duplicates) :
      throw(DuplicatePackages(to-tuple(duplicates)))

  defn ensure-not-already-loaded! (ps:Seqable<IPackage|Pkg>) :
    defn rank (p:IPackage|Pkg|False) :
      match(p) :
        (p:False) : 0
        (p:Pkg) : 1
        (p:IPackage) : 2
    for p in ps do :
      if key?(package-table, name(p)) :
        val old-p = package-table[name(p)]
        if rank(old-p) >= rank(p) :
          throw(PackageAlreadyLoaded(name(p)))    

  defn ensure-contains-package! (ps:Seqable<IPackage>, filename:String, expected-package:Symbol) :
    val exists? = any?({name(_) == expected-package}, ps)
    if not exists? :
      throw(MissingPackageInFile(filename, expected-package))

  ;----------------------------------------------------------
  ;-------------------- Launch! -----------------------------
  ;----------------------------------------------------------
  main()

;============================================================
;================ Utility Datastructures ====================
;============================================================

defstruct PackageSource :
  name: Symbol
  filename: String

public defstruct FileAssoc :
  package: Symbol
  filename: String
  timestamp: Long

public defstruct FrontEndResult :
  epackages: Tuple<EPackage>
  pkgs: Tuple<Pkg>
  input-ordering: Tuple<Symbol>
  assocs: Tuple<FileAssoc>

;============================================================
;===================== Errors ===============================
;============================================================

defn InvalidExtensionError (filename:String) :
  new Exception :
    defmethod print (o:OutputStream, this) :
      print(o, "File %_ does not have a valid Stanza file extension." % [filename])

defn CannotLocatePackage (name:Symbol) :
  new Exception :
    defmethod print (o:OutputStream, this) :
      print(o, "Cannot locate .pkg file for package %~." % [name])

defn DuplicatePackages (names:Tuple<Symbol>) :
  new Exception :
    defmethod print (o:OutputStream, this) :
      print(o, "The following packages, %,, has been loaded more than once." % [names])

defn MissingPackageInFile (filename:String, package-name:Symbol) :
  new Exception :
    defmethod print (o:OutputStream, this) :
      print(o, "The file %~ was expected to contain the package %~, but does not." % [filename, package-name])

defn PackageAlreadyLoaded (package-name:Symbol) :
  new Exception :
    defmethod print (o:OutputStream, this) :
      print(o, "The package %~ has already been loaded." % [package-name])