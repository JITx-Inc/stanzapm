#use-added-syntax(dot-operator)
defpackage stz/branch-table :
  import core
  import collections
  import stz/vm-ir
  import stz/dyn-tree
  import stz/dyn-bi-table
  import stz/utils
  import stz/vm-table
  import stz/typeset
  import stz/trie-table
  import stz/dispatch-dag with:
    prefix(BranchTable) => Dag
  import stz/set-utils
  import stz/conversion-utils
  import stz/timing-log-api
  import stz/branch-format
  import stz/ptr-buffer

;============================================================
;=================== Public Interface =======================
;============================================================
public deftype BranchTable
public defmulti add (t:BranchTable, f:BranchFormat) -> Int
public defmulti get (t:BranchTable, f:Int) -> BranchFormat
public defmulti load-package-methods (t:BranchTable, package:Symbol, ms:Seqable<VMMethod>) -> False
public defmulti update (t:BranchTable) -> False

;============================================================
;======================== Timers ============================
;============================================================

public val BRANCH-TABLE-DISPATCH-DAG = TimerLabel("Branch Table Dispatch Dag")
public val MAKE-BRANCH-TABLE = TimerLabel(BRANCH-TABLE-DISPATCH-DAG, suffix("make-branch-table"))

;============================================================
;================= Table Implementation =====================
;============================================================

public defn BranchTable (ct:ClassTable) :
  ;==================================================
  ;=============== State of Table ===================
  ;==================================================
  ;Store formats in ctable
  val formats = Vector<BranchFormat>()
  val format-table = HashTable<BranchFormat,Int>()
  val methods = Vector<LoadedMethod|False>()

  ;All compiled tables corresponding to each format
  val trie-table = PtrBuffer(8)
  val stale-trie-tables = Vector<Int>()

  ;Format dependencies
  val format-class-dependencies = DynBiTable()
  val method-class-dependencies = DynBiTable()
  val multi-formats = IntListTable<Int>()
  val method-multi-table = DynBiTable() ;Mapping from method to multis

  ;==================================================
  ;============= Trie Table Invalidation ============
  ;==================================================
  ;Record a table as invalidated, so that it is updated next cycle.
  defn invalidate-table (i:Int) :
    remove(trie-table, i)
    add(stale-trie-tables, i)

  defn invalidate-tables-of-multi (multi:Int) :
    do(invalidate-table, multi-formats[multi])

  defn update-trie-table () :
    while not empty?(stale-trie-tables) :
      val i = pop(stale-trie-tables)
      compute-trie-table(i) when not key?(trie-table, i)
    ensure-no-stale-tables!()

  defn ensure-no-stale-tables! () :
    #if-not-defined(OPTIMIZE) :
      for i in 0 to length(formats) do :
        if not key?(trie-table, i) :
          fatal("Trie table %_ is stale." % [i])
    false

  ;==================================================
  ;========== Computing the Trie Table ==============
  ;==================================================
  defn compute-trie-table (i:Int) :
    val f* = resolve-format(formats[i])
    compute-trie-table-entry(trie-table, ct, i, f*)

  ;Resolves any MultiFormat to a ResolvedMultiFormat.
  defn resolve-format (f:BranchFormat) -> BranchFormat :
    match(f:MultiFormat) :
      ResolvedMultiFormat(f.num-header-args, methods-of-multi(f.multi))
    else :
      f

  ;==================================================
  ;================ Adding new Formats ==============
  ;==================================================
  defn add-format (bf:BranchFormat) -> Int :
    add(formats, bf)
    val i = length(formats) - 1
    format-class-dependencies[i] = class-dependencies(bf)
    format-table[bf] = i
    match(bf:MultiFormat) :
      multi-formats.add(bf.multi, i)
    invalidate-table(i)
    i

  ;==================================================
  ;===================== Methods ====================
  ;==================================================
  defn add-method (package-name:Symbol, m:VMMethod) :
    add(methods, LoadedMethod(multi(m), types(m), fid(m), package-name, instance?(m)))
    val id = length(methods) - 1
    method-class-dependencies[id] = class-dependencies(m)
    invalidate-tables-of-multi(multi(m))
    method-multi-table[id] = [multi(m)]

  defn remove-method (i:Int) :
    val m = methods[i] as LoadedMethod
    invalidate-tables-of-multi(multi(m))
    method-class-dependencies[i] = []
    methods[i] = false
    method-multi-table[i] = []

  defn top-level-method? (i:Int, p:Symbol) :
    val m = methods[i]
    match(m:LoadedMethod) :
      not instance-method?(m) and package(m) == p

  ;Retrieve all registered methods for the given multi.
  defn methods-of-multi (multi:Int) -> Tuple<Method> :
    to-tuple $
      for i in backward(method-multi-table, multi) seq :
        val m = methods[i] as LoadedMethod
        Method(m.fid, m.types)

  defn load-package-methods (package-name:Symbol, ms:Seqable<VMMethod>) :
    ;Remove old methods
    for i in 0 to length(methods) do :
      remove-method(i) when top-level-method?(i, package-name)
    ;Add new methods
    do(add-method{package-name, _}, ms)

  ;==================================================
  ;============ Add Class Change Listener ===========
  ;==================================================
  defn class-change-listener () :
    ;Find all formats depending on a class
    defn formats-dependent-on-class (c:Int) :
      backward(format-class-dependencies, c)
    ;Find all multis depending on a class
    defn multis-dependent-on-class (c:Int) :
      for i in backward(method-class-dependencies, c) seq :
        multi(methods[i] as LoadedMethod)
    ;Return listener that invalidates formats when
    ;class tree changes.
    new TreeListener :
      defmethod node-changed (this, c:Int) :
        do(invalidate-table, formats-dependent-on-class(c))
        do(invalidate-tables-of-multi, multis-dependent-on-class(c))
  add(ct, class-change-listener())

  ;==================================================
  ;=============== Create Structure =================
  ;==================================================
  new BranchTable :
    defmethod get (this, f:Int) :
      formats[f]
    defmethod add (this, f:BranchFormat) :
      match(get?(format-table, f)) :
        (i:Int) : i
        (_:False) : add-format(f)
    defmethod update (this) :
      update-trie-table()
    defmethod trie-table (this) :
      trie-table
    defmethod load-package-methods (this, package:Symbol, ms:Seqable<VMMethod>) :
      load-package-methods(package, ms)

;==================================================
;============ Retrieve Trie Table Data ============
;==================================================
defmulti trie-table (bt:BranchTable) -> PtrBuffer
public lostanza defn trie-table-data (bt:ref<BranchTable>) -> ptr<ptr<int>> :
  return trie-table(bt).data

;==================================================
;============ Compute a Trie Table Entry ==========
;==================================================
lostanza defn compute-trie-table-entry (trie-table:ref<PtrBuffer>,
                                        class-table:ref<ClassTable>,
                                        i:ref<Int>,
                                        f:ref<BranchFormat>) -> ref<False> :
  val p = to-trie-table(class-table, f)
  set(trie-table, i.value, p)
  return false

;============================================================
;==================== Utilities =============================
;============================================================

defstruct LoadedMethod :
  multi: Int
  types: Tuple<TypeSet>
  fid: Int
  package: Symbol
  instance-method?: True|False
with:
  printer => true

;Compute the class dependencies of all branch formats and methods
defn class-dependencies (ts:Seqable<TypeSet>) -> Tuple<Int> :
  val ds = Vector<Int>()
  let loop (ts:Seqable<TypeSet> = ts) :
    for t in ts do :
      match(t) :
        (t:AndType) : loop(types(t))
        (t:OrType) : loop(types(t))
        (t:TopType) : false
        (t:SingleType) : add(ds, type(t))
  qsort!(ds)
  remove-duplicates!(ds)
  to-tuple(ds)

defn class-dependencies (f:BranchFormat) -> Tuple<Int> :
  match(f) :
    (f:DispatchFormat|MatchFormat) : f.branches.cat-all.class-dependencies
    (f:MultiFormat) : []

defn class-dependencies (f:VMMethod) -> Tuple<Int> :
  f.types.class-dependencies

;Compute all the multi dependencies of a format
defn multi-dependencies (f:BranchFormat) -> Tuple<Int> :
  match(f) :
    (f:MultiFormat) : [f.multi]
    (f:DispatchFormat|MatchFormat) : []

;<doc>=======================================================
;================ Encoding of Branch Formats ================
;============================================================

# Conversion of a Typeset into an Arg #

Input:
  ct:ClassTable
  t:TypeSet
Output:
  arg:Arg

# Conversion of a BranchFormat into an encoded Vector<Int> #

Input:
  ct:ClassTable
  f:BranchFormat
Output:
  table:Vector<Int>

# Conversion of a Vector<int> into a ptr<int> #

Input:
  xs:Vector<Int>
Output:
  ys:ptr<int>

# Conversion of a BranchFormat into a ptr<int> #

Input:
  ct:ref<ClassTable>
  f:ref<BranchFormat>
Output:
  table:ptr<int>

;============================================================
;=======================================================<doc>

;Encoding a sequence of TypeSets into a dispatch branch
defn make-branch-table (ct:ClassTable, branches:Seqable<Seqable<TypeSet>>) :
  within log-time(MAKE-BRANCH-TABLE) :
    DagBranchTable(
      to-branches(branches, set-representation{ct, _}),
      abstract-classes(ct))

;Convert a BranchFormat to a tuple of IBranch
defn encode-branch-format (ct:ClassTable, f:BranchFormat) -> Vector<Int> :
  match(f) :
    (f:MatchFormat) :
      val dag = within log-time(BRANCH-TABLE-DISPATCH-DAG) :
        ct.make-branch-table(f.branches).compute-dispatch-dag(false)
      defn soln-id (s:Soln) :
        match(s) :
          (s:NoSoln) : 0
          (s:UniqueSoln) : index(s) + 1
      encode-dag(dag, 0, soln-id)
    (f:DispatchFormat) :
      val dag = within log-time(BRANCH-TABLE-DISPATCH-DAG) :
        ct.make-branch-table(f.branches).compute-dispatch-dag(true)
      defn soln-id (s:Soln) :
        match(s) :
          (s:NoSoln) : 0
          (s:AmbSoln) : 1
          (s:UniqueSoln) : index(s) + 2
      encode-dag(dag, 0, soln-id)
    (f:ResolvedMultiFormat) :
      val dag = within log-time(BRANCH-TABLE-DISPATCH-DAG) :
        ct.make-branch-table(f.methods.seq(types))
          .compute-dispatch-dag(true)
      defn soln-id (s:Soln) :
        match(s) :
          (s:NoSoln) : 0
          (s:AmbSoln) : 1
          (s:UniqueSoln) : f.methods[s.index].fid + 2
      encode-dag(dag, f.num-header-args, soln-id)

;Conversion of a Vector<int> into a ptr<int>
lostanza defn to-int-ptr (xs:ref<Vector<Int>>) -> ptr<int> :
  val n = length(xs).value
  val p:ptr<int> = call-c clib/stz_malloc(n * sizeof(int))
  for (var i:int = 0, i < n, i = i + 1) :
    p[i] = get(xs, new Int{i}).value
  return p

;Conversion of a BranchFormat into a ptr<int>
lostanza defn to-trie-table (ct:ref<ClassTable>, f:ref<BranchFormat>) -> ptr<int> :
  val ints = encode-branch-format(ct, f)
  return to-int-ptr(ints)
