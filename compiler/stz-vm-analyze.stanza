defpackage stz/vm-analyze :
  import core
  import collections
  import stz/vm-ir

;============================================================
;====================== Driver ==============================
;============================================================

public defn analyze (prog:VMProg) :
  val funcs* = for func in funcs(prog) map :
    match(func) :
      (func:VMMulti) :
        val funcs* = for f in funcs(func) map :
          key(f) => analyze(value(f))
        sub-funcs(func, funcs*)
      (func:VMFunc) :
        analyze(func)
  sub-funcs(prog, funcs*)

;============================================================
;=================== Analysis Algorithm =====================
;============================================================

public defn analyze (func:VMFunc) -> VMFunc :
  ;Compute direct statistics of all blocks
  val blocks = Vector<Int>()
  val block-ends = IntTable<Int>()
  val label-indices = IntTable<Int>()
  val used = IntTable<List<Int>>()
  val defd = IntTable<List<Int>>()
  val successors = IntTable<List<Int|Label>>(List())

  val def-set = IntSet()
  val use-set = IntSet()
  val num-ins = length(ins(func))
  defn* loop (i:Int, current-start:Int) :
    defn* step-next () :
      ;Determine whether to close the current block
      if i + 1 < num-ins and ins(func)[i + 1] is LabelIns :
        finish-block(current-start, i)
        add(successors, current-start, i + 1)
        loop(i + 1, i + 1)
      else :
        loop(i + 1, current-start)
        
    if i < num-ins :
      val ins = ins(func)[i]
      match(ins) :
        (ins:LabelIns) :
          label-indices[n(ins)] = i
          step-next()
        (ins:VMIns&DestinationIns) :
          ;Finish calculating current block
          for arg in ins do-args :
            add(use-set, arg) when not def-set[arg]
          finish-block(current-start, i)

          ;Add successors
          for dest in ins do-dest :
            add(successors, current-start, Label(dest))
            
          ;Start next block
          loop(i + 1, i + 1)
        (ins:VMIns&OperationIns) :
          ;Calculate statistics for current block
          for arg in ins do-args :
            add(use-set, arg) when not def-set[arg]
          for res in ins do-results :
            add(def-set, res)
          step-next()
    else :
      if current-start < i :
        finish-block(current-start, i - 1)
  defn finish-block (start:Int, end:Int) :
    add(blocks, start)
    block-ends[start] = end
    used[start] = to-list(use-set)
    defd[start] = to-list(def-set)
    clear(def-set)
    clear(use-set)
    
  ;Start from first instruction
  loop(0, 0)
  
  ;Backpatch label destinations
  for entry in successors map! :
    for dest in value(entry) map :
      match(dest:Label) : label-indices[n(dest)]
      else : dest
  val successors! = successors as IntTable<List<Int>>

  ;Compute predecessors
  val predecessors = IntTable<List<Int>>(List())
  for b in blocks do :
    for s in successors![b] do :
      add(predecessors, s, b)

  ;Put blocks in queue in post-order
  val ordering = Vector<Int>()
  put-in-queue(0) where :
    val visited = IntSet()
    defn put-in-queue (b:Int) :
      if not visited[b] :
        add(visited, b)
        for s in successors![b] do :
          put-in-queue(s)
        add(ordering, b)

  ;Propagate sets
  propagate(set1, set2) where :
    val set1 = IntSet()
    add-all(set1, blocks)
    val set2 = IntSet()    
    defn* propagate (update:IntSet, dirty:IntSet) :
      for b in ordering do :
        if update[b] :
          remove(update, b)
          var changed? = false
          clear(def-set)
          clear(use-set)
          add-all(def-set, defd[b])
          add-all(use-set, used[b])
          for s in successors![b] do :
            for x in used[s] do :
              if not def-set[x] :
                if add(use-set, x) :
                  changed? = true
          if changed? :
            used[b] = to-list(use-set)
            for p in predecessors[b] do :
              if not update[p] :
                add(dirty, p)
      if not empty?(dirty) :
        propagate(dirty, update)
  
  ;Print out result
  ;println("Analyzing function %_" % [id(func)])
  ;within indented() :
  ;  for (ins in ins(func), i in 0 to false) do :
  ;    println("(%_) %_" % [i, ins])
  ;for b in blocks do :
  ;  println("Block starting at %_ ending at %_" % [b, block-ends[b]])
  ;  within indented() :
  ;    println("Used: %," % [used[b]])
  ;    println("Defd: %," % [defd[b]])
  ;    println("Successors: %," % [successors[b]])

  ;Compute all usages of variables
  val num-usages = IntTable<Int>(0)
  val usages = Vector<Use>()
  defn add-use (n:Int) :
    val i = num-usages[n]
    add(usages, Use(n,i))
    update(num-usages, {_ + 1}, n)
  for b in ordering do :
    for s in successors![b] do :
      do(add-use, used[s])
    val last-i = block-ends[b]
    for i in reverse(b through last-i) do :
      match(ins(func)[i]) :
        (ins:LabelIns) :
          false
        (ins:VMIns&DestinationIns) :
          do-args(add-use, ins)
        (ins:VMIns&OperationIns) :
          do-results(add-use, ins)
          do-args(add-use, ins)
    do(add-use, used[b])
  for arg in filter-by<Local>(in-reverse(args(func))) do :
    add-use(index(arg))

  ;println("===== Variable Usages =====")
  ;within indented() :
  ;  do(println, num-usages)
  ;  do(println, usages)

  ;Calculate allocations
  val allocations = allocate(usages, num-usages)
  ;println("===== Variable Allocations =====")
  ;within indented() :
  ;  do(println, allocations)      

  ;Compute which values are references
  val ref-set = IntSet()
  for def in defs(func) do :
    match(type(def):VMRef) :
      add(ref-set, id(def))

  val ins-buffer = Vector<VMIns>()
  for b in ordering do :
    val last-i = block-ends[b]
    ;Initialize use-set with live-in of successors
    clear(use-set)
    for s in successors![b] do :
      add-all(use-set, used[s])
    
    ;Utility functions
    defn add-use (v:Int) : add(use-set, v)
    defn remove-use (v:Int) : remove(use-set, v)
    defn used-locals () : to-tuple(seq(Local, filter({ref-set[_]}, use-set)))
    
    ;Sweep through instructions backwards
    for i in reverse(b through last-i) do :
      val ins = ins(func)[i]
      match(ins) :
        (ins:LabelIns) :
          add(ins-buffer, ins)
        (ins:VMIns&DestinationIns) :
          add(ins-buffer, ins)
          do-args(add-use, ins)
        (ins:VMIns&OperationIns) :
          add(ins-buffer, ins)
          do-results(remove-use, ins)
          if leaves-frame?(ins) :
            add(ins-buffer, RecordLiveIns(used-locals()))
          do-args(add-use, ins)          
  reverse!(ins-buffer)

  ;println("===== Calculated Liveness =====")
  ;within indented() :
  ;  do(println, ins-buffer)

  ;Return new func
  val defs* = for def in defs(func) map :
    VMDef(id(def), type(def), get?(allocations, id(def), 0))
  sub-defs(sub-ins(func, to-tuple(ins-buffer)), defs*)
      
defn add<?T> (t:IntTable<List<?T>>, i:Int, v:T) :
  update(t, cons{v, _}, i)

defstruct Label: (n:Int)

defstruct Use: (n:Int, num:Int)
with: (printer => true)

;============================================================
;================= Allocation Algorithm =====================
;============================================================

defn allocate (usages:Vector<Use>, num-usages:IntTable<Int>) :  
  ;Declare tables
  val freelist = FreeIndexList()
  val slot-table = IntTable<Int>() ;slot-table[variable] = slot-index

  ;Control slots
  defn assign-slot (v:Int, slot:Int) :
    slot-table[v] = slot
  defn release-slot (v:Int) :
    free(freelist, slot-table[v])

  ;Categorization of usages
  defn start? (u:Use) :
    num(u) == 0
  defn end? (u:Use) :
    num(u) == num-usages[n(u)] - 1

  ;Main algorithm
  for use in usages do :
    if start?(use) :
      assign-slot(n(use), next(freelist))
    if end?(use) :
      release-slot(n(use))

  ;Return slot table
  slot-table

;============================================================
;================ Instruction Categorization ================
;============================================================

deftype DestinationIns :
  GotoIns <: DestinationIns
  Branch1Ins <: DestinationIns
  Branch2Ins <: DestinationIns
  ReturnIns <: DestinationIns
  TCallIns <: DestinationIns
  TCallClosureIns <: DestinationIns
  MatchIns <: DestinationIns
  DispatchIns <: DestinationIns

deftype OperationIns :
  CallIns <: OperationIns
  CallClosureIns <: OperationIns
  CallCIns <: OperationIns
  YieldIns <: OperationIns
  NewStackIns <: OperationIns
  SetIns <: OperationIns
  Op0Ins <: OperationIns
  Op1Ins <: OperationIns
  Op2Ins <: OperationIns
  AllocIns <: OperationIns
  StoreIns <: OperationIns
  LoadIns <: OperationIns
  DumpIns <: OperationIns
  RecordLiveIns <: OperationIns
  CommentIns <: OperationIns

;Assumes that the results are loaded from registers in sequential order,
;and that we are sweeping through instructions backwards. 
;Therefore sweeps through results in opposite order.
defn do-results (func:Int -> ?, i:OperationIns) :
  defn f? (x:Local|False) :
    match(x:Local) : func(index(x))
  defn f? (xs:Seqable<Local|False>) :
    do(f?, xs)    
    
  match(i) :
    (i:CallIns) : f?(in-reverse(xs(i)))
    (i:CallClosureIns) : f?(in-reverse(xs(i)))
    (i:CallCIns) : f?(in-reverse(xs(i)))
    (i:YieldIns) : f?(in-reverse(xs(i)))
    (i:NewStackIns) : f?(x(i))
    (i:SetIns) : f?(x(i))
    (i:Op0Ins) : f?(x(i))
    (i:Op1Ins) : f?(x(i))
    (i:Op2Ins) : f?(x(i))
    (i:AllocIns) : f?(in-reverse(xs(i)))
    (i:StoreIns) : false
    (i:LoadIns) : f?(x(i))
    (i:DumpIns) : false
    (i:RecordLiveIns) : false
    (i:CommentIns) : false

defn do-args (func:Int -> ?, i:OperationIns|DestinationIns) :
  defn f? (y:VMImm|False) :
    match(y:Local) : func(index(y))
  defn f? (ys:Tuple<VMImm>) :
    do(f?, ys)  
    
  match(i) :
    (i:CallIns) : (f?(f(i)), f?(ys(i)))
    (i:CallClosureIns) : (f?(f(i)), f?(ys(i)))
    (i:CallCIns) : (f?(f(i)), f?(ys(i)))
    (i:YieldIns) : (f?(f(i)), f?(ys(i)))
    (i:NewStackIns) : f?(fid(i))
    (i:SetIns) : f?(y(i))
    (i:Op0Ins) : false
    (i:Op1Ins) : f?(y(i))
    (i:Op2Ins) : (f?(y(i)), f?(z(i)))
    (i:AllocIns) : f?(sizes(i))
    (i:StoreIns) : (f?(x(i)), f?(y(i)), f?(z(i)))
    (i:LoadIns) : (f?(y(i)), f?(z(i)))
    (i:DumpIns) : f?(xs(i))
    (i:RecordLiveIns) : false
    (i:CommentIns) : false
    (i:GotoIns) : false
    (i:Branch1Ins) : f?(x(i))
    (i:Branch2Ins) : (f?(x(i)), f?(y(i)))
    (i:ReturnIns) : f?(xs(i))
    (i:TCallIns) : (f?(f(i)), f?(ys(i)))
    (i:TCallClosureIns) : (f?(f(i)), f?(ys(i)))
    (i:MatchIns) : f?(ys(i))
    (i:DispatchIns) : f?(ys(i))

defn do-dest (f:Int -> ?, i:DestinationIns) :
  match(i) :
    (i:GotoIns) : f(n(i))
    (i:Branch1Ins) : (f(n1(i)), f(n2(i)))
    (i:Branch2Ins) : (f(n1(i)), f(n2(i)))
    (i:ReturnIns) : false
    (i:TCallIns) : false
    (i:TCallClosureIns) : false
    (i:MatchIns) : do(f{n(_)}, branches(i))
    (i:DispatchIns) : do(f{n(_)}, branches(i))

defn leaves-frame? (i:OperationIns) :
  i is CallIns|CallClosureIns|CallCIns|YieldIns|NewStackIns|AllocIns

;============================================================
;====================== FreeIndexList =======================
;============================================================

deftype FreeIndexList
defmulti next (l:FreeIndexList) -> Int
defmulti free (l:FreeIndexList, x:Int) -> False

defn FreeIndexList () :
  val items = Vector<Int>()
  val indices = Vector<Int>()
  var len:Int = 0

  ;Swap item x with item y
  defn swap (x:Int, y:Int) :
    if x != y :
      val ix = indices[x]
      val iy = indices[y]
      indices[x] = iy
      indices[y] = ix
      items[ix] = y
      items[iy] = x

  defn free? (x:Int) :
    indices[x] >= len

  defn free-item (x:Int) :
    fatal("Already free") when free?(x)
    swap(x, items[len - 1])
    len = len - 1

  defn take-item (x:Int) :
    fatal("Not free") when not free?(x)
    swap(x, items[len])
    len = len + 1

  defn make-item () :    
    val x = length(items)
    add(items, x)
    add(indices, x)
    x

  defn next-free () :
    make-item() when len == length(items)
    val item = items[len]
    take-item(item)
    item
    
  new FreeIndexList :
    defmethod next (this) : next-free()
    defmethod free (this, x:Int) : free-item(x)