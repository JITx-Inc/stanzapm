defpackage stz/test-framework :
  import core
  import collections

;============================================================
;=================== Testing Structure ======================
;============================================================

protected deftype DefTest
protected defmulti name (t:DefTest) -> String
protected defmulti run (t:DefTest) -> ?
protected defmulti tags (t:DefTest) -> List<Symbol>

;============================================================
;====================== Assertion ===========================
;============================================================

protected deftype Assertion
protected defmulti run (a:Assertion) -> True|False
protected defmulti description (a:Assertion) -> String|False
protected defmulti info (a:Assertion) -> FileInfo|False
protected defmulti values (a:Assertion) -> Tuple<AssertionValue>

protected defstruct AssertionValue :
  description: String
  value: ?

;============================================================
;======================== Run Test ==========================
;============================================================

defstruct TestingState :
  num-tests: Int with: (init => 0, setter => set-num-tests)
  num-passed: Int with: (init => 0, setter => set-num-passed)

val TESTING-STATE = TestingState()

protected defn run-test (t:DefTest) :
  ;Reporting errors
  val out = STANDARD-OUTPUT-STREAM
  val out2 = IndentedStream(STANDARD-OUTPUT-STREAM)
  
  ;Print out test label
  val test-num = num-tests(TESTING-STATE) + 1
  set-num-tests(TESTING-STATE, num-tests(TESTING-STATE) + 1)
  print(out, "[Test %_] %_" % [test-num, name(t)])

  ;Redirect output to buffer
  val output-buffer = StringBuffer()
  defn with-output-redirection (body:() -> ?) :
    with-output-stream(output-buffer, body)

  ;Save the output log
  defn save-output-log () :
    println(out2, "Log saved to XXX.txt")
    ;println(out2, to-string(output-buffer))

  ;Executed upon assertion failure
  defn handle-assertion (a:Assertion) :
    println(out, " [FAIL]")
    println(out2, a)
    save-output-log()
    println(out, "")

  ;Executed upon uncaught exception
  defn handle-exception (e:Exception) :
    println(out, " [FAIL]")
    println(out2, "Uncaught Exception: %_" % [e])
    save-output-log()
    println(out, "")

  ;Executed upon fatal error
  defn handle-error () :
    println(out, " [FAIL]")
    println(out2, "Fatal Error.")
    save-output-log()
    println(out, "")

  ;Executed when test completes successfully
  defn handle-success () :
    println(out, " [PASS]")
    set-num-passed(TESTING-STATE, num-passed(TESTING-STATE) + 1)
    println(out, "")

  ;Launch test
  within execute-with-error-handler(handle-error) :
    within with-exception-handler(handle-exception) :
      within with-assertion-handler(handle-assertion) :
        within with-output-redirection() :
          run(t)
          handle-success()

;============================================================
;================== Assertion Handler =======================
;============================================================

var CURRENT-ASSERTION-HANDLER:Maybe<(Assertion -> ?)> = None()

defn with-assertion-handler (body:() -> ?, handler:Assertion -> ?) :
  label break :
    defn assertion-failed (a:Assertion) :
      handler(a)
      break()
    let-var CURRENT-ASSERTION-HANDLER = One(assertion-failed) :
      body()
    
protected defn assert (a:Assertion) :
  if not run(a) :
    value!(CURRENT-ASSERTION-HANDLER)(a)

defmethod print (o:OutputStream, a:Assertion) :
  val info-str = "" when info(a) is False
            else "%_: " % [info(a)]
  val name-str = "" when description(a) is False
            else " \"%_\"" % [description(a)]
  print(o, "%_Assertion%_ failed." % [info-str, name-str])
  val o2 = IndentedStream(o)
  do(lnprint{o2, _}, values(a))

defmethod print (o:OutputStream, v:AssertionValue) :
  print(o, "%_ = %_" % [description(v), value(v)])

;============================================================
;====================== Final Report ========================
;============================================================

public defn print-test-report () :
  val s = TESTING-STATE
  println(STANDARD-OUTPUT-STREAM, "Tests Finished: %_/%_ tests passed." % [num-passed(s), num-tests(s)])