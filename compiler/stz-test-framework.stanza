defpackage stz/test-framework :
  import core
  import collections

;============================================================
;=================== Testing Structure ======================
;============================================================

protected deftype DefTest
protected defmulti name (t:DefTest) -> String
protected defmulti run (t:DefTest) -> ?
protected defmulti tags (t:DefTest) -> List<Symbol>

;============================================================
;====================== Assertion ===========================
;============================================================

protected deftype Assertion
protected defmulti run (a:Assertion) -> True|False
protected defmulti description (a:Assertion) -> String|False
protected defmulti info (a:Assertion) -> FileInfo|False
protected defmulti values (a:Assertion) -> Tuple<AssertionValue>

protected defstruct AssertionValue :
  description: String
  value: ?

;============================================================
;======================== Run Test ==========================
;============================================================

defstruct TestingState :
  num-tests: Int with: (init => 0, setter => set-num-tests)
  num-passed: Int with: (init => 0, setter => set-num-passed)
  logger: Logger with: (init => Logger())

val TESTING-STATE = TestingState()

protected defn run-test (t:DefTest) :
  ;Reporting errors
  val out = STANDARD-OUTPUT-STREAM
  val out2 = IndentedStream(STANDARD-OUTPUT-STREAM)
  
  ;Print out test label
  val test-num = num-tests(TESTING-STATE) + 1
  set-num-tests(TESTING-STATE, num-tests(TESTING-STATE) + 1)
  print(out, "[Test %_] %_" % [test-num, name(t)])

  ;Save the output log
  defn save-output-log () :
    val path = save-log(logger(TESTING-STATE), name(t))
    println(out2, "Log saved to %_" % [path])

  ;Executed upon assertion failure
  defn handle-assertion (a:Assertion) :
    println(out, " [FAIL]")
    println(out2, a)
    save-output-log()
    println(out, "")

  ;Executed upon uncaught exception
  defn handle-exception (e:Exception) :
    println(out, " [FAIL]")
    println(out2, "Uncaught Exception: %_" % [e])
    save-output-log()
    println(out, "")

  ;Executed upon fatal error
  defn handle-error () :
    println(out, " [FAIL]")
    println(out2, "Fatal Error.")
    save-output-log()
    println(out, "")

  ;Executed when test completes successfully
  defn handle-success () :
    println(out, " [PASS]")
    set-num-passed(TESTING-STATE, num-passed(TESTING-STATE) + 1)
    println(out, "")

  ;Launch test
  within execute-with-error-handler(handle-error) :
    within with-exception-handler(handle-exception) :
      within with-assertion-handler(handle-assertion) :
        within with-output-to-buffer(logger(TESTING-STATE)) :
          run(t)
          handle-success()

;============================================================
;================== Assertion Handler =======================
;============================================================

var CURRENT-ASSERTION-HANDLER:Maybe<(Assertion -> ?)> = None()

defn with-assertion-handler (body:() -> ?, handler:Assertion -> ?) :
  label break :
    defn assertion-failed (a:Assertion) :
      handler(a)
      break()
    let-var CURRENT-ASSERTION-HANDLER = One(assertion-failed) :
      body()
    
protected defn assert (a:Assertion) :
  if not run(a) :
    value!(CURRENT-ASSERTION-HANDLER)(a)

defmethod print (o:OutputStream, a:Assertion) :
  val info-str = "" when info(a) is False
            else "%_: " % [info(a)]
  val name-str = "" when description(a) is False
            else " \"%_\"" % [description(a)]
  print(o, "%_Assertion%_ failed." % [info-str, name-str])
  val o2 = IndentedStream(o)
  do(lnprint{o2, _}, values(a))

defmethod print (o:OutputStream, v:AssertionValue) :
  print(o, "%_ = %_" % [description(v), value(v)])

;============================================================
;====================== Logger ==============================
;============================================================

deftype Logger
defmulti with-output-to-buffer (body:() -> ?, l:Logger) -> False
defmulti save-log (l:Logger, file:String) -> String

defn Logger () :
  ;Track directory name
  val dir-name = to-string("logs%_" % [current-time-ms()])
  var dir-created?:True|False = false
  defn create-dir-if-necessary () :
    if not dir-created? :
      dir-created? = true
      create-dir(dir-name)

  ;Keep buffer file
  val buffer-file-name:String|False = false
  var buffer-file:RandomAccessFile|False = false
  defn create-buffer-file-if-necessary () :
    if buffer-file is False :
      buffer-file-name = to-string("buffer%_.dat" % [current-time-ms()])
      buffer-file = RandomAccessFile(buffer-file-name as String, true)
    buffer-file as RandomAccessFile

  ;Execute body with output to a buffer
  defn with-output-to-buffer (body:() -> ?) :
    val buffer = create-buffer-file-if-necessary()
    set-length(buffer, 0L)
    val out = output-stream(buffer)
    with-output-stream(out, fn () :
      with-error-stream(out, body))
    flush(out)

  ;Save the buffer
  defn save-buffer-as (path:String) :
    ;Get the current name of the buffer
    val old-path = buffer-file-name as String
    ;Close the file
    close(buffer-file as RandomAccessFile)
    buffer-file = false
    buffer-file-name = false
    ;Move the buffer to the given path
    rename-file(old-path, path)    

  ;Track file name
  val file-count = HashTable<String,Int>(0)
  defn rename (file:String) :
    val index = update(file-count, {_ + 1}, file)
    if index == 1 : file
    else : attach-filename-suffix(file, "$%_" % [index])

  ;Create Logger
  new Logger :
    defmethod with-output-to-buffer (body:() -> ?, this) :
      with-output-to-buffer(body)
    defmethod save-log (this, file:String) :
      val filename = rename(sanitize-filename(file))
      val path = to-string("%_/%_" % [dir-name, filename])
      create-dir-if-necessary()
      save-buffer-as(path)
      path

defn attach-filename-suffix (filename:String, suffix) :
  match(last-index-of-char(filename, '.')) :
    (i:Int) :
      string-join([filename[0 to i], suffix, filename[i to false]])
    (f:False) :
      string-join([filename, suffix])

defn sanitize-filename (s:String) :
  defn acceptable? (c:Char) :
    letter?(c) or digit?(c) or
    (c == '.') or
    (c == '_') or
    (c == '-') or
    (c == '#') or
    (c == '$') or
    (c == '@') or
    (c == '%')

  if all?(acceptable?, s) :
    s
  else :
    String $ for c in s seq :
      c when acceptable?(c) else '-'

;============================================================
;====================== Final Report ========================
;============================================================

protected defn print-test-report () :
  val s = TESTING-STATE
  println(STANDARD-OUTPUT-STREAM, "Tests Finished: %_/%_ tests passed." % [num-passed(s), num-tests(s)])