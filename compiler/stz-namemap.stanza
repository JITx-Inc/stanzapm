;See License.txt for details about licensing.

defpackage stz/namemap :
   import core
   import collections
   import stz/ids
   import stz/params
   import stz/pl-ir with:
     prefix(Private Protected Public) => PL
   import stz/tl-ir

;============================================================
;================ NameMap Datastructure =====================
;============================================================

;===================
;==== Interface ====
;===================
public deftype NameMap
public defmulti get (nm:NameMap, n:Int) -> VEntry
public defmulti key? (n:NameMap, i:Int) -> True|False
public defmulti register (n:NameMap, e:VEntry) -> False
public defmulti pkg-ids (nm:NameMap, name:Symbol) -> Collection<Int>
public defmulti type-id (nm:NameMap, pkg:Symbol, name:Symbol) -> False|Int

;=====================
;==== Constructor ====
;=====================
public defn NameMap () :
  val table = IntTable<VEntry>()
  val pkg-tables = HashTable-init<Symbol,Vector<Int>>(Vector<Int>{})
  val type-table = HashTable<[Symbol,Symbol],Int>()
  
  defn add-entry (e:VEntry) :
    ;Add to table
    table[n(e)] = e
    ;Add to pkg tables
    add(pkg-tables[package(e)], n(e))
    ;Record type id
    match(type(e):TypeE|LTypeE) :
      type-table[[package(e), name(e)]] = n(e)

  new NameMap :
    defmethod register (this, e:VEntry) -> False :
      if flag-defined?(`VERBOSE) :
        println("register %~ %~/%~ @%~ as %~" % [type(e) package(e) name(e) info(e) n(e)])
      add-entry(e)
    defmethod get (this, n:Int) -> VEntry :
      table[n]
    defmethod pkg-ids (this, name:Symbol) :
      get?(pkg-tables, name, [])
    defmethod key? (this, i:Int) :
      key?(table, i)
    defmethod type-id (this, pkg:Symbol, name:Symbol) :
      get?(type-table, [pkg, name])
    defmethod print (o:OutputStream, this) :
      print(o, "NameMap:")
      for io in o do-indented :
        for entry in table do :
          print(io, "\n%_" % [entry])

;================
;==== VEntry ====
;================
public defstruct VEntry :
  n: Int
  package: Symbol
  name: Symbol
  visibility: Vis
  type: EType
  info: FileInfo

defmethod print (o:OutputStream, e:VEntry) :
  print(o, "VEntry(%_ = %_/%_ (%_, %_, %_)" % [n(e), package(e), name(e), visibility(e), type(e), info(e)])

;=========================
;==== ID-based VEntry ====
;=========================
public defstruct DeclEntry <: VEntry :
  n:Int with: (as-method => true)
  package:Symbol with: (as-method => true)
  decl:Declare

public defn old-n (nm:NameMap, d:Declare) :
  val e = nm[n(d)] as DeclEntry
  n(decl(e))

defmethod name (e:DeclEntry) :
  name(id(decl(e)))

defmethod visibility (e:DeclEntry) :
  match(id(decl(e))) :
    (id:TArgId) : Local()
    (id:FieldId) : Local()
    (id:Id) :
      match(visibility(id)) :
        (v:PLPrivate) : Private()
        (v:PLProtected) : Protected()
        (v:PLPublic) : Public()

defmethod type (e:DeclEntry) :
  match(id(decl(e))) :
    (id:ValId) : ValE()
    (id:VarId) : VarE()
    (id:FnId) : FnE()
    (id:MultiId) : MultiE()
    (id:TypeId) : TypeE()
    (id:TArgId) : TVarE()
    (id:LSValId) : LValE()
    (id:LSVarId) : LVarE()
    (id:LSFnId) : LFnE()
    (id:LSTypeId) : LTypeE()
    (id:FieldId) : FieldE()
    (id:LSExternFnId) : LFnE()
    (id:LSExternId) :
      match(type(id)) :
        (t:FnT) : LFnE()
        (t:LSType) : LVarE()
        
defmethod info (e:DeclEntry) :
  info(decl(e))

defmethod print (o:OutputStream, e:DeclEntry) :
  print(o, "Declare(%_ = %_ %_)" % [n(e), package(e), decl(e)])
  

;====================
;==== Visibility ====
;====================
public deftype Vis <: Equalable
public defstruct Private <: Vis
public defstruct Protected <: Vis
public defstruct Public <: Vis
public defstruct Local <: Vis

defmethod print (o:OutputStream, v:Vis) :
  print{o, _} $ match(v) :
    (v:Private) : "Private"
    (v:Protected) : "Protected"
    (v:Public) : "Public"
    (v:Local) : "Local"

defmethod equal? (a:Vis, b:Vis) :
  ($prim identical? a b) 

;====================
;==== Entry Type ====
;====================
public deftype EType <: Equalable
public defstruct ValE <: EType
public defstruct VarE <: EType
public defstruct TVarE <: EType
public defstruct CapVarE <: EType
public defstruct TypeE <: EType
public defstruct MultiE <: EType
public defstruct FnE <: EType
public defstruct LValE <: EType
public defstruct LVarE <: EType
public defstruct LFnE <: EType
public defstruct LTypeE <: EType
public defstruct FieldE <: EType
public defstruct LabelE <: EType

defmethod equal? (a:EType, b:EType) :
  ($prim identical? a b)

defmethod print (o:OutputStream, t:EType) :
  print{o, _} $ match(t) :
    (t:ValE) : "ValE"
    (t:VarE) : "VarE"
    (t:TVarE) : "TVarE"
    (t:CapVarE) : "CapVarE"
    (t:TypeE) : "TypeE"
    (t:MultiE) : "MultiE"
    (t:FnE) : "FnE"
    (t:LValE) : "LValE"
    (t:LVarE) : "LVarE"
    (t:LFnE) : "LFnE"
    (t:LTypeE) : "LTypeE"
    (t:FieldE) : "FieldE"
    (t:LabelE) : "LabelE"

