#use-added-syntax(stz-serializer-lang)

defpackage stz/defs-db-serializer :
  import core
  import collections
  import stz/serializer

defstruct DefsDB :
  defs : List<DefRec>

defstruct DefRec :
  name : String
  infos : List<FileInfo>

public defserializer (out:OutputStream, in:InputStream) :

  defunion defsdb (DefsDB) :
    DefsDB : (defs:list(defrec)) 

  defunion defrec (DefRec) :
    DefRec : (name:string, infos:list(fileinfo))

  defunion fileinfo (FileInfo) :
    FileInfo : (filename:string, line:int, column:int)

  reader defn read-table<?K,?V> (k: () -> ?K, v: () -> ?V) :
    val n = read-int()
    to-hashtable<K,V> $ for i in 0 to n seq : k() => v()

  writer defn write-table<?K,?V> (k: K -> False, v: V -> False, tbl:HashTable<?K,?V>) :
    write-int(length(tbl))
    for e in tbl do :
      k(key(e))
      v(value(e))

  reader defn read-list<?T> (f: () -> ?T) :
    val n = read-int()
    to-list(repeatedly(f, n))

  writer defn write-list<?T> (f: T -> False, xs:List<?T>) :
    write-int(length(xs))
    do(f, xs)
  
  defatom lit (x:?) :
    writer :
      match(x) :
        (x:Char) :
          write-byte(0Y)
          write-char(x)
        (x:Byte) :
          write-byte(1Y)
          write-byte(x)
        (x:Int) :
          write-byte(2Y)
          write-int(x)
        (x:String) :
          write-byte(3Y)
          write-string(x)
        (x:List) :
          write-byte(4Y)
          write-list(write-lit, x)
    reader :
      switch(read-byte()) :
        0Y : read-char()
        1Y : read-byte()
        2Y : read-int()
        3Y : read-string()
        4Y : read-list(read-lit)
        else : throw(DeserializeException())

  defatom byte (x:Byte) :
    writer :
      put(out, x)
    reader :
      match(get-byte(in)) :
        (x:Byte) : x
        (x:False) : throw(DeserializeException())

  defatom char (x:Char) :
    writer :
      print(out, x)
    reader :
      match(get-char(in)) :
        (x:Char) : x
        (x:False) : throw(DeserializeException())

  defatom int (x:Int) :
    writer :
      to-var-int(x, put{out, _})
    reader :
      from-var-int(read-byte)

  defatom string (x:String) :
    writer :
      write-int(length(x))
      print(out, x)
    reader :
      val n = read-int()
      String(repeatedly(read-char, n))


defn to-var-int (x:Int, Y: Byte -> False) :
  defn B0 (x:Int) : Y(to-byte(x))
  defn B1 (x:Int) : Y(to-byte(x >> 8))
  defn B2 (x:Int) : Y(to-byte(x >> 16))
  defn B3 (x:Int) : Y(to-byte(x >> 24))
  if x >= 0 :
    if x < 250 : B0(x)
    else if x < 506 : (Y(250Y), B0(x - 250))
    else if x < 762 : (Y(251Y), B0(x - 506))
    else if x < 1018 : (Y(252Y), B0(x - 762))
    else if x < 32768 : (Y(253Y), B1(x), B0(x))
    else if x < 8388608 : (Y(254Y), B2(x), B1(x), B0(x))
    else : (Y(255Y), B3(x), B2(x), B1(x), B0(x))
  else :
    if x >= -32768 : (Y(253Y), B1(x), B0(x))
    else if x >= -8388608 : (Y(254Y), B2(x), B1(x), B0(x))
    else : (Y(255Y), B3(x), B2(x), B1(x), B0(x))

defn from-var-int (N: () -> Byte) -> Int :
  defn B0 () : to-int(N())
  defn B1 () : B0() << 8
  defn B2 () : B0() << 16
  defn S1 () : (B0() << 24) >>> 16
  defn S2 () : (B0() << 24) >>> 8
  defn S3 () : (B0() << 24)

  val x = N()
  switch(x) :
    255Y : S3() | B2() | B1() | B0()
    254Y : S2() | B1() | B0()
    253Y : S1() | B0()
    252Y : B0() + 762
    251Y : B0() + 506
    250Y : B0() + 250
    else : to-int(x)

public defn serialize (out:OutputStream, defs:HashTable<String,List<FileInfo>>) :
  val db = DefsDB $ to-list $ for e in defs seq : DefRec(key(e), value(e))
  serialize(out, db)

public defn deserialize (in:InputStream) -> HashTable<String,List<FileInfo>> :
  val db = deserialize-defsdb(in) as DefsDB
  to-hashtable<String,List<FileInfo>> $ for def in defs(db) seq : name(def) => infos(def)

