#use-added-syntax(stz-serializer-lang)
defpackage stz/defs-db-serializer :
  import core
  import collections
  import stz/serializer

public defenum SrcDefinitionKind : 
  SrcDefUnknown
  SrcDefMulti 
  SrcDefMethod 
  SrcDefFunction 
  SrcDefVariable
  SrcDefType
  SrcDefPackage

public public defenum SrcDefinitionSource : 
  PkgDefinition 
  SrcDefinition

public defstruct Definition : 
  name:      String,
  file-info: FileInfo 
  kind:      SrcDefinitionKind 
  source:    SrcDefinitionSource

public defstruct DefinitionsDatabase: 
  reserved-words: Tuple<String>, 
  definitions: HashTable<String, List<Definition>>

defstruct IDefinition : 
  file-info: FileInfo 
  kind:      Int
  source:    Int

defstruct IDefinitionRecord: 
  name: String, 
  definitions: Tuple<IDefinition>

defstruct IDefinitionsDatabase: 
  reserved-words: Tuple<String>, 
  definitions: Tuple<IDefinitionRecord>

public defstruct DefsDB :
  reserved-words : Tuple<String>
  packages : Tuple<String>
  pkg-id-defs : HashTable<String, List<FileInfo>>
  id-defs : HashTable<String, List<FileInfo>>

defstruct IDefsDB :
  ireserved-words : Tuple<String>
  ipackages : Tuple<String>
  ipkg-id-defs : Tuple<DefRec>
  iid-defs : Tuple<DefRec>

defstruct DefRec :
  name : String
  infos : List<FileInfo>

public defserializer (out:OutputStream, in:InputStream) : 
  defunion idefinitions-database (IDefinitionsDatabase) :
    IDefinitionsDatabase : (reserved-words:tuple(string), definitions:tuple(idefinition-record))

  defunion idefinition-record (IDefinitionRecord):
    IDefinitionRecord : (name:string, definitions:tuple(idefinition))

  defunion idefinition (IDefinition) : 
    IDefinition : (file-info:fileinfo, kind:int, source:int)
  
  defunion fileinfo (FileInfo) :
    FileInfo : (filename:string, line:int, column:int)

  reader defn read-table<?K,?V> (k: () -> ?K, v: () -> ?V) :
    val n = read-int()
    to-hashtable<K,V> $ for i in 0 to n seq : k() => v()

  writer defn write-table<?K,?V> (k: K -> False, v: V -> False, tbl:HashTable<?K,?V>) :
    write-int(length(tbl))
    for e in tbl do :
      k(key(e))
      v(value(e))

  reader defn read-list<?T> (f: () -> ?T) :
    val n = read-int()
    to-list(repeatedly(f, n))

  writer defn write-list<?T> (f: T -> False, xs:List<?T>) :
    write-int(length(xs))
    do(f, xs)
  
  reader defn read-tuple<?T> (f: () -> ?T) :
    val n = read-int()
    to-tuple(repeatedly(f, n))

  writer defn write-tuple<?T> (f: T -> False, xs:Tuple<?T>) :
    write-int(length(xs))
    do(f, xs)
  
  defatom lit (x:?) :
    writer :
      match(x) :
        (x:Char) :
          write-byte(0Y)
          write-char(x)
        (x:Byte) :
          write-byte(1Y)
          write-byte(x)
        (x:Int) :
          write-byte(2Y)
          write-int(x)
        (x:String) :
          write-byte(3Y)
          write-string(x)
        (x:List) :
          write-byte(4Y)
          write-list(write-lit, x)
        (x:Tuple) :
          write-byte(5Y)
          write-tuple(write-lit, x)
    reader :
      switch(read-byte()) :
        0Y : read-char()
        1Y : read-byte()
        2Y : read-int()
        3Y : read-string()
        4Y : read-list(read-lit)
        5Y : read-tuple(read-lit)
        else : throw(DeserializeException())

  defatom byte (x:Byte) :
    writer :
      put(out, x)
    reader :
      match(get-byte(in)) :
        (x:Byte) : x
        (x:False) : throw(DeserializeException())

  defatom char (x:Char) :
    writer :
      print(out, x)
    reader :
      match(get-char(in)) :
        (x:Char) : x
        (x:False) : throw(DeserializeException())

  defatom int (x:Int) :
    writer :
      to-var-int(x, put{out, _})
    reader :
      from-var-int(read-byte)

  defatom string (x:String) :
    writer :
      write-int(length(x))
      print(out, x)
    reader :
      val n = read-int()
      String(repeatedly(read-char, n))

public defserializer (out:OutputStream, in:InputStream) : 
  defunion idefsdb (IDefsDB) :
    IDefsDB : (ireserved-words:tuple(string), ipackages:tuple(string), ipkg-id-defs:tuple(defrec), iid-defs:tuple(defrec)) 

  defunion idefinitions-database (IDefinitionsDatabase) :
    IDefinitionsDatabase : (reserved-words:tuple(string), definitions:tuple(idefinition-record))

  defunion idefinition-record (IDefinitionRecord):
    IDefinitionRecord : (name:string, definitions:tuple(idefinition))

  defunion idefinition (IDefinition) : 
    IDefinition : (file-info:fileinfo, kind:int, source:int)
  
  defunion defrec (DefRec) :
    DefRec : (name:string, infos:list(fileinfo))

  defunion fileinfo (FileInfo) :
    FileInfo : (filename:string, line:int, column:int)

  reader defn read-table<?K,?V> (k: () -> ?K, v: () -> ?V) :
    val n = read-int()
    to-hashtable<K,V> $ for i in 0 to n seq : k() => v()

  writer defn write-table<?K,?V> (k: K -> False, v: V -> False, tbl:HashTable<?K,?V>) :
    write-int(length(tbl))
    for e in tbl do :
      k(key(e))
      v(value(e))

  reader defn read-list<?T> (f: () -> ?T) :
    val n = read-int()
    to-list(repeatedly(f, n))

  writer defn write-list<?T> (f: T -> False, xs:List<?T>) :
    write-int(length(xs))
    do(f, xs)
  
  reader defn read-tuple<?T> (f: () -> ?T) :
    val n = read-int()
    to-tuple(repeatedly(f, n))

  writer defn write-tuple<?T> (f: T -> False, xs:Tuple<?T>) :
    write-int(length(xs))
    do(f, xs)
  
  defatom lit (x:?) :
    writer :
      match(x) :
        (x:Char) :
          write-byte(0Y)
          write-char(x)
        (x:Byte) :
          write-byte(1Y)
          write-byte(x)
        (x:Int) :
          write-byte(2Y)
          write-int(x)
        (x:String) :
          write-byte(3Y)
          write-string(x)
        (x:List) :
          write-byte(4Y)
          write-list(write-lit, x)
        (x:Tuple) :
          write-byte(5Y)
          write-tuple(write-lit, x)
    reader :
      switch(read-byte()) :
        0Y : read-char()
        1Y : read-byte()
        2Y : read-int()
        3Y : read-string()
        4Y : read-list(read-lit)
        5Y : read-tuple(read-lit)
        else : throw(DeserializeException())

  defatom byte (x:Byte) :
    writer :
      put(out, x)
    reader :
      match(get-byte(in)) :
        (x:Byte) : x
        (x:False) : throw(DeserializeException())

  defatom char (x:Char) :
    writer :
      print(out, x)
    reader :
      match(get-char(in)) :
        (x:Char) : x
        (x:False) : throw(DeserializeException())

  defatom int (x:Int) :
    writer :
      to-var-int(x, put{out, _})
    reader :
      from-var-int(read-byte)

  defatom string (x:String) :
    writer :
      write-int(length(x))
      print(out, x)
    reader :
      val n = read-int()
      String(repeatedly(read-char, n))


defn to-var-int (x:Int, Y: Byte -> False) :
  defn B0 (x:Int) : Y(to-byte(x))
  defn B1 (x:Int) : Y(to-byte(x >> 8))
  defn B2 (x:Int) : Y(to-byte(x >> 16))
  defn B3 (x:Int) : Y(to-byte(x >> 24))
  if x >= 0 :
    if x < 250 : B0(x)
    else if x < 506 : (Y(250Y), B0(x - 250))
    else if x < 762 : (Y(251Y), B0(x - 506))
    else if x < 1018 : (Y(252Y), B0(x - 762))
    else if x < 32768 : (Y(253Y), B1(x), B0(x))
    else if x < 8388608 : (Y(254Y), B2(x), B1(x), B0(x))
    else : (Y(255Y), B3(x), B2(x), B1(x), B0(x))
  else :
    if x >= -32768 : (Y(253Y), B1(x), B0(x))
    else if x >= -8388608 : (Y(254Y), B2(x), B1(x), B0(x))
    else : (Y(255Y), B3(x), B2(x), B1(x), B0(x))

defn from-var-int (N: () -> Byte) -> Int :
  defn B0 () : to-int(N())
  defn B1 () : B0() << 8
  defn B2 () : B0() << 16
  defn S1 () : (B0() << 24) >>> 16
  defn S2 () : (B0() << 24) >>> 8
  defn S3 () : (B0() << 24)

  val x = N()
  switch(x) :
    255Y : S3() | B2() | B1() | B0()
    254Y : S2() | B1() | B0()
    253Y : S1() | B0()
    252Y : B0() + 762
    251Y : B0() + 506
    250Y : B0() + 250
    else : to-int(x)

public defn serialize (out:OutputStream, db:DefsDB) :
  val idb = IDefsDB(reserved-words(db), packages(db),
                    to-tuple $ qsort{name, _} $ for e in pkg-id-defs(db) seq : DefRec(key(e), value(e))
                    to-tuple $ qsort{name, _} $ for e in id-defs(db) seq : DefRec(key(e), value(e)))
  serialize(out, idb)

public defn serialize (out:OutputStream, ddb:DefinitionsDatabase) :
  val definitions = to-tuple $
    for kv in definitions $ ddb seq : 
      val name = key(kv)
      val defs = to-tuple $
        for def in value(kv) seq : 
          IDefinition(
            file-info(def), 
            to-int(kind(def)), 
            to-int(source(def)),
          )
      IDefinitionRecord(name, defs)
  val iddb = IDefinitionsDatabase(
    reserved-words(ddb), 
    definitions,
  )
  serialize(out, iddb)

public defn deserialize (in:InputStream) -> DefsDB :
  val db = deserialize-idefsdb(in) as IDefsDB
  DefsDB(ireserved-words(db),
         ipackages(db),
         to-hashtable<String,List<FileInfo>> $ for def in ipkg-id-defs(db) seq : name(def) => infos(def),
         to-hashtable<String,List<FileInfo>> $ for def in iid-defs(db) seq : name(def) => infos(def))

public defn deserialize-ddb (in:InputStream) -> DefinitionsDatabase : 
  val iddb = deserialize-idefinitions-database(in) as IDefinitionsDatabase
  val reserved-words = reserved-words(iddb)   ; Tuple<String> 
  val idefinition-records = definitions(iddb) ; List<IDefinitionRecord> 
  val definitions =  ;HashTable<String, List<Definition>>(List())
    to-hashtable<String, List<Definition>> $ 
      for idefrec in idefinition-records seq : 
        val name  = name(idefrec) ; String
        val idefs = definitions(idefrec) ; List<IDefinition> 
        var defs  = List()
        for idef in idefs do : 
          val definition = Definition(
            name, 
            file-info(idef),
            SrcDefinitionKind(kind(idef)),
            SrcDefinitionSource(source(idef)),
          )
          defs = cons(definition, defs)
        name => defs
  DefinitionsDatabase(reserved-words, definitions)

defmethod print (o:OutputStream, kind:SrcDefinitionKind):
  val string = 
    match(kind):
      (_:SrcDefUnknown):  "unknown", 
      (_:SrcDefMulti):    "multi", 
      (_:SrcDefMethod):   "method", 
      (_:SrcDefFunction): "function", 
      (_:SrcDefVariable): "variable", 
      (_:SrcDefType):     "type", 
      (_:SrcDefPackage):  "package",
  print(o, string)
