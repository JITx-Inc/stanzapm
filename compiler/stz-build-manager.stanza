defpackage stz/build-manager :
  import core
  import collections
  import stz/proj
  import stz/utils
  import stz/front-end
  import stz/aux-file
  import stz/proj-manager

public deftype BuildManager
public defmulti dependencies (b:BuildManager, packages:Tuple<Symbol>) -> ProjDependencies
public defmulti target (b:BuildManager, name:Symbol) -> BuildStmt
public defmulti target-up-to-date? (b:BuildManager, name:Symbol) -> True|False
public defmulti build-commands (b:BuildManager, ds:ProjDependencies) -> Tuple<CompileStmt>
public defmulti update-aux-file (b:BuildManager, target:Symbol, package-stamps:Tuple<PackageStamp>, files:Tuple<FileStamp>) -> False

public defn BuildManager (proj:ProjFile) :
  ;Build requirements and build table
  val req-table = to-hashtable(package,
    filter-by<RequiresStmt>(stmts(proj)))
  val build-table = to-hashtable(name,
    filter-by<BuildStmt>(stmts(proj)))
  val compile-table = to-hashtable(file,
    filter-by<CompileStmt>(stmts(proj)))
  ;Read auxiliary file
  val aux-file = read-aux-file?("stanza.aux2")
  ;Return build manager
  new BuildManager :
    defmethod target (this, name:Symbol) :
      throw(NoBuildTarget(name)) when not key?(build-table, name)
      build-table[name]
    defmethod target-up-to-date? (this, name:Symbol) :
      val rec = for r in records(aux-file) find :
        match(r:BuildRecord) :
          target(r) == name
      match(rec:BuildRecord) :
        all?(up-to-date?, packages(rec)) and
        all?(up-to-date?, files(rec))        
    defmethod dependencies (this, packages:Tuple<Symbol>) :
      defn field? (field:RequiresStmt -> Tuple<String>, p:Symbol) -> Tuple<String> :
        match(get?(req-table, p)) :
          (r:RequiresStmt) : field(r)
          (f:False) : []
      val ccfiles* = unique $ seq-cat(field?{ccfiles, _}, packages)
      val ccflags* = unique $ seq-cat(field?{ccflags, _}, packages)
      ProjDependencies(to-tuple(ccfiles*), to-tuple(ccflags*))
    defmethod build-commands (this, ds:ProjDependencies) :
      to-tuple $ for file in cat(ccfiles(ds), ccflags(ds)) seq? :
        match(get?(compile-table, file)) :
          (s:CompileStmt) : One(s)
          (f:False) : None()
    defmethod update-aux-file (this, target:Symbol, packages:Tuple<PackageStamp>, files:Tuple<FileStamp>) :
      val aux-file = read-aux-file?("stanza.aux2")
      val aux-file* = add(aux-file, [BuildRecord(target, packages, files)])
      write-aux-file("stanza.aux2", aux-file*)

;============================================================
;=================== Check Up-to-Date =======================
;============================================================

defn timestamp? (file:String|False) :
  match(file:String) :
    time-modified(file) when file-exists?(file)

defn up-to-date? (s:FileStamp) :
  timestamp?(filename(s)) == timestamp(s)

defn up-to-date? (s:PackageStamp) :
  val l = location(s)
  if read-pkg?(l) :
    timestamp?(pkg-file(l)) == pkg-timestamp(s) and
    timestamp?(source-file(l)) == source-timestamp(s)
  else :
    timestamp?(source-file(l)) == source-timestamp(s)

;============================================================
;===================== Result Structures ====================
;============================================================

public defstruct ProjDependencies :
  ccfiles: Tuple<String>
  ccflags: Tuple<String>

;============================================================
;======================== Errors ============================
;============================================================

public defstruct NoBuildTarget <: Exception :
  name: Symbol

defmethod print (o:OutputStream, e:NoBuildTarget) :
  print(o, "No build target named %~." % [name(e)])