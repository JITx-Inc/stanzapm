defpackage stz/build-manager :
  import core
  import collections
  import stz/proj
  import stz/utils
  import stz/front-end
  import stz/aux-file
  import stz/proj-manager

public deftype BuildManager
public defmulti dependencies (b:BuildManager, packages:Tuple<Symbol>) -> ProjDependencies
public defmulti target (b:BuildManager, name:Symbol) -> BuildStmt
public defmulti build-commands (b:BuildManager, ds:ProjDependencies) -> Tuple<BuildCommand>

public defn BuildManager (proj:ProjFile, aux-file:AuxFile) :
  ;Build requirements and build table
  val req-table = to-hashtable(package,
    filter-by<RequiresStmt>(stmts(proj)))
  val build-table = to-hashtable(name,
    filter-by<BuildStmt>(stmts(proj)))
  val compile-file-table = to-hashtable(name,
    filter(file?, filter-by<CompileStmt>(stmts(proj))))
  val compile-flag-table = to-hashtable(name,
    filter({not file?(_)}, filter-by<CompileStmt>(stmts(proj))))
  ;Return build manager
  new BuildManager :
    defmethod target (this, name:Symbol) :
      throw(NoBuildTarget(name)) when not key?(build-table, name)
      build-table[name]
    defmethod dependencies (this, packages:Tuple<Symbol>) :
      defn field? (field:RequiresStmt -> Tuple<String>, p:Symbol) -> Tuple<String> :
        match(get?(req-table, p)) :
          (r:RequiresStmt) : field(r)
          (f:False) : []
      val ccfiles* = unique $ seq-cat(field?{ccfiles, _}, packages)
      val ccflags* = unique $ seq-cat(field?{ccflags, _}, packages)
      ProjDependencies(to-tuple(ccfiles*), to-tuple(ccflags*))
    defmethod build-commands (this, ds:ProjDependencies) :
      to-tuple $ cat(
        for file in ccfiles(ds) seq :
          val stmt = get?(compile-file-table, file)
          BuildCommand(true, file, stmt)
        for flag in ccflags(ds) seq :
          val stmt = get?(compile-flag-table, flag)
          BuildCommand(false, flag, stmt))

;============================================================
;===================== Result Structures ====================
;============================================================

public defstruct ProjDependencies :
  ccfiles: Tuple<String>
  ccflags: Tuple<String>

public defstruct BuildCommand :
  file?: True|False
  name: String
  compile: CompileStmt|False

;============================================================
;======================== Errors ============================
;============================================================

public defstruct NoBuildTarget <: Exception :
  name: Symbol

defmethod print (o:OutputStream, e:NoBuildTarget) :
  print(o, "No build target named %~." % [name(e)])