defpackage stz/kform :
  import core
  import collections
  import stz/pl-ir
  import stz/kl-ir
  import stz/khier
  import stz/ids
  import stz/dec-table
  import stz/tgt-ir
  import stz/utils
  import stz/primitives
  import stz/kform-to-tgt
  import stz/algorithms

;============================================================
;======================= Driver =============================
;============================================================

public defn compile (pkgs:List<KPkgComm>) -> List<TGPackage> :
  var dec-table = compute-declaration-table(pkgs)
  val hier = KHierarchy(seq-cat(hier-entries, pkgs))

  var pkgs* = for pkg in pkgs map :
    match(pkg) :
      (pkg:TGPackage) :
        pkg
      (#pkg:KPackage) :
        var pkg:KPackage = #pkg
        vheader("Package %_" % [name(pkg)])
        vprintln(pkg)
        pkg = analyze-stack-properties(pkg)
        vheader("Package %_ : After Analyzing Stack Properties" % [name(pkg)])
        vprintln(pkg)        
        pkg = map-method-targs(dec-table, pkg)
        vheader("Package %_ : After Mapping Method Targs" % [name(pkg)])
        vprintln(pkg)
        pkg = create-closures(dec-table, pkg)
        vheader("Package %_ : After Creating Closures" % [name(pkg)])
        vprintln(pkg)
        pkg = convert-mixes(dec-table, pkg)
        vheader("Package %_ : After Converting Mixes" % [name(pkg)])
        vprintln(pkg)
        pkg = guard-boundary(dec-table, pkg)
        vheader("Package %_ : After Guarding Boundary" % [name(pkg)])
        vprintln(pkg)

        ;Package is done here.
        pkg = lift-constants(dec-table, pkg)
        vheader("Package %_ : After Lifting Constants" % [name(pkg)])
        vprintln(pkg)
        pkg = box-mutables(dec-table, pkg)
        vheader("Package %_ : After Boxing Mutables" % [name(pkg)])
        vprintln(pkg)
        pkg = simple-inline(pkg)
        vheader("Package %_ : After Simple Inlining" % [name(pkg)])
        vprintln(pkg)
        pkg = elide-checks(dec-table, hier, pkg)
        vheader("Package %_ : After Eliding Checks" % [name(pkg)])
        vprintln(pkg)

        lambda-lift(dec-table, pkg)

        pkg = lift-objects(dec-table, pkg)
        vheader("Package %_ : After Lifting Objects" % [name(pkg)])
        vprintln(pkg)
        pkg = lift-closures(dec-table, pkg)
        vheader("Package %_ : After Lifting Closures" % [name(pkg)])
        vprintln(pkg)
        pkg = primitive-tagging(pkg)
        vheader("Package %_ : After Tagging Primitives" % [name(pkg)])
        vprintln(pkg)
        pkg = reify-types(pkg)
        vheader("Package %_ : After Reifying Types" % [name(pkg)])
        vprintln(pkg)
        pkg
        
  dec-table = compute-declaration-table(pkgs*)
  for pkg in pkgs* map :
    match(pkg) :
      (pkg:TGPackage) : pkg
      (pkg:KPackage) : to-tgpackage(dec-table, pkg)

;============================================================
;============== Compute Declaration Table ===================
;============================================================

defn compute-declaration-table (pkgs:List<KPkgComm>) :
  val table = DecTable()
  defn scan (e:KTExp) :
    defn scan-e (e:KExp) :
      do(scan-e, e)
      register(table, e)
    register(table, e)
    do(scan-e, e)
  for pkg in pkgs do :
    match(pkg) :
      (pkg:KPackage) : do(scan, exps(pkg))
      (pkg:TGPackage) : false ;do(register{table, _}, declarations(ids(pkg)))
  table

;============================================================
;=================== Stack Properties =======================
;============================================================

;TODO: This is not a good way of exposing this feature.
defn analyze-stack-properties (pkg:KPackage) :
  ;Returns analyzed stack properties and new body.
  ;(If the body it's not the checkstack)
  defn stack-properties (e:KExp) -> [StackProperties, KExp] :
    match(e) :
      (e:KSeq) :
        val [sp, a*] = stack-properties(a(e))
        [sp, KSeq(a*, b(e))]
      (e:KPrim) :
        switch(op(e) as? LSPrimitive) :
          LS-NEW-STACK-OP : [NewStack(), KLiteral(false)]
          LS-LAST-STACK-OP : [LastStack(), KLiteral(false)]
          else : fail()
      (e) :
        fail()

  defn fe (e:KExp) :
    match(map(fe,e)) :
      (e:KFn) :
        attempt :
          val [sp, body*] = stack-properties(body(e))
          attach-sp-body(e, sp, body*)
        else : e        
      (e) : e
  defn fte (e:KTExp) : print-if-annotated(map(fe,e))
  map(fte, pkg)  

;============================================================
;================== Method TArg Mapping =====================
;============================================================

defn inverse-solve (input-xs:List<Int>, input-targs:List<KType>) -> [List<Int>, List<KType>] :
  ;Created targs
  val ys = map(fresh-id{}, input-targs)
  ;Simplify
  val targs = map(trivial-simplify, input-targs)
  ;Initialize solved table
  val solved = IntTable<Int>()
  defn update (x:Int, y:Int) :
    set?(solved, x, {y})
  ;Precise Solutions
  for (t in targs, y in ys) do :
    match(t:KTVar) : update(n(t), y)
  ;Approximate Solutions
  for (t in targs, y in ys) do :
    let loop (t:KType = t) :
      match(t) :
        (t:KTVar) : update(n(t), y)
        (t:KOr) : do(loop, t)
        (t) : false
  ;Invert solutions
  val solns = for x in input-xs map :
    match(get?(solved,x)) :
      (y:Int) : KTVar(y)
      (y:False) : KTop()
  ;Return solutions
  [ys, solns]

defn map-methods (pkg:KPackage, dec-table:DecTable, f:(KFn|KFn*, Int, List<KType>) -> KFn|KFn*) :
  defn registered (e:KTExp) : (register(dec-table,e), e)
  defn fe (e:KExp) :
    match(map(fe,e)) :
      (e:KMethod*) :
        val value* = f(value(e) as KFn|KFn*, multi(e), targs(e))
        KMethod(props(e), multi(e), thisn(e), value*)
      (e) : e
  defn fte (e:KTExp) :
    print-if-annotated $ match(map(fe,e)) :
      (e:KDefmethod*) :
        val value* = f(value(e) as KFn|KFn*, multi(e), targs(e))
        registered(KDefmethod(props(e), fresh-id(), multi(e), value*))
      (e) : e
  map(fte, pkg)

defn replace-tvars (e:KExp, xs:List<Int>, ts:List<KType>) :
  val table = to-hashtable<Int,KType>(xs,ts)
  defn fe (e:KExp) :
    val e* = map(fe, e)
    map(replace-tvars{_:KType, table}, e*)
  fe(e)

defn attach (f:KFn|KFn*, targs:List<Int>, a1:List<KType>, a2:KType) :
  match(f) :
    (f:KFn) : KFn(tail?(f), stack-properties(f), targs, a1, a2, args(f), body(f), info(f))
    (f:KFn*) : KFn*(tail?(f), targs, a1, a2, args(f), body(f), info(f))

defn map-method-targs (dec-table:DecTable, pkg:KPackage) :
  map-methods(pkg, dec-table
    fn (f:KFn|KFn*, m:Int, targ-types:List<KType>) :
      val [targs*, targ-types*] = inverse-solve(targs(f), targ-types)
      val [multi-a1, multi-a2] = fn-types(dec-table, m, map(KTVar,targs*))
      val f* = replace-tvars(f, targs(f), targ-types*) as KFn|KFn*
      val a1* = map(KAnd, multi-a1, a1(f*))
      val a2* = KAnd(multi-a2, a2(f*))
      attach(f*, targs*, a1*, a2*))

;============================================================
;===================== Closure Creation =====================
;============================================================

defn map-closures (pkg: KPackage, dec-table: DecTable
                   f: KMix|KCurry|KVar -> KFn|KMultifn) -> KPackage :
  ;Track newly introduced global functions
  val global-functions = HashTable-init<Int,KDefConst> $
    KDefConst{fresh-id(), f(KVar(_))}
  defn lift-function (func:Int) :
    n(global-functions[func])
  defn prepend-defs (pkg:KPackage) :
    do(register{dec-table, _}, values(global-functions))
    attach-exps(pkg, append(values(global-functions), exps(pkg)))

  ;Map over expressions
  defn fe (e:KExp) :
    match(map-without-functions(fe, e)) :
      (e:KMix|KCurry) :
        f(e)
      (e:KVar|KVar*) :
        if global?(dec-table,n(e)) and function?(dec-table, n(e)) :
          KVar(lift-function(n(e)))
        else : e
      (e) :
        e
  defn fte (e:KTExp) : print-if-annotated(map(fe, e))
  prepend-defs(map(fte,pkg))

defn create-closures (dec-table:DecTable, pkg:KPackage) -> KPackage :
  defn mix-fn (dec-table:DecTable, f:KMix|KCurry|KVar) :
    defn make-fn (f:KExp, arity:Int) :
      val args* = map(fresh-id{}, 0 to arity)
      val body = KDo(f, KVars(args*), KTop(), false)
      val info = let loop (f:KExp = f) :
        match(f) :
          (f:KVar|KCurry) : info(dec-table, n(f))
          (f:KMix) : loop(head(exps(f)))
      KFn(true, CheckStack(), List(), KTops(args*), KTop(), args*, body, info)

    match(f) :
      (f:KCurry|KVar) :
        make-fn(f, arity(dec-table, n(f)))
      (f:KMix) :
        val groups = IntTable<List<KCurry|KVar|KVar*>>(List())
        for exp in exps(f) as List<KCurry|KVar|KVar*> do :
          val n = arity(dec-table, n(exp))
          update(groups, cons{exp, _}, n)
        KMultifn{to-list(_)} $ for entry in groups seq :
          val [n, fs] = [key(entry), value(entry)]
          if length(fs) == 1 : make-fn(head(fs), n)
          else : make-fn(KMix(fs), n)

  map-closures(pkg, dec-table, mix-fn{dec-table, _})

;============================================================
;===================== Mix Conversion =======================
;============================================================

defn map-mixes (pkg:KPackage, f: KDo|KDo* -> KExp) :
  defn fe (e:KExp) :
    match(map(fe,e)) :
      (e:KDo|KDo*) :
        match(func(e):KMix) : f(e)
        else : e
      (e) : e
  defn fte (e:KTExp) :
    print-if-annotated(map(fe, e))
  map(fte, pkg)

defn convert (dec-table:DecTable, e:KDo|KDo*) :
  ;===== Utilities =====
  ;Construct a call to f with given arguments and return type
  defn Do (f:KExp, args:List<KExp>, a2:KType) :
    match(e) :
      (e:KDo) : KDo(f, args, a2, info(e))
      (e:KDo*) : KDo*(f, args, a1(e), a2, info(e))

  ;Retrieve argument types for function
  defn arg-types (e:KExp) :
    val n = n(e as KVar|KVar*|KCurry)
    fst(/fn-types(dec-table, n))

  ;Retrieve argument types for given function
  defn fn-types (f:KCurry|KVar|KVar*) :
    match(f) :
      (f:KVar|KVar*) : /fn-types(dec-table, n(f), List())
      (f:KCurry) : /fn-types(dec-table, n(f), targs(f))

  ;===== Stages =====
  ;Pull out definitions to before call
  defn pull-out-defs (e:KDo|KDo*) :
    val defs = Vector<KeyValue<Int,KExp>>()
    val args* = Vector<KVar>()
    for x in args(e) do :
      match(x) :
        (x:KVar) :
          add(args*, x)
        (x) :
          val id = fresh-id()
          add(defs, id => x)
          add(args*, KVar(id))
    KLet(defs, make-dispatch(func(e) as KMix, to-list(args*)))

  ;Make a call to func with given args
  defn make-dispatch (func:KMix, args:List<KExp>) :
    if all?(histanza?, arg-types(head(exps(func)))) :
      val bs = for f in exps(func) as List<KCurry|KVar|KVar*> map :
        val args* = map(fresh-id{}, args)
        val [a1, a2] = fn-types(f)
        KBranch(args*, a1, Do(f, KVars(args*), a2))
      KDispatch(args, bs, info(e))
    else :
      ;Compute mask
      val refmask = map(histanza?, arg-types(head(exps(func))))
      val refargs = select(args, refmask)
      ;Create branches
      val bs = for f in exps(func) as List<KCurry|KVar|KVar*> map :
        val refargs* = map(fresh-id{}, refargs)
        val args* = replace(args, refmask, KVars(refargs*))
        val [a1, a2] = fn-types(f)
        KBranch(refargs*, select(a1,refmask), Do(f,args*,a2))
      ;Create dispatch
      KDispatch(refargs, bs, info(e))

  ;Driver
  pull-out-defs(e)

defn convert-mixes (dec-table:DecTable, pkg:KPackage) -> KPackage :
  map-mixes(pkg, convert{dec-table, _})

;============================================================
;=================== Boundary Guards ========================
;============================================================

defn guard-boundary (dec-table:DecTable, pkg:KPackage) :
  ;Guard a call to a known function
  defn guard-call-to-known (e:KDo*, tail-pos?:True|False) :
    val [n, targs] = n+targs(func(e))
    val [a1, a2] = fn-types(dec-table, n, targs)
    ;Guard arguments when necessary
    val args* =
      if guarded?(dec-table, n) :
        args(e)
      else :
        map(KCheck{_, _, ARG-ERROR-TYPE, info(e)}, args(e), a1)
    ;Make call
    val call = KDo(func(e), args*, a2, info(e))
    ;Determine whether return should be guarded
    val guard-return? =
      if tail-pos? : false
      else if not guarded?(dec-table, n) : true
      else if tail?(dec-table, n) : true
      else : false
    ;Guard return when necessary
    if guard-return? : KCheck(call, a2, RETURN-ERROR-TYPE, info(e))
    else : call

  ;Guard a call to an unknown function
  defn guard-call-to-unknown (e:KDo*, tail-pos?:True|False) :
    val args* = map(KCheck{_, _, ARG-ERROR-TYPE, info(e)}, args(e), a1(e))
    val func* = KCheck(func(e), KOf(FN-TYPE-ID), CALL-ERROR-TYPE, info(e))
    val call = KDo(func*, args*, a2(e), info(e))
    if tail-pos? : call
    else : KCheck(call, a2(e), RETURN-ERROR-TYPE, info(e))

  ;Cast expression to just the variables tvars in the type
  defn KCheckTVar (e:KExp, t:KType, i:False|FileInfo) :
    defn strip (t:KType) :
      if has-var?(t) :
        match(t:KOr) : t
        else : map(strip, t)
      else : KTop()
    KCheck(e, trivial-simplify(strip(t)), ARG-ERROR-TYPE, i)

  ;Add boundary guards
  defn guard (e:KExp, tail-pos?:True|False, method-pos?:True|False, loc-pos?:True|False) :
    defn recur (e:KExp) :
      map-tail(guard{_, _, e is KMethod, false}, e, tail-pos?)
    match(e) :
      (e:KMethod) :
        defn args! (e:KExp) : args(e as KFn|KFn*)
        val i = index-of!(args!(value(e)), thisn(e))
        val e* = recur(e) as KMethod
        val thisn* = args!(value(e*))[i]
        KMethod(props(e), multi(e*), thisn*, value(e*))        
      (e0:KFn*) :
        val e = recur(e0) as KFn*
        ;Check arguments
        val args* = map(fresh-id{}, args(e))
        val defs = for (a in args(e), a* in args*, t in a1(e)) map :
          if method-pos? : a => KCheckTVar(KVar(a*), t, info(e))
          else : a => KCheck(KVar(a*), t, ARG-ERROR-TYPE, info(e))
        ;Check return
        val body* =
          if tail?(e) : body(e)
          else : map-return(KCheck{_, a2(e), RETURN-ERROR-TYPE, info(e)}, body(e))
        ;Create function
        KFn(tail?(e), CheckStack(), targs(e), a1(e), a2(e),
            args*, KLet(defs, body*), info(e))
      (e:KDo*) :
        recur $ match(func(e)) :
          (f:KVar|KVar*) :
            if function?(dec-table, n(f)) : guard-call-to-known(e, tail-pos?)
            else : guard-call-to-unknown(e, tail-pos?)
          (f:KCurry) : guard-call-to-known(e, tail-pos?)
          (f) : guard-call-to-unknown(e, tail-pos?)
      (e:KVar*) :
        val check? =
          (not loc-pos?) and                    ;Not in location position and
          (not function?(dec-table, n(e))) and  ;Not a function and
          guarded?(dec-table, n(e)) and (       ;Guarded and
            global?(dec-table, n(e)) or           ;Global or
            mutable?(dec-table, n(e)) and         ;Mutable and
            not initialized?(dec-table, n(e)))    ;not initialized
        if check? : KEnsureSet(KVar(n(e)), info(e))
        else : KVar(n(e))
      (e:KLet*) :
        val v* = KCheck(value(e), type(e), DEF-ERROR-TYPE, info(e))
        recur(KLet(n(e), v*, body(e)))
      (e:KLetVar*) :
        val v* = attempt: KCheck(value(e) as? KExp, type(e), DEF-ERROR-TYPE, info(e))
        recur(KLetVar(n(e), type(e), v*, body(e)))
      (e:KSet*) :
        val loc = guard(exp(e), false, false, true)
        val v = guard(value(e), false, false, false)
        val v* = match(loc) :
          (loc:KVar) :
            if guarded?(dec-table, n(loc)) :
              KCheck(v, type(e), SET-ERROR-TYPE, info(e))
            else : v
          (loc) : v
        KSet(loc, type(e), v*)
      (e0:KBranch*) :
        val e = recur(e0) as KBranch*
        val guards = for (a in args(e), t in types(e)) map :
          KCheckTVar(KVar(a), t, info(e))
        val body* = KSeq(guards, body(e))
        KBranch(args(e), types(e), body*)
      (e0:KEnsureLength) :
        val e = recur(e0) as KEnsureLength
        val v = KCheck(exp(e), KOf(TUPLE-TYPE-ID), TUPLE-ERROR-TYPE, info(e))
        KEnsureLength(v, length(e), info(e))
      (e:KField) :
        KField(guard(exp(e), false, false, loc-pos?), n(e))
      (e:KPtr) :
        KPtr(guard(loc(e), false, false, true))
      (e) :
        recur(e)

  ;Add guards
  defn guard (e:KTExp) :    
    defn recur (e:KTExp) :
      map(guard{_, false, e is KDefmethod, false}, e)
    print-if-annotated $ match(recur(e)) :
      (e:KDef*) :
        val v* = KCheck(value(e), type(e), DEF-ERROR-TYPE, info(e))
        KDef(n(e), type(e), v*)
      (e:KDefVar*) :
        val v* = attempt: KCheck(value(e) as? KExp, type(e), DEF-ERROR-TYPE, info(e))
        KDefVar(n(e), type(e), v*)
      (e) : e

  map(guard, pkg)

;============================================================
;================== Free Variable Analysis ==================
;============================================================
defn compute-freevars (dec-table:DecTable, pkg:KPackage) :
  ;Variable tracking
  var vars = IntSet()
  var tvars = IntSet()
  defn use-var (v:Int) : add(vars, v)
  defn def-var (v:Int) : remove(vars, v)
  defn use-tvar (v:Int) : add(tvars, v)
  defn def-tvar (v:Int) : remove(tvars, v)
  defn all-vars () : to-list(vars)
  defn all-tvars () : to-list(tvars)

  ;Mapping function
  defn scan (e:KExp) -> KExp :
    match(e) :
      (e:KFn) :
        val e* =
          let-var vars = IntSet() :
            let-var tvars = IntSet() :
              val e* = map-bound-rev(scan, def-var, def-tvar, scan, e) as KFn
              attach(e*, KFnStat(all-vars(), all-tvars()))
        do(use-var, freevars(e*))
        do(use-tvar, freetypes(e*))
        e*
      (e) :
        for v in e do-used-vars :
          use-var(v) when not global?(dec-table, v)
        do-used-tvars(use-tvar, e)
        map-bound-rev(scan, def-var, def-tvar, scan, e)
        
  ;Scanning a top level expression
  defn scan (e:KTExp) : map(scan, e)
  map(scan, pkg)        

;============================================================
;==================== Constant Lifting ======================
;============================================================

defn lift-constants (dec-table:DecTable, pkg:KPackage) :
  val defs = Vector<KDefConst>()
  defn prepend-defs (pkg:KPackage) :
    do(register{dec-table, _}, defs)
    attach-exps(pkg, append(defs, exps(pkg)))
  defn make-const (v) :
    val n = fresh-id()
    add(defs, KDefConst(n,v))
    KVar(n)
  defn fe (e:KExp) :
    match(map(fe,e)) :
      (e:KLiteral) :
        match(value(e)) :
          (v:Long|Double|String|Symbol|List) : make-const(v)
          (v) : e
      (e) : e
  defn fte (e:KTExp) : print-if-annotated(map(fe,e))
  prepend-defs(map(fte,pkg))

;============================================================
;================ Mutable Variable Lifting ==================
;============================================================
defn box-mutables (dec-table:DecTable, pkg:KPackage) :
  ;Compute closed over set
  val [closed-over, local-vars] = let :
    val cset = IntSet()
    val vset = IntSet()
    defn scan (e:KExp) :
      do(scan, e)
      match(e) :
        (e:KFn) : add-all(cset, freevars(e))
        (e:KLetVar) : add(vset, n(e))
        (e) : false
    defn scan (e:KTExp) : do(scan, e)
    do(scan, compute-freevars(dec-table, pkg))
    [cset, vset]

  ;Box a variable
  defn box? (n:Int) :
    local-vars[n] and closed-over[n]
  defn box? (e:KExp) :
    match(e:KVar) : box?(n(e))    

  ;Algorithm
  defn lift (e:KExp) :
    defn recur (e:KExp) : map(lift, e)
    match(e) :
      (e:KLetVar) :
        recur $
          if box?(n(e)) : KLet(n(e), KBox(value(e)), body(e))
          else : e
      (e:KVar) :
        if box?(n(e)) : KBoxGet(e)
        else : e
      (e:KSet) :
        if box?(exp(e)) : KBoxSet(exp(e), lift(value(e)))
        else : recur(e)
      (e) :
        recur(e)
        
  defn lift (e:KTExp) : print-if-annotated(map(lift, e))
  map(lift, pkg)  

;============================================================
;======================= Renaming ===========================
;============================================================

defn rename (e:KExp, vs:Seqable<Int>) :
  rename(e, seq({_ => fresh-id()}, vs))
  
defn rename (e:KExp, vs:Seqable<KeyValue<Int,Int>>) :
  ;Rename table
  val table = to-hashtable<Int,Int>(vs)

  defn fi (i:Int) :
    get?(table, i, i)
  defn ft (t:KType) :
    match(t) :
      (t:KTVar) : KTVar(fi(n(t)))
      (t) : map(ft, t)
  defn fe (e:KExp) :
    map-ids(fi,map(fe,map(ft,e)))
  fe(e)  

;============================================================
;================== Simple Inlining =========================
;============================================================

deftype CallGraph
defmulti num-references (g:CallGraph, n:Int) -> Int
defmulti reachable? (g:CallGraph, src:Int, dst:Int) -> True|False
defmulti successors (g:CallGraph, n:Int) -> List<Int>

;Construct call graph
defn call-graph (pkg:KPackage) :
  ;Discover edges
  val graph = HashTable<KeyValue<Int,Int>,Int>(0)
  defn add-edge (src:Int, dst:Int) :
    update(graph, {_ + 1}, src => dst)
    false
  defn scan (ctxt:Int, e:KExp) :
    match(e) :
      (e:KVar|KCurry) : add-edge(ctxt, n(e))
      (e:KLetRec) :
        do(scan, ns(e), values(e) as List<KFn|KMultifn>)
        scan(ctxt, body(e))
      (e) : do(scan{ctxt, _}, e)
  for e in exps(pkg) do :
    match(e) :
      (e:KDefn) :
        scan(n(e), value(e))
        add-edge(0, n(e)) when not private?(e)
      (e:KDefmethod) :
        scan(n(e), value(e))
        add-edge(0, n(e))
      (e:KExternFn) :
        scan(n(e), value(e))
        add-edge(0, n(e))
      (e) :
        do(scan{0, _}, e)

  ;Compute successor graph
  val succ-graph = IntTable<List<Int>>(List())
  defn add-succ (n:Int, succ:Int) :
    update(succ-graph, cons{succ, _}, n)
  for entry in graph do :
    val [k, n] = [key(entry), value(entry)]
    val [src, dst] = [key(k), value(k)]
    add-succ(src, dst)

  ;Compute predecessor graph
  val pred-graph = IntTable<List<KeyValue<Int,Int>>>(List())
  defn add-pred (n:Int, pred:Int, weight:Int) :
    update(pred-graph, cons{pred => weight, _}, n)
  for entry in graph do :
    val [k, n] = [key(entry), value(entry)]
    val [src, dst] = [key(k), value(k)]
    add-pred(dst, src, n)

  ;Compute reachability
  val VISITED = IntSet()
  defn reachable? (src:Int, dst:Int) :
    val result = let dst? (n:Int = src) :
      if not VISITED[n] :
        if n == dst :
          true
        else :
          add(VISITED,n)
          any?(dst?, succ-graph[n])
    clear(VISITED)      
    result

  new CallGraph :
    defmethod num-references (this, n:Int) -> Int :      
      sum $ seq(value, pred-graph[n])
    defmethod reachable? (this, src:Int, dst:Int) -> True|False :
      reachable?(src, dst)
    defmethod successors (this, n:Int) -> List<Int> :
      succ-graph[n]

;Inline
defn inline (f:KFn, call-targs:List<KType>, call-args:List<KExp>) :
  ;Verify input arity, fail otherwise
  defn same-length? (xs:List, ys:List) : length(xs) == length(ys)
  if not (same-length?(targs(f), call-targs) and
          same-length?(args(f), call-args)) :
    fail()
  ;Substitute type variables
  var body* = replace-tvars(body(f), targs(f), call-targs)
  ;Create identifier for ending block
  var end-block = false
  defn end-label () :
    match(end-block) :
      (id:Int) :
        id
      (id:False) :
        end-block = fresh-id()
        end-block as Int
  ;Remove return expressions
  defn remove-returns (body:KExp) :
    ;Return the expression e
    defn return (e:KExp) :
      match(e) :
        (e:KReturn) :
          jump(exp(e))
        (e) :
          map-tail{_, e, true} $ fn (e, ret?) :
            if ret? : return(e)
            else : jump(e)
    ;Jump to ending block for any return expression
    defn jump (e:KExp) :
      match(map(jump, e)) :
        (e:KReturn) :
          KGoto(end-label(), List(exp(e)))
        (e) : e
    ;Body is initially in return position
    return(body)    
  ;Bind arguments
  body* =
    KLet(map(KeyValue, args(f), call-args),
         remove-returns(body*))
  ;Create labeled blocks if necessary
  match(end-block) :
    (end-block-id:False) :
      body*
    (end-block-id:Int) :
      ;Body block
      val body-block = KBlock(fresh-id(), List(), List(), body*)
      ;End block
      val ret-arg = fresh-id()
      val end-block = KBlock(end-block-id, List(ret-arg), List(a2(f)), KVar(ret-arg))
      ;Label construct
      KLabels(List(body-block, end-block))

defn inline (f:KMultifn, call-targs:List<KType>, call-args:List<KExp>) :
  defn same-length? (xs:List, ys:List) : length(xs) == length(ys)
  val f* = for f in funcs(f) as List<KFn> find :
    same-length?(targs(f), call-targs) and
    same-length?(args(f), call-args)
  match(f*) :
    (f*:KFn) : inline(f*, call-targs, call-args)
    (f*:False) : fail()

defn simple-inline (pkg:KPackage) :
  ;Compute call graph
  val graph = call-graph(pkg)

  ;A function is inlined if it is only referenced once
  defn inlined? (n:Int) :
    num-references(graph, n) == 1

  ;Inline table
  val inline-table = IntTable<KFn|KMultifn>()
  defn add-inline-entries (es:Collection<KeyValue<Int,KFn|KMultifn>>) :
    val table = to-hashtable<Int,KFn|KMultifn>(es)
    defn loop (n:Int) :
      match(get?(table,n)) :
        (f:KFn|KMultifn) :
          remove(table,n)
          do(loop, successors(graph,n))
          inline-table[n] = inline-calls(n,f) as KFn|KMultifn
        (f:False) :
          false
    do(loop{key(_)}, es)

  ;Perform all simple inlining
  defn inline-calls (ctxt:Int, e:KExp) -> KExp :
    ;Is function n reachable from current context
    defn referenced? (n:Int) : reachable?(graph, ctxt, n)
    ;Recursively inline sub expression in current context
    defn recur (e:KExp) : inline-calls(ctxt, e)
    ;Retrieve function to inline or fail
    defn inline-func (e:KExp) :
      match(e) :
        (e:KVar|KCurry) :
          match(get?(inline-table,n(e))) :
            (f:KFn|KMultifn) : f
            (f:False) : fail()
        (e:KFn|KMultifn) : e
        (e) : fail()
    ;Retrieve the type arguments given the function expression
    defn targs! (e:KExp) :
      match(e:KCurry) : targs(e)
      else : List()
    ;Dispatch based on type of expression
    match(e) :
      (e:KLetRec) :
        ;Track which entries to inline/not inline
        val inline = Vector<KeyValue<Int,KFn|KMultifn>>()
        val dont-inline = Vector<KeyValue<Int,KFn|KMultifn>>()
        for (n in ns(e), v in values(e)) do :
          val f = v as KFn|KMultifn
          if referenced?(n) :
            if inlined?(n) : add(inline, n => f)
            else : add(dont-inline, n => f)
        ;Add inline entries
        add-inline-entries(inline)
        ;Recurse upon non-inline entries
        if empty?(dont-inline) :
          recur(body(e))
        else :
          val ns = to-list(seq(key,dont-inline))
          val vs = to-list(seq(recur{value(_)},dont-inline))
          KLetRec(ns, vs, recur(body(e)))
      (e:KVar) :
        match(get?(inline-table, n(e))) :
          (f:KFn|KMultifn) : f
          (f:False) : e
      (e:KDo) :
        attempt :
          val f = inline-func(func(e))
          val args* = map(recur, args(e))
          attempt : inline(f, targs!(func(e)), args*)
          else : fatal("Not inlinable")
        else :
          map(recur, e)
      (e) :
        map(recur, e)

  ;Divide top-level expressions into inlinable entries (inline)
  ;and non-inlinable entries (accum).
  val inline-exps = Vector<KeyValue<Int,KFn|KMultifn>>()
  val accum-exps = Vector<KTExp>()  
  for e in exps(pkg) do :
    match(e) :
      (e:KDefn) :
        defn check-stack? (f:KExp) :
          match(f) :
            (f:KFn) : stack-properties(f) is CheckStack
            (f:KMultifn) : all?(check-stack?, funcs(f))
        if private?(e) and check-stack?(value(e)) and inlined?(n(e)) :
          add(inline-exps, n(e) => value(e) as KFn|KMultifn)
        else : add(accum-exps, e)
      (e) : add(accum-exps, e)
      
  add-inline-entries(inline-exps)
  for e in accum-exps map! :
    print-if-annotated $ map(inline-calls{0, _}, e)
  attach-exps(pkg, to-list(accum-exps))

;============================================================
;================== Type Inference ==========================
;============================================================

;Wrap up every expression in a KTypedExp (preserving implicit structure).
defn map-types (dec-table:DecTable, pkg:KPackage, bindvar: (Int, KType) -> ?, infer:KExp -> KType) :
  ;Call type-exp on all children of e
  defn recur-exp (e:KExp) -> KExp :
    match(e) :
      (e:KLet) :
        val v* = type-exp(value(e)) as KTypedExp
        bindvar(n(e), type(v*))
        KLet(n(e), v*, type-exp(body(e)))
      (e:KLetVar) :
        val v* = attempt: type-exp(value(e) as? KExp)
        bindvar(n(e), type(e))
        KLetVar(n(e), type(e), v*, type-exp(body(e)))
      (e:KLetRec) :
        do(bindvar{_, KOf(FN-TYPE-ID)}, ns(e))
        val values* = map(recur-exp, values(e))
        val body* = type-exp(body(e))
        KLetRec(ns(e), values*, body*)
      (e:KBranch) :
        do(bindvar, args(e), types(e))
        map(type-exp, e)
      (e:KBlock) :
        do(bindvar, args(e), types(e))
        map(type-exp, e)
      (e:KFn) :
        do(bindvar{_, KTop()}, args(e)) ;Do not assume inputs are valid
        map(type-exp, e)
      (e) :
        map-implicit-structure{dec-table, _, e} $ fn (e, structured?) :
          if structured? : recur-exp(e)
          else : type-exp(e)
  ;Wrap up in a KTypedExp when appropriate
  defn type-exp (e:KExp) -> KExp :
    val e* = recur-exp(e)
    KTypedExp(e*, infer(e*))      
  ;Driver
  for e in pkg map :
    map-implicit-structure{_, e} $ fn (e, structured?) :
      if structured? : recur-exp(e)
      else : type-exp(e)

defn infer-types (dec-table:DecTable, pkg:KPackage) :
  ;Utilities
  defn type! (e:KExp) : type(e as KTypedExp)
  defn body! (e:KExp) : body(e as KBranch|KBlock)

  ;LoStanza literal type
  defn ls-literal-type (v) :
    match(v) :
      (v:Byte) : KByteT()
      (v:Char) : KByteT()
      (v:Int) : KIntT()
      (v:Long) : KLongT()
      (v:Float) : KFloatT()
      (v:Double) : KDoubleT()
      (v:String) : KPtrT(KByteT())
      (v:True) : KOf(TRUE-TYPE-ID)
      (v:False) : KOf(FALSE-TYPE-ID)      

  ;HiStanza literal type
  defn hs-literal-type (v) :
    KOf $ match(v) :
      (v:Byte) : BYTE-TYPE-ID
      (v:Char) : CHAR-TYPE-ID
      (v:Int) : INT-TYPE-ID
      (v:Long) : LONG-TYPE-ID
      (v:Float) : FLOAT-TYPE-ID
      (v:Double) : DOUBLE-TYPE-ID
      (v:String) : STRING-TYPE-ID
      (v:Symbol) : SYMBOL-TYPE-ID
      (v:List) : LIST-TYPE-ID
      (v:True) : TRUE-TYPE-ID
      (v:False) : FALSE-TYPE-ID

  ;Detag a HiStanza type
  defn ls-detag-type (n) :
    switch(n) :
      BYTE-TYPE-ID : KByteT()
      CHAR-TYPE-ID : KByteT()
      INT-TYPE-ID : KIntT()
      FLOAT-TYPE-ID : KFloatT()
  
  ;Local Environment
  val local-table = IntTable<KType>()

  ;Algorithm
  map-types(dec-table, pkg,
    fn (n:Int, t:KType) :
      local-table[n] = t
    fn (e:KExp) :
      match(e) :
        (e:KLet) : type!(body(e))
        (e:KLetVar) : type!(body(e))
        (e:KLetRec) : type!(body(e))
        (e:KVar) :
          match(get?(local-table, n(e))) :
            (t:KType) : t
            (t:False) : var-type(dec-table, n(e))
        (e:KSet) : KOf(FALSE-TYPE-ID)
        (e:KNew) : type(e)
        (e:KTuple) : KOf(TUPLE-TYPE-ID)
        (e:KTupleGet) : KTop()
        (e:KEnsureLength) : KOf(TUPLE-TYPE-ID)
        (e:KObject) : KOf(n(e))
        (e:KArray) : KOf(n(e))
        (e:KStruct) : KStructT(n(e))
        (e:KPtr) : KPtrT(type!(loc(e)))
        (e:KDo) : type(e)
        (e:KDoC) : type(e)
        (e:KLSLiteral) : ls-literal-type(value(e))
        (e:KLiteral) : hs-literal-type(value(e))
        (e:KInterpret) : type(e)
        (e:KCheck) : KAnd?(type!(exp(e)), type(e))
        (e:KConv) : type(e)
        (e:KAndExp) : KLongT()
        (e:KOrExp) : KLongT()
        (e:KPrim) : type(e)
        (e:KSizeof) : KLongT()
        (e:KTagof) : KLongT()
        (e:KMatch) : KOr?(map(type!{body!(_)}, branches(e)))
        (e:KLabels) : KOr?(map(type!{body!(_)}, blocks(e)))
        (e:KIf) : KOr?(type!(conseq(e)), type!(alt(e)))
        (e:KSeq) : type!(b(e))
        (e:KGoto) : KBot()
        (e:KReturn) : KBot()
        (e:KDeref) : type(e)
        (e:KDeptr) : type(e)
        (e:KField) : field-type(dec-table, n(e))
        (e:KSlot) : type(e)
        (e:KFn) : KOf(FN-TYPE-ID)
        (e:KMultifn) : KOf(FN-TYPE-ID)
        (e:KDispatch) : KOr?(map(type!{body!(_)}, branches(e)))
        (e:KEnsureSet) : type!(exp(e))
        (e:KNewObject) : KOf(n(e))
        (e:KObjectGet) : KTop()
        (e:KObjectTGet) : KOf(TYPE-TYPE-ID)
        (e:KLetType) : type!(body(e))
        (e:KBox) : KOf(BOX-TYPE-ID)
        (e:KBoxGet) : KTop()
        (e:KBoxSet) : KOf(FALSE-TYPE-ID)
        (e:KClosure) : KOf(FN-TYPE-ID)
        (e:KTagPrim) : KOf(n(e))
        (e:KDetagPrim) : ls-detag-type(n(e)))

;============================================================
;================== Elide Checks ============================
;============================================================

defn elide-checks (dec-table:DecTable, hier:KHierarchy, pkg:KPackage) :
  defn type! (e:KExp) : type(e as KTypedExp)
  defn elide (e:KExp) :
    match(e) :
      (e:KCheck) :
        if subtype?(hier, type!(exp(e)), type(e)) : elide(exp(e))
        else : map(elide, e)
      (e:KTypedExp) : elide(exp(e))
      (e) : map(elide, e)
  val pkg* = infer-types(dec-table, pkg)    
  for e in pkg* map : map(elide,e)

;============================================================
;=================== Lambda Lifting =========================
;============================================================

;Compute usage table
defn usage-table (pkg:KPackage) :
  val used = IntSet()
  for e in pkg do :
    defn scan (e:KExp, call-pos?:True|False) :
      match(e) :
        (e:KVar) :
          add(used, n(e)) when not call-pos?
        (e:KDo) :
          scan(func(e), true)
          do(scan-false, args(e))
        (e) :
          do(scan-false, e)
    defn scan-false (e:KExp) : scan(e, false)
    do(scan-false, e)
  used

;Returns a hashtable that maps n => [vs ..., ts ...].
;  Where vs,ts is the list of all freevars,freetypes that need to be
;  passed in to n for lifting.
defn lift-table (used:IntSet, pkg:KPackage) :
  ;Utilities
  defn freevars (f:KFn|KMultifn) :
    match(f) :
      (f:KFn) : /freevars(f)
      (f:KMultifn) : unique(seq-cat(/freevars, funcs(f) as List<KFn>))
  defn freevars+freetypes (f:KFn|KMultifn) :
    match(f) :
      (f:KFn) : append(/freevars(f), freetypes(f))
      (f:KMultifn) : unique(seq-cat(freevars+freetypes, funcs(f) as List<KFn>))

  ;Gather all functions
  val functions = Vector<KeyValue<Int,KFn|KMultifn>>()
  val var-table = IntSet()
  for e in pkg do :
    defn scan (e:KExp) :
      do(scan,e)
      match(e:KLetRec) :
        val vs = values(e) as List<KFn|KMultifn>
        add-all(var-table, seq-cat(freevars,vs))
        add-all(functions, map(KeyValue,ns(e),vs))
    do(scan, e)

  ;Anchors are functions that have been determined to not be lifted
  val anchors = IntSet()

  ;Populate lift table with all functions that can be lifted
  ;in the given function group
  val argss = fixpoint $
    fn (assumptions-changed) :
      ;Maximum lift
      val max-args = 6
      ;Compute lifting args
      val argss = bipartite-closure $
        for entry in functions seq? :
          val [n, f] = [key(entry), value(entry)]
          ;Lift if not anchor, and if less freevars than max-args
          if anchors[n] :
            None()
          else :
            val vs = freevars+freetypes(f)
            if length(vs) > max-args : None()
            else : One(n => vs)
      ;Verify assumptions
      for entry in argss do :
        val [f, args] = [key(entry), value(entry)]
        ;It's an anchor if:
        ;  1. It has freevars and it's used as first-class value, or
        ;  2. The number of freevars exceeds max-args
        if (used[f] and not empty?(args)) or
           (length(args) > max-args) :
          add(anchors, f)
          assumptions-changed()        
      ;Return lifting arguments
      argss

  ;Return as table
  to-hashtable<Int,[List<Int>,List<Int>]> $
    for entry in argss seq :
      defn var? (n:Int) : var-table[n]
      val [vars,types] = split!(var?, value(entry))
      key(entry) => [to-list(vars), to-list(types)]

defn lambda-lift (dt:DecTable, pkg0:KPackage) :
  ;Compute free variables
  val pkg = compute-freevars(dt, pkg0)

  ;Compute lift tables
  val used = usage-table(pkg)
  val lift-table = lift-table(used, pkg)

  println("Lift Table:")
  do(println, lift-table)
  
;============================================================
;=================== Object Lifting =========================
;============================================================

defn lift-objects (dec-table:DecTable, pkg:KPackage) :
  ;Track lifts
  val defs = Vector<KTExp>()
  defn prepend-defs (pkg:KPackage) :
    attach-exps(pkg, append(defs, exps(pkg)))

  defn free (e:KNew) -> [List<Int>, List<Int>] :
    val vs = Vector<Int>()
    val ts = Vector<Int>()
    for m in methods(e) as List<KMethod> do :
      val f = value(m) as KFn
      add-all(vs, freevars(f))
      add-all(ts, freetypes(f))
    [unique(vs), unique(ts)]
  
  defn create-object (e:KNew) :
    val id = fresh-id()    
    val [vs,ts] = free(e)
    ;Define object
    add(defs, KDefObject(id, name(e), type(e), length(ts), length(vs)))
    ;Pull out methods
    for m in methods(e) as List<KMethod> do :
      val f = value(m) as KFn
      val def-vars = for v in freevars(f) seq :
        val i = index-of!(vs,v)
        v => KObjectGet(KVar(thisn(m)), id, i)
      val def-tvars = for v in freetypes(f) seq :
        val i = index-of!(ts,v)
        v => KObjectTGet(KVar(thisn(m)), id, i)
      val body* = KLet(cat(def-vars, def-tvars),body(f))
      val a1* = for (a in args(f), t in a1(f)) map :
        if a == thisn(m) : KOf(id)
        else : erase-tvars(t,ts)
      val a2* = erase-tvars(a2(f),ts)
      val f* = attach-a1-a2-body(f, a1*, a2*,
                 rename(body*,append(vs,ts)))
      add(defs, KDefmethod(props(m), fresh-id(), multi(m), f*))
    ;Create object
    KNewObject(id, KTVars(ts), KVars(vs), info(e))

  defn fe (e:KExp) :
    match(map(fe,e)) :
      (e:KNew) : create-object(e)
      (e) : e
  defn fte (e:KTExp) : print-if-annotated(map(fe,e))
  prepend-defs(map(fte, compute-freevars(dec-table,pkg)))

;============================================================
;==================== Closure Lifting =======================
;============================================================

defn lift-closures (dec-table:DecTable, pkg:KPackage) :
  ;Track lifts
  val defs = Vector<KTExp>()
  defn prepend-defs (pkg:KPackage) :
    attach-exps(pkg, append(defs, exps(pkg)))

  ;Removing an int
  defn minus (xs:List<Int>, y:Int) :
    to-list(filter({_ != y}, xs))

  defn free (closure:Int, e:KFn|KMultifn) -> [List<Int>, List<Int>] :
    match(e) :
      (e:KFn) :
        [freevars(e) - closure, freetypes(e)]
      (e:KMultifn) :
        val vs = Vector<Int>()
        val ts = Vector<Int>()
        for f in funcs(e) as List<KFn> do :
          add-all(vs, freevars(f))
          add-all(ts, freetypes(f))
        [unique(vs) - closure, unique(ts)]

  defn create-closure (closure:Int, e:KFn|KMultifn) :
    val id = fresh-id()
    val [vs,ts] = free(closure, e)
    val closure* = fresh-id()
    val vs* = map(fresh-id{}, vs)
    val ts* = map(fresh-id{}, ts)
    val subs = cat-all $ [
                [closure => closure*]
                 seq(KeyValue,vs,vs*)
                 seq(KeyValue,ts,ts*)]
    val e* = rename(e, subs)
    ;Define closure
    add(defs, KDefClosure(id, closure*, ts*, vs*, e*))
    ;Make closure object
    val info = match(e) :
      (e:KFn) : info(e)
      (e:KMultifn) : info(head(funcs(e)) as KFn)
    KClosure(id, KTVars(ts), KVars(vs), info)

  defn fe (e:KExp) :
    defn recur (e:KExp) :
      match(e) :
        (e:KLetRec) : KLetRec(ns(e), map(recur,values(e)), fe(body(e)))
        (e:KMultifn) : map(recur,e)
        (e) : map(fe, e)
    match(recur(e)) :
      (e:KLetRec) :
        val vs* = for (n in ns(e), v in values(e)) map :
          create-closure(n, v as KFn|KMultifn)
        KLetRec(ns(e), vs*, body(e))
      (e:KMultifn|KFn) : create-closure(fresh-id(), e)
      (e) : e

  defn fte (e:KTExp) :
    print-if-annotated $ match(e) :
      (e:KDefn|KExternFn|KDefmethod) : map(map{fe, _:KExp}, e)
      (e) : map(fe, e)
  prepend-defs(map(fte,compute-freevars(dec-table,pkg)))

;============================================================
;================== Type Reification ========================
;============================================================

defn reify-types (pkg:KPackage) :
  val defs = Vector<KTExp>()
  defn prepend-defs (pkg:KPackage) :
    attach-exps(pkg, append(defs, exps(pkg)))

  ;Table of types
  val type-table = HashTable<KType,Int>(normalized-hash, normalized-equal?)
  defn create-type-object (t:KType) :
    match(t:KTVar) :
      t
    else :
      val ts = freevars(t)
      match(get?(type-table, t)) :
        (n:Int) :
          if empty?(ts) : KTVar(n)
          else : KTypeObject(n, KTVars(ts))
        (_:False) :
          val n = fresh-id()
          add(defs, KDefTypeObject(n, ts, t))
          if empty?(ts) :
            val obj-n = fresh-id()
            type-table[t] = obj-n
            add(defs, KDefConst(obj-n, KTypeObject(n, List())))
            KTVar(obj-n)
          else :
            type-table[t] = n
            KTypeObject(n, KTVars(ts))

  defn fe (e:KExp) :
    match(map(fe,e)) :
      (e:KCheck) :
        val tobj = create-type-object(type(e))
        KCheck(exp(e), type(e), tobj, option(e), info(e))
      (e) :
        map-used-types(create-type-object,e)
  defn fte (e:KTExp) : print-if-annotated(map(fe,e))
  prepend-defs(map(fte, pkg))

;============================================================
;================== Primitive Tagging =======================
;============================================================

defn primitive-tagging (pkg:KPackage) :

  ;Detag a field expression or fail otherwise
  defn detag (e:KField) :
    val n = switch(n(e)) :
      BYTE-VALUE-FIELD-ID : BYTE-TYPE-ID
      CHAR-VALUE-FIELD-ID : CHAR-TYPE-ID
      INT-VALUE-FIELD-ID : INT-TYPE-ID
      FLOAT-VALUE-FIELD-ID : FLOAT-TYPE-ID
      else : fail()
    val de = exp(e) as? KDeref
    KDetagPrim(n, exp(de))

  ;Tag an object expression or fail otherwise
  defn tag (e:KObject) :
    val ns = [BYTE-TYPE-ID, CHAR-TYPE-ID, INT-TYPE-ID, FLOAT-TYPE-ID]
    fail() when not contains?(ns, n(e))
    KTagPrim(n(e), head(args(e)))

  defn fe (e:KExp) :
    match(map(fe,e)) :
      (e:KField) :
        attempt: detag(e)
        else : e
      (e:KObject) :
        attempt: tag(e)
        else : e
      (e) :
        e

  defn fte (e:KTExp) : print-if-annotated(map(fe,e))
  map(fte, pkg)
      

;============================================================
;===================== Fancy Mappers ========================
;============================================================

defn print-if-annotated (e:KTExp) -> KTExp :
  defn annotated? (e:KTExp) :
    match(e:KDefmethod*|KDefn|KDefmethod|KExternFn) :
      show-optimization?(props(e))
  println(e) when annotated?(e)
  e

defn map-without-functions (f:KExp -> KExp, e:KExp) :
  defn ff (e:KExp) :
    match(e:KVar|KCurry|KMix|KVar*) : e
    else : f(e)
  defn fs (es:List<KExp>) :
    map(f, es)
  match(e) :
    (e:KDo*) : KDo*(ff(func(e)), fs(args(e)), a1(e), a2(e), info(e))
    (e:KDo) : KDo(ff(func(e)), fs(args(e)), type(e), info(e))
    (e:KDoC) : KDoC(ff(func(e)), fs(args(e)), fs(varargs(e)), type(e))
    (e) : map(f,e)

defn map-tail (f:(KExp, True|False) -> KExp, e:KExp, tail-pos?:True|False) :
  defn ftail (e:KExp) : f(e, true)
  defn farg (e:KExp) : f(e, false)
  defn fcont (e:KExp) : f(e, tail-pos?)
  defn fargs (e:List<KExp>) : map(farg, e)
  defn fconts (e:List<KExp>) : map(fcont, e)
  defn farg? (e:KExp|False) : match(e:KExp) : farg(e)

  match(e) :
    ;Input Expressions
    (e:KFn*) :
      val body* = f(body(e), tail?(e))
      KFn*(tail?(e), targs(e), a1(e), a2(e), args(e), body*, info(e))
    (e:KLet*) :
      val value* = farg(value(e))
      val body* = fcont(body(e))
      KLet*(n(e), type(e), value*, body*, info(e))
    (e:KLetVar*) :
      val value* = farg?(value(e))
      val body* = fcont(body(e))
      KLetVar*(n(e), type(e), value*, body*, info(e))
    (e:KBranch*) :
      val body* = fcont(body(e))
      KBranch*(args(e), types(e), body*, info(e))
    ;Standard Expressions
    (e:KLet) :
      val value* = farg(value(e))
      val body* = fcont(body(e))
      KLet(n(e), value*, body*)
    (e:KLetVar) :
      val value* = farg?(value(e))
      val body* = fcont(body(e))
      KLetVar(n(e), type(e), value*, body*)
    (e:KLetRec) :
      val values* = fargs(values(e))
      val body* = fcont(body(e))
      KLetRec(ns(e), values*, body*)
    (e:KMatch) :
      val args* = fargs(args(e))
      val branches* = fconts(branches(e))
      KMatch(args*, branches*, info(e))
    (e:KBranch) :
      val body* = fcont(body(e))
      KBranch(args(e), types(e), body*)
    (e:KLabels) :
      KLabels(fconts(blocks(e)))
    (e:KBlock) :
      KBlock(n(e), args(e), types(e), fcont(body(e)))
    (e:KIf) :
      KIf(farg(pred(e)), fcont(conseq(e)), fcont(alt(e)))
    (e:KSeq) :
      KSeq(farg(a(e)), fcont(b(e)))
    (e:KReturn) :
      KReturn(ftail(exp(e)))
    (e:KFn) :
      val body* = f(body(e), tail?(e))
      KFn(tail?(e), stack-properties(e), targs(e), a1(e), a2(e), args(e), body*, info(e))
    ;Working Expressions
    (e:KDispatch) :
      val args* = fargs(args(e))
      val branches* = fconts(branches(e))
      KDispatch(args*, branches*, info(e))
    ;Otherwise
    (e) :
      map(farg, e)

defn map-return (f:KExp -> KExp, e:KExp) :
  defn scan (e:KExp, ret-pos?:True|False) :
    match(e:KReturn) :
      map(scan{_, true}, e)
    else: if has-body?(e) :
      map-tail(scan, e, ret-pos?)
    else if ret-pos? :
      f(map(scan{_, false}, e))
    else :
      map(scan{_, false}, e)
  scan(e, true)

defn map-ids (f:Int -> Int, e:KExp) :
  defn fs (xs:List<Int>) : map(f,xs)
  match(e) :
    (e:KLet) : KLet(f(n(e)), value(e), body(e))
    (e:KLetVar) : KLetVar(f(n(e)), type(e), value(e), body(e))
    (e:KLetRec) : KLetRec(fs(ns(e)), values(e), body(e))
    (e:KVar) : KVar(f(n(e)))
    (e:KObject) : KObject(f(n(e)), args(e), info(e))
    (e:KArray) : KArray(f(n(e)), args(e), info(e))
    (e:KStruct) : KStruct(f(n(e)), args(e))
    (e:KCurry) : KCurry(f(n(e)), targs(e))
    (e:KTagof) : KTagof(f(n(e)))
    (e:KBranch) : KBranch(fs(args(e)), types(e), body(e))
    (e:KBlock) : KBlock(f(n(e)), fs(args(e)), types(e), body(e))
    (e:KGoto) : KGoto(f(n(e)), args(e))
    (e:KField) : KField(exp(e), f(n(e)))
    (e:KFn) : KFn(tail?(e), stack-properties(e), fs(targs(e)), a1(e), a2(e),
                  fs(args(e)), body(e), info(e), stats(e))
    (e:KMethod) : KMethod(props(e), f(multi(e)), f(thisn(e)), value(e))
    (e:KNewObject) : KNewObject(f(n(e)), targs(e), args(e), info(e))
    (e:KLetType) : KLetType(f(n(e)), value(e), body(e))
    (e:KClosure) : KClosure(f(n(e)), targs(e), args(e), info(e))
    (e) : e

defn map-implicit-structure (dec-table:DecTable, f: (KExp, True|False) -> KExp, e:KExp) -> KExp :
  defn ftrue (e:KExp) : f(e, true)
  defn ffalse (e:KExp) : f(e, false)
  defn ffunc (e:KExp) :
    match(e) :
      (e:KVar) : f(e, function?(dec-table,n(e)))
      (e:KCurry) : ftrue(e)
      (e) : ffalse(e)
  match(e) :
    (e:KLetRec) : KLetRec(ns(e), map(ftrue,values(e)), ffalse(body(e)))
    (e:KMatch) : KMatch(map(ffalse,args(e)), map(ftrue,branches(e)), info(e))
    (e:KDispatch) : KDispatch(map(ffalse,args(e)), map(ftrue,branches(e)), info(e))
    (e:KLabels) : map(ftrue, e)
    (e:KDo) : KDo(ffunc(func(e)), map(ffalse,args(e)), type(e), info(e))
    (e:KDoC) : KDoC(ffunc(func(e)), map(ffalse,args(e)), map(ffalse,varargs(e)), type(e))
    (e:KMethod) : map(ftrue, e)
    (e:KMultifn) : map(ftrue, e)
    (e:KNew) : map(ftrue, e)
    (e) : map(ffalse, e)

defn map-implicit-structure (f: (KExp, True|False) -> KExp, e:KTExp) :
  defn ftrue (e:KExp) : f(e, true)
  defn ffalse (e:KExp) : f(e, false)
  match(e) :
    (e:KDefn|KDefmethod|KExternFn|KDefClosure) : map(ftrue, e)
    (e) : map(ffalse, e)

defn map-bound (before:KExp -> KExp, bindvar:Int -> ?, bindtvar:Int -> ?, after:KExp -> KExp, e:KExp) :
  match(e) :
    (e:KLet) :
      val v* = before(value(e))
      bindvar(n(e))
      KLet(n(e), v*, after(body(e)))
    (e:KLetVar) :
      val v* = attempt: before(value(e) as? KExp)
      bindvar(n(e))
      KLetVar(n(e), type(e), v*, after(body(e)))
    (e:KLetRec) :
      do(bindvar,ns(e))
      map(after,e)
    (e:KBranch) :
      do(bindvar,args(e))
      map(after,e)
    (e:KBlock) :
      do(bindvar,args(e))
      map(after,e)
    (e:KFn) :
      do(bindtvar, targs(e))
      do(bindvar, args(e))
      map(after,e)
    (e:KLetType) :
      val value* = before(value(e))
      bindtvar(n(e))
      val body* = after(body(e))
      KLetType(n(e), value*, body*)
    (e) :
      map(after, e)

defn map-bound-rev (before:KExp -> KExp, bindvar:Int -> ?, bindtvar:Int -> ?, after:KExp -> KExp, e:KExp) :
  match(e) :
    (e:KLet) :
      val body* = after(body(e))
      bindvar(n(e))
      val v* = before(value(e))      
      KLet(n(e), v*, body*)      
    (e:KLetVar) :
      val body* = after(body(e))
      bindvar(n(e))
      val v* = attempt: before(value(e) as? KExp)
      KLetVar(n(e), type(e), v*, body*)
    (e:KLetRec) :
      val e* = map(after,e)
      do(bindvar,ns(e))
      e*    
    (e:KBranch) :
      val e* = map(after,e)
      do(bindvar,args(e))
      e*
    (e:KBlock) :
      val e* = map(after,e)
      do(bindvar,args(e))
      e*
    (e:KFn) :
      val e* = map(after,e)
      do(bindtvar, targs(e))
      do(bindvar, args(e))
      e*
    (e:KLetType) :
      val body* = after(body(e))
      bindtvar(n(e))
      val value* = before(value(e))
      KLetType(n(e), value*, body*)
    (e) :
      map(after, e)

defn do-used-vars (use:Int -> ?, e:KExp) :
  match(e) :
    (e:KVar) : use(n(e))
    (e:KCurry) : use(n(e))
    (e) : false

defn map-used-types (f:KType -> KType, e:KExp) :
  match(e:KCurry|KCheck|KNewObject|KClosure) : map(f,e)
  else : e

defn do-used-types (f:KType -> ?, e:KExp) :
  match(e:KCurry|KCheck|KNewObject|KClosure) : do(f,e)

defn do-used-tvars (use:Int -> ?, e:KExp) :
  defn use-tvars (t:KType) :
    match(t) :
      (t:KTVar) : use(n(t))
      (t) : do(use-tvars, t)
  do-used-types(use-tvars, e)
