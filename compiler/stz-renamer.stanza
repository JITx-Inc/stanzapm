;See License.txt for details about licensing.

defpackage stz/renamer :
   import core
   import collections
   import stz/il-ir
   import stz/namemap
   import stz/ids
   import stz/tgt-ir
   import stz/kl-ir
   import stz/pl-ir with:
     prefix(Private, Protected, Public) => PL

;============================================================
;================== Specification ===========================
;============================================================

#use-added-syntax(stz-renamer-lang)
defrenamer rename-exp (e:IExp, eng:Engine) :
   e :
      ;Stanza
      IDefType: (class:c+, {args:t+}, children:e)
      IDefChild: ({args:t+})
      IDef: (name:v+, value:e)
      IDefVar: (name:mv+, value:e)
      IDefn: (name:f+, {targs:t+, args:v+, body:se})
      IDefmulti: (name:m+, {targs:t+})
      IDefmethod: ({targs:t+, args:v+, body:se})
      IFn: ({args:v+, body:se})
      IBranch: ({args:v+, body:se})
      IDo: (func:f, args:e)
      INew: (methods:e)
      ICast: (exp:e)
      IUpCast: (exp:e)
      ISet: (value:e)
      IPrim: (args:e)
      ILet: ({exp:se})
      LetRec: (group{defns:e}, body:e)
      IPublic: (public{exp:e})
      IProtected: (protected{exp:e})

      ;LoStanza
      ILSDef: (name:lv+, exp:e)
      ILSDefVar: (name:lmv+, exp:e)
      ILSDefType: custom{
         let-var CLASS-NAME = name(name(e) as IVar) :
            rename-lst(e)}
      ILSExtern: custom{
         match(type(e)) :
            (t:ILSFnT) : ILSExtern(rename-lf+(name(e)), t, info(e))
            (t) : ILSExtern(rename-lmv+(name(e)), t, info(e))}
      ILSDefn: (name:lf+, {targs:t+, args:lv+, body:e})
      ILSExternFn: (name:lf+, {args:lv+, body:e})
      ILSDefmethod: ({targs:t+, args:lv+, body:e})
      ILSLabels: ({blocks:e})
      ILSLabeledBlock: (name:lbl+, {args:lv+, body:e})
      ILSLet: ({comm:e})
      ILSIf: ({conseq:e}, {alt:e})
      ILSBranch: ({args:lv+, body:e})
      ILSDo: (func:f, args:e)
      ILSPrim: (args:e)
      ILSSizeof: ()
      ILSTagof: ()
      ILSFn: ()
      ILSAs: (exp:e)

      ;Fallthrough
      IExp: (_:e)

   lst :
      ILSDefType: (name:lc+, {args:t+, fields:fd+, rfield:fd+})

   se :
      IExp: custom{rename-e(flatten-se(e))}

   f :
      IOf: (class:e)
      ILSOfT: (class:e)
      IExp: custom{rename-e(e)}

   v+ :
      IVar : register var
      ITuple : (_:v+)
   mv+ :
      IVar : register mutable-var
   t+ :
      IVar : register tvar
      ICap : (name:cv+)
   cv+ :
      IVar : register capvar
   c+ :
      IVar : register class
   m+ :
      IVar : register multi
   f+ :
      IVar : register fn

   lv+ :
      IVar : register ls-var
   lmv+ :
      IVar : register ls-mutable-var
   lf+ :
      IVar : register ls-fn
   lc+ :
      IVar : register ls-class
   fd+ :
      IVar: register ls-field
      INone: ()
   lbl+ :
      IVar : register ls-label

;============================================================
;================= LetRec Grouping ==========================
;============================================================

defn begin-exps (e:IExp) -> List<IExp> :
  match(e) :
    (e:IBegin) : exps(e)
    (e) : List(e)

defn flatten-se (e:IExp) :
  defn loop (es:List<IExp>) -> IExp :
    if empty?(tail(es)) :
      head(es)
    else :
      match(head(es), loop(tail(es))) :
        (h:IDefn, t:LetRec) : LetRec(cons(h, defns(t)), body(t), info(h))
        (h:IDefn, t) : LetRec(List(h), t, info(h))
        (h:IDef|IDefVar, t) : Let(h, t, info(h))
        (h, t:IBegin) : Begin(cons(h, exps(t)), info(h))
        (h, t) : Begin(List(h, t), info(h))
  loop(begin-exps(e))

;============================================================
;================= Package Grouping =========================
;============================================================

defn flatten-pe (e:IExp) -> List<LetPackage|ILoadPackage> :
  ;Create default package
  defn default-package (es:List<IExp>) :
    val info = info(head(es)) when not empty?(es)
    val imports = to-list $ [
      IImport(IVar(`core, false), List(), false)
      IImport(IVar(`collections, false), List(), false)]
    LetPackage(gensym(`default), imports, Begin(es, info), info)
      
  ;Returns [remaining, pkgs] where :
  ;   remaining is the list of expressions not following a package expression
  ;   pkgs is the list of package expressions comprising the program
  defn loop (es:List<IExp>) -> [List<IExp>, List<LetPackage|ILoadPackage>] :
    if empty?(es) :
      [List(), List()]
    else :
      match(head(es)) :
        (h:IPackage) :
          val [es, ps] = loop(tail(es))
          val p = LetPackage(name!(h), imports(h), Begin(es, info(h)), info(h))
          [List(), cons(p, ps)]
        (h:ILoadPackage) :
          val [es, ps] = loop(tail(es))
          [es, cons(h, ps)]
        (h) :
          val [es, ps] = loop(tail(es))
          [cons(h, es), ps]
          
  ;Scan and create default package if necessary
  val [es, ps] = loop(begin-exps(e))
  if empty?(es) : ps
  else : cons(default-package(es), ps)

;============================================================
;================ Rename Package File =======================
;============================================================
defn rename (nm:NameMap, package:Symbol, ids:PkgIds) :
  ;Compute class table for stabilization
  val class-table = HashTable<Int,False|Symbol>(false)
  for id in filter-by<LSTypeId>(seq(id, declarations(ids))) do :
    for f in fields(id) do :
      class-table[n(f)] = name(id)
  ;Rename all declarations
  val decls* = 
    for d in declarations(ids) map :
      let-var CLASS-NAME = class-table[n(d)] :        
        val e = stabilize(DeclEntry(fresh-id(), package, d))
        register(nm, e)
        Declare(n(e), id(d), info(d))
  PkgIds(decls*, imports(ids))   
  
public defn rename (nm:NameMap, e:TGPackage) :
  val ids* = rename(nm, name(e), ids(e))
  TGPackage(name(e), ids*, entry(e), decls(e))

public defn rename (nm:NameMap, e:KPackage) :
  val ids* = rename(nm, name(e), ids(e))
  attach-ids(e, ids*)

;============================================================
;================ ID Stabilization ==========================
;============================================================

;Class name for field
var CLASS-NAME: False|Symbol = false

defn stabilize (e:VEntry) :
  val n* =
    if package(e) == `core :
      match(type(e)) :
        (t:LTypeE|TypeE) :
          switch(name(e)) :
            `Byte : BYTE-TYPE-ID
            `Char : CHAR-TYPE-ID
            `Int : INT-TYPE-ID
            `Long : LONG-TYPE-ID
            `Float : FLOAT-TYPE-ID
            `Double : DOUBLE-TYPE-ID
            `String : STRING-TYPE-ID
            `CharArray : CHAR-ARRAY-TYPE-ID
            `True : TRUE-TYPE-ID
            `False : FALSE-TYPE-ID
            `Tuple : TUPLE-TYPE-ID
            `Fn : FN-TYPE-ID
            `Stack : STACK-TYPE-ID
            `Type : TYPE-TYPE-ID
            `Box : BOX-TYPE-ID
            `Symbol : SYMBOL-TYPE-ID
            `List : LIST-TYPE-ID
            `Array : ARRAY-TYPE-ID
            else : false            
        (t:LFnE) :
          switch(name(e)) :
            `extend-heap : EXTEND-HEAP-ID
            `extend-stack : EXTEND-STACK-ID
            `variable-uninitialized-error : VARIABLE-UNINITIALIZED-ERROR-ID
            `tuple-length-error : TUPLE-LENGTH-ERROR-ID
            `no-branch-error : NO-BRANCH-ERROR-ID
            `amb-branch-error : AMB-BRANCH-ERROR-ID
            `cast-error : CAST-ERROR-ID
            `arity-error : ARITY-ERROR-ID
            `void-tuple : VOID-TUPLE-ID
            else : false
        (t:FieldE) :
          switch([CLASS-NAME, name(e)]) :
            [`Byte `value] : BYTE-VALUE-FIELD-ID
            [`Char `value] : CHAR-VALUE-FIELD-ID
            [`Int `value] : INT-VALUE-FIELD-ID
            [`Float `value] : FLOAT-VALUE-FIELD-ID
            [`Box `item] : BOX-ITEM-FIELD-ID
            [`Fn `code] : FN-CODE-FIELD-ID
            [`Fn `free] : FN-FREE-FIELD-ID
            [`Tuple `items] : TUPLE-ITEMS-FIELD-ID
            [`RawArray `items] : RAWARRAY-ITEMS-FIELD-ID
            [`CharArray `chars] : CHARARRAY-CHARS-FIELD-ID
            [`String `chars] : STRING-CHARS-FIELD-ID
            [`Type `free] : TYPE-FREE-FIELD-ID
            [`Type `code] : TYPE-CODE-FIELD-ID
            else : false
        (t) :
          false
  match(n*, e) :
    (n*:False, e) : e
    (n*:Int, e:DeclEntry) : DeclEntry(n*, package(e), decl(e))
    (n*:Int, e:VEntry) : VEntry(n*, package(e), name(e), visibility(e), type(e), info(e))

;============================================================
;=================== Implementation =========================
;============================================================


deftype Engine
defmulti push-scope (e:Engine) -> False
defmulti pop-scope (e:Engine) -> False
defmulti push-group (e:Engine) -> False
defmulti pop-group (e:Engine) -> False
defmulti push-visibility (e:Engine, v:Vis) -> False
defmulti pop-visibility (e:Engine) -> False
defmulti register (v:IVar, eng:Engine, type:Symbol) -> IExp

deftype Item
defstruct Scope <: Item :
   entries: Vector<Item>
   top: True|False
defstruct Group <: Item :
   entries: Vector<Atom>
defstruct Atom <: Item :
   n: Int

public defn rename (e:IExp) -> [NameMap List<LetPackage|ILoadPackage>] :
   val packages = flatten-pe(e)
   val namemap = NameMap()
   val scopes = Vector<Scope>()

   val renamed = for p in packages map :
      val items = Vector<Scope|Group>()
      add(items, Scope(Vector<Item>(), true))
      val visibilities = Vector<Vis>()
      add(visibilities, Private())
            
      match(p) :
         (p:ILoadPackage) :
            val pkg* = rename(namemap, pkg(p))
            ILoadPackage(filename(p), pkg*, info(p))
         (p:LetPackage) :
            defn register-elem (vname:Symbol, type:EType, info:FileInfo) :
               val e = stabilize $ VEntry(fresh-id(), name(p),
                 vname, peek(visibilities), type, info)
               register(namemap, e)
               add(entries(peek(items)), Atom(n(e)))
               n(e)

            val body* = rename-exp(body(p), eng) where :
               val eng = new Engine :
                  defmethod push-scope (this) :
                     add(items, Scope(Vector<Item>(), false))
                     push-visibility(this, Local())
                  defmethod pop-scope (this) :
                     pop-visibility(this)
                     add(scopes, pop(items) as Scope)
                  defmethod push-group (this) :
                     add(items, Group(Vector<Atom>()))
                  defmethod pop-group (this) :
                     val g = pop(items)
                     add(entries(peek(items)), g)
                  defmethod push-visibility (this, vis:Vis) :
                     add(visibilities, vis)
                  defmethod pop-visibility (this) :
                     pop(visibilities)
                     false
                  defmethod register (v:IVar, this, type:Symbol) -> IExp :
                     val etype = switch {type == _} :
                        `var : ValE()
                        `mutable-var : VarE()
                        `tvar : TVarE()
                        `capvar : CapVarE()
                        `class : TypeE()
                        `multi : MultiE()
                        `fn : FnE()
                        `ls-var : LValE()
                        `ls-mutable-var : LVarE()
                        `ls-fn : LFnE()
                        `ls-class : LTypeE()
                        `ls-field : FieldE()
                        `ls-label : LabelE()
                     val n = register-elem(name(v), etype, info(v) as FileInfo)
                     VarN(n, info(v))

            add(scopes, pop(items) as Scope)
            LetPackage(name(p), imports(p), body*, info(p))

   check-duplicates(packages)
   check-duplicates(namemap, scopes)
   [namemap, renamed]

;============================================================
;========== Check Duplicate Package Declarations ============
;============================================================

defn check-duplicates (ps:List<LetPackage|ILoadPackage>) :
  ;Check whether package already included
  val table = HashTable<Symbol,LetPackage|ILoadPackage>()
  defn included? (p:LetPackage|ILoadPackage) :
    if key?(table, name!(p)) :
      true
    else :
      table[name!(p)] = p
      false

  ;Issue duplicate! error
  val errors = Vector<?>()
  defn duplicate! (e:LetPackage|ILoadPackage, other:LetPackage|ILoadPackage) :
    val msg-a = match(e) :
      (e:ILoadPackage) : "Duplicate load of package %_ from %_." % [name!(e), filename(e)]
      (e:LetPackage) : "%_: Duplicate definition of package %_." % [info(e), name(e)]
    val msg-b = match(other) :
      (o:ILoadPackage) : "Already loaded from %_." % [filename(o)]
      (o:LetPackage) : "Already defined at %_." % [info(o)]
    add(errors, "%_ %_" % [msg-a, msg-b])

  ;Check duplicates for all packages
  for p in ps do :
    if included?(p) :
      duplicate!(p, table[name!(p)])

  ;Issue any errors
  if not empty?(errors) :
    throw(RenameError(errors))

;============================================================
;========== Check Duplicate Definitions in Scope ============
;============================================================

defn check-duplicates (namemap:NameMap, scopes: Vector<Scope>) :
   defn name! (i:Int) : name(namemap[i])
   defn info! (i:Int) : info(namemap[i])
   defn type! (i:Int) : type(namemap[i])

   val errors = Vector<?>()
   defn duplicate! (e:Atom, es:List<Int>) :
      val infos = for ei in es seq :
         "\n   %~ as %~" % [info!(ei), name!(ei)]
      val msg = "%_: Duplicate definition of %_. Also defined at: %*" %
         [info!(n(e)), name!(n(e)), infos]
      add(errors, msg)

   ;Mapping for each type of definition into a map containing all the definitions
   val elems = Array<HashTable<Symbol,List<Int>>>(4)
   for i in 0 to length(elems) do :
      elems[i] = HashTable<Symbol,List<Int>>()

   defn clear-elems () :
      for i in 0 to length(elems) do :
         clear(elems[i])
   defn ensure-no-duplicates (e:Atom, g:Int) :
      val name = name!(n(e))
      if key?(elems[g], name) :
         duplicate!(e, to-list(elems[g][name]))
   defn add-elem (e:Atom, g:Int) :
      val name = name!(n(e))
      elems[g][name] = cons(n(e), get?(elems[g], name, List()))

   defn check-top-scope (s:Scope) :
      clear-elems()

      ;Element Types
      val variables = 0
      val functions = 1
      val types = 2

      for e in entries(s) as Vector<Atom> do :
         match(type!(n(e))) :
            ;Variables
            (t:ValE|VarE|LValE|LVarE) :
               ensure-no-duplicates(e, variables)
               ensure-no-duplicates(e, functions)
               add-elem(e, variables)
            ;Functions
            (t:FnE|MultiE|LFnE) :
               ensure-no-duplicates(e, variables)
               add-elem(e, functions)
            ;Types
            (t:TypeE|LTypeE) :
               ensure-no-duplicates(e, types)
               add-elem(e, types)

   defn check-local-scope (s:Scope) :
      clear-elems()

      ;Element Types
      defn type-id (e:Atom) :
         match(type!(n(e))) :
            (t:ValE|VarE|FnE|LValE|LVarE) : 0
            (t:TVarE|CapVarE) : 1
            (t:LabelE) : 2
            (t:FieldE) : 3
      defn ensure-no-dups (e:Atom) :
         ensure-no-duplicates(e, type-id(e))
      defn add (e:Atom) :
         add-elem(e, type-id(e))
      for e in entries(s) do :
         match(e) :
            (e:Atom) :
               ensure-no-dups(e)
               add(e)
            (e:Group) :
               do(ensure-no-dups, entries(e))
               do(add, entries(e))

   for s in scopes do :
      if top(s) : check-top-scope(s)
      else : check-local-scope(s)
   if not empty?(errors) :
      throw(RenameError(errors))

;============================================================
;===================== Errors ===============================
;============================================================

defstruct RenameError <: Exception :
   msgs: Seqable

defmethod print (o:OutputStream, e:RenameError) :
   print-all(o, join(msgs(e), "\n"))