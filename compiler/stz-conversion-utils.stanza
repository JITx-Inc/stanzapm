defpackage stz/conversion-utils :
  import core
  import collections
  import stz/set-utils
  import dispatch-dag
  import stz/el-ir
  import stz/typeset
  import stz/dyn-tree

public defn set-to-arg (s:NumSet, sf:SetFlattener) -> Arg :
  match(flatten(sf, s)) :
    (s:AtomSet) : Nums(values(s))
    (s:AllSet) : Top()

public defn etype-to-arg (ct:DynTree, sf:SetFlattener, t:EType, include-abstract?:True|False) -> Arg :
  defn to-set (t:EType) :
    match(t) :
      (t:EAnd) : IntersectSet([to-set(a(t)), to-set(b(t))])
      (t:EOr) : UnionSet([to-set(a(t)), to-set(b(t))])
      (t:ETVar|ETop) : AllSet()
      (t:EOf) :
        AtomSet $
          if include-abstract? : all-children(ct, n(t))
          else : all-leaves(ct, n(t))
  set-to-arg(to-set(t), sf)