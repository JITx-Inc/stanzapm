defpackage test-dispatch-dag :
  import core
  import collections
  import stz/dispatch-dag

defn sexp-to-table (bs:Seqable) :
  val branches = to-tuple $ for b in bs seq :
    Branch $ to-tuple $
      for a in b seq :
        match(a):
          (a:Symbol): Top()
          (a:List): Nums(to-tuple(a))
  BranchTable(branches, IntSet())

defn test () :
  ;Create table for test
  val table = sexp-to-table $ `(
    ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))         ;Example branch 0
    ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))
    ((2) (2) (2) (2) (2) (2) (2) (2) (2) (2))
    (TOP TOP TOP TOP TOP TOP TOP TOP TOP TOP)
    ((3) (3) (3) (3) (3) (3) (3) (3) (3) (3))
    ((4) (4) (4) (4) (4) (4) (4) (4) (4) (4))
    ((5) (5) (5) (5) (5) (5) (5) (5) (5) (5))    
  )
  val table2 = sexp-to-table $ `(
    ((0) (0) (0))         ;Example branch 0
    (TOP TOP TOP)
    ((1) (1) (1)))
  println("Check using table:\n%_\n" % [table])

  ;Compute dag
  val dag = compute-dispatch-dag(table, false)
  println(dag)

  ;Compute all reachable solutions
  do(println, all-solns(dag, [Top(), Top(), Top(), Nums([4])], true))

test()