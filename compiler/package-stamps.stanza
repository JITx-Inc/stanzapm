defpackage stz/package-stamps :
  import core
  import collections
  import stz/file-stamps
  import stz/printing-utils

;============================================================
;================ Package Stamp =============================
;============================================================
;Represents the information used to load a Stanza package from disk
;and a hash of the source contents at the time of loading.

public defstruct PackageStamp :
  location: PkgLocation
  source-hashstamp: ByteArray|False
  pkg-hashstamp: ByteArray|False

;Convenience: Retrieve the package name.
public defn package (stamp:PackageStamp) -> Symbol :
  package(location(stamp))

;============================================================
;================== Pkg directory type ======================
;============================================================
;Represents the source of a .pkg file: Either the package was
;found in the pkg-cache or in the standard -pkg directory.
public deftype PkgFile

;Retrieve the filename that the .pkg was loaded from.
public defmulti file (d:PkgFile) -> String

;Represents a .pkg loaded from cache.
public defstruct PkgCache <: PkgFile :
  file:String with: (as-method => true)

;Represents a .pkg loaded from the -pkg directory.
public defstruct PkgDir <: PkgFile :
  file:String with: (as-method => true)

;============================================================
;================== Package Location ========================
;============================================================
;Represents the paths to the on-disk location of a Stanza package.
;- package: The name of the package.
;- source-file: The path to the Stanza source file (if there is one).
;- pkg-file: The path to the .pkg file (if there is one).
;- read-pkg?: True if the package can be appropriately loaded from the .pkg
;  file instead of the source file. If the .pkg file is out-of-date then this
;  is false.
public defstruct PkgLocation :
  package: Symbol
  source-file: String|False
  pkg-file: PkgFile|False
  read-pkg?: True|False
with:
  constructor => #PkgLocation

;Public constructor with invariants checks.
public defn PkgLocation (package:Symbol,
                         source-file:String|False,
                         pkg-file:PkgFile|False,
                         read-pkg?:True|False) -> PkgLocation  :
  ;If read-pkg? is true, then pkg-file cannot be false.
  ;If read-pkg? is false, then source-file cannot be false.
  if read-pkg? :
    fatal("Cannot read from pkg-file when pkg-file is false.") when pkg-file is False
  else :
    fatal("Did not read from pkg, but source-file is false.") when source-file is False
  #PkgLocation(package, source-file, pkg-file, read-pkg?)

;Convenience: Retrieve the filename of the file that
;the package was loaded from.
public defn filename (l:PkgLocation) -> String :
  if read-pkg?(l) : file(pkg-file(l) as PkgFile)
  else : source-file(l) as String

;Return the path to the .pkg file (if there was one).
public defn pkg-path (l:PkgLocation) -> String|False :
  match(pkg-file(l)) :
    (f:PkgFile) : file(f)
    (f:False) : false

;============================================================
;=================== Package Origin =========================
;============================================================

;Represents the three origins for a package.
;Can be computed from the PkgLocation.
public defenum PackageOrigin :
  FromSource
  FromPkg
  FromPkgCache

;Compute the origin from PkgLocation.
public defn origin (loc:PkgLocation) -> PackageOrigin :
  if read-pkg?(loc) :
    match(pkg-file(loc)) :
      (file:PkgCache) : FromPkgCache
      (file:PkgDir) : FromPkg
  else :
    FromSource

;============================================================
;====================== Printers ============================
;============================================================

defmethod print (o:OutputStream, l:PkgLocation) :
  val items = [
    falseable-field("source-file", written(source-file(l)))
    falseable-field("pkg-file", written(pkg-file(l)))
    bool-flag-field("read-pkg?", read-pkg?(l))]
  print(o, "%~ at PkgLocation(%_)" % [package(l), comma-field-list(items)])

defmethod print (o:OutputStream, s:PackageStamp) :
  val items = [
    location(s)
    falseable-field("source-hashstamp", to-hex?(source-hashstamp(s)))
    falseable-field("pkg-hashstamp", to-hex?(pkg-hashstamp(s)))]
  print(o, "PackageStamp%_" % [colon-field-list(items)])

;Helper convert a hashstamp into a string, if there is one.
defn to-hex? (b:ByteArray) : to-hex(b)
defn to-hex? (f:False) : false

;============================================================
;================= Check Up to Date =========================
;============================================================

;Given the stamp that was loaded at the time when the package was loaded,
;Return true whether the package is still up-to-date, or false if
;the corresponding files have changed in some way.
public defn up-to-date? (stamp:PackageStamp) -> True|False :
  ;Case: It was loaded from a .pkg file
  if read-pkg?(location(stamp)) :
    ;Return true if both the .pkg and the source file are up-to-date.
    package-file-up-to-date?(pkg-path(location(stamp)), pkg-hashstamp(stamp)) and
    package-file-up-to-date?(source-file(location(stamp)), source-hashstamp(stamp))
  ;Case: It was loaded from a source file
  else :
    ;Return true if the source file is up-to-date.
    package-file-up-to-date?(source-file(location(stamp)), source-hashstamp(stamp))

;Given (possibly) a file, check whether it is
;still up-to-date. Return true if it is unchanged since
;its hash was calculated.
;
;If both filename is false, and stamp is false, it means that this
;package was not loaded from this file.
defn package-file-up-to-date? (filename:String|False,
                               stamp:ByteArray|False) -> True|False :
  match(filename, stamp) :
    ;The package is meant to be loaded from this file,
    ;and the file used to exist.
    (filename:String, stamp:ByteArray) :
      ;If the new filestamp is equal to what it used
      ;to be, then it's still up-to-date.
      try :
        val full-path = resolve-path!(filename)
        val current-stamp = FileStamp(full-path, stamp)
        current-stamp == filestamp(filename)
      ;If we could not compute its stamp, then
      ;it's out of date.
      catch (e) : false

    ;The package was meant to be loaded from this file,
    ;and the file did not used to exist.
    (filename:String, stamp:False) :
      ;Ensure that it still does not exist.
      not file-exists?(filename)

    ;The package was not meant to be loaded from this file.
    (filename:False, stamp:False) :
      true