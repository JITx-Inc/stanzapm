defpackage stz/afn-macro :
  import core
  import collections
  import macro-utils
  import stz/preparsed-template
  import stz/utils
  import stz/core-macros

;============================================================
;=================== Datastructures =========================
;============================================================

;Represents an anonymous function argument: either _ or _0. 
deftype AfnArg

;Represents an _0 argument.
defstruct AfnNumberedArg <: AfnArg: (index:Int)

;Represents an _ argument.
defstruct AfnStandardArg <: AfnArg

;Represents an argument with an optional type annotation.
defstruct AfnArgEntry :
  arg: AfnArg
  type: Maybe

;============================================================
;================ Parse and Compile =========================
;============================================================

;Parses and compiles the given body.
public defn parse-and-compile-afn-body (info:FileInfo|False,
                                        body:List) -> ? :
  compile-afn-body(info, parse-afn-body(body))

;============================================================
;================= Parsing the Args =========================
;============================================================

;Parses the body of an anonymous function.
public defn parse-afn-body (body:List) -> List :
  parse-syntax[anonymous-function-body / #aform ...](body)

;This syntax recurses through an anonymous function body,
;and replaces occurrences of arguments with AfnArgEntry.
defsyntax anonymous-function-body :
  import type! from core
  
  ;Syntax of anonymous function form
  public defproduction aform
  defrule aform = (?h:((@afn | @do-afn | @quote | $quote) _ ...))
  defrule aform = (?p:#afn-arg ~ : ?t:#type!) :
    AfnArgEntry(p, One(t))
  defrule aform = (?p:#afn-arg) :
    AfnArgEntry(p, None())
  defrule aform = ((?p:#aform ...))
  defrule aform = (?x)

  ;Represents a _ or _n
  defproduction afn-arg: AfnArg
  defrule afn-arg = (?p) when afn-arg?(p) :
    classify-arg(p) as AfnArg

;Return true if 'x' is the correct syntax for
;an anonymous function argument.
defn afn-arg? (x) -> True|False :
  classify-arg(x) is-not False

;Classify form as an anonymous function argument.
;Returns false if not an argument.
;Either _ or _0 is accepted as arguments.
defn classify-arg (x) -> AfnArg|False :
  match(unwrap-token(x)) :
    (s:StringSymbol) :
      if s == `_ :
        AfnStandardArg()
      else if prefix?(name(s), "_") :
        val index-str = name(s)[1 to false]
        match(to-int(index-str)) :
          (x:Int) : AfnNumberedArg(x) when x >= 0 and x < 256
          (x) : false
    (f) :
      false

;============================================================
;=================== Compilation ============================
;============================================================

;Compiles a parsed anonymous function body.
;The body is assumed to contain AfnArgEntry arguments
;already, as output by 'parse-afn-body'.
public defn compile-afn-body (afn-info:FileInfo|False,
                              aform:List) -> ? :
                              
  ;Create arguments.
  val arg-table = IntTable-init<Symbol>(gensym{`arg})
  val arg-list = Vector<AfnArgEntry>()
  defn make-arg (e:AfnArgEntry) -> Symbol :
    add(arg-list, e)
    val index = match(arg(e)) :
      (a:AfnNumberedArg) : index(a)
      (a:AfnStandardArg) : length(arg-list) - 1
    arg-table[index]

  ;Verify that the argument list is valid.
  ;Throws an exception if not.
  defn verify-arg-list (arg-list:Vector<AfnArgEntry>) -> True|False :
    ;Verify that either the user uses standard arguments
    ;or numbered arguments but not both.
    val standard-arg? = any?({arg(_) is AfnStandardArg}, arg-list)
    val numbered-arg? = any?({arg(_) is AfnNumberedArg}, arg-list)
    if standard-arg? and numbered-arg? :
      val msg = "Anonymous function cannot contain both standard placeholder \
                 arguments as well as numbered placeholder arguments."
      throw(CSE(afn-info, msg))

  ;Assuming that it is a anonymous function using numbered arguments,
  ;construct the type table. Ensure that all types are consistent.
  defn type-table () :
    val table = IntTable<?>()
    defn arg-index (e:AfnArgEntry) : index(arg(e) as AfnNumberedArg)
    defn arg-type (e:AfnArgEntry) : value!(type(e))
    defn typed? (e:AfnArgEntry) : not empty?(type(e))
    for group in group-by(arg-index, arg-type, filter(typed?,arg-list)) do :
      val types = unique(seq(unwrap-all,value(group)))
      if length(types) > 1 :
        val msg = "Argument %_ in anonymous function is declared repeatedly with \
                   different types: %,."
        throw(CSE(afn-info, msg % [key(group), types]))
      table[key(group)] = head(value(group))
    table

  ;Construct arg list, for functions with one argument or more.
  defn make-arg-list () -> List :
    match(arg(arg-list[0])) :
      (a:AfnStandardArg) :
        for (entry in arg-list, index in 0 to false) seq-append :
          val name = arg-table[index]
          if empty?(type(entry)) : List(name)
          else : List(name, `:, value!(type(entry)))
      (a:AfnNumberedArg) :
        val max-arg = maximum(keys(arg-table))
        for i in 0 through max-arg seq-append :
          val types = type-table()
          val name = arg-table[i]
          if key?(types, i) : List(name, `:, types[i])
          else : List(name)

  ;Create the modified body.
  ;Calls `make-arg` on each occurrence of a placeholder.
  defn replace (xs) -> ? :
    match(unwrap-token(xs)) :
      (xs*:List) : sub-token-item?(xs, map(replace, xs*))
      (xs*:AfnArgEntry) : make-arg(xs*)
      (xs*) : xs

  ;Perform substitutions on body
  val replaced = replace(aform)
  verify-arg-list(arg-list)
  val body* = parse-syntax[core + current-overlays / #exp$](replaced)
  if empty?(arg-list) :
    fill(ZERO-ARG-TEMPLATE, [
      `body => body*
      `x => gensym(`x)])
  else :
    val template = `(fn args : body)
    parse-syntax[core / #exp](
      fill-template(template, [
        `body => body*,
        `args => make-arg-list()]))  

;Fast pre-expanded template for zero-argument
;anonymous function.
val ZERO-ARG-TEMPLATE = CoreExp $ `(
  multifn :
    () : ~body
    ( ~x : ?) : ~body)