;See License.txt for details about licensing.

defpackage stz/codegen :
  import core
  import collections
  import stz/tgt-ir
  import stz/asm-ir
  import stz/kl-ir
  import stz/khier
  import stz/stitcher
  import stz/reg-alloc
  import stz/asm-ir with :
    prefix => asm-
  import stz/ids
  import stz/backend
  import stz/padder

;============================================================
;====================== Driver ==============================
;============================================================

public defn generate-code (prog:TGProg, backend:Backend) -> False :
  ;Create tag table
  val tag-table = TagTable(hier(prog))
  
  ;Create stitcher
  val s = Stitcher(tag-table, hier(prog))
  val stitcher = chain-emitters $ [
    stitch{s, _}
    current-emitter()]

  ;Globals table
  val globals = Vector<TGDefGlobal>()
  val consts = Vector<TGDefConst>()
  val objects = Vector<TGDefObject>()
  val methods = HashTable<Int,List<TGDefmethod>>(List())
  val multis = Vector<TGDefmulti>()
  
  ;===================================
  ;==== Scan through declarations ====
  ;===================================
  for decl in decls(prog) do :
    match(decl) :
      (decl:TGDefCode) :
        match(n(decl)) :
          (n:Int) : #label(n)
          (n:Symbol) : #exlabel(n)
        with-emitter(stitcher, allocate-registers{ins(decl)})
      (decl:TGDefmulti) :
        add(multis, decl)
      (decl:TGDefmethod) :
        val m = multi(decl)
        methods[m] = cons(decl, methods[m])
      (decl:TGDefConst) :
        add(consts, decl)
      (decl:TGDefObject) :
        add(objects, decl)
      (decl:TGDefGlobal) :
        add(globals, decl)

  ;================
  ;==== Multis ====
  ;================
  for m in multis do :
    with-emitter{stitcher, _} $ fn () :
      compile(m, methods[n(m)], backend)

  ;=========================
  ;==== Runtime Library ====
  ;=========================
  machine-state()
  stack-extension()
  stack-retraction()

  ;================
  ;==== Tables ====
  ;================
  compile-object-table(tag-table, objects)
  compile-constant-table(consts)
  compile-globals(consts, globals)

;============================================================
;==================== Tag Assignment ========================
;============================================================

public deftype TagTable
public defmulti tag (t:TagTable, n:Int) -> Int

public defn TagTable (h:KHierarchy) :
  val tag-counter = to-seq(0 to false)
  val table = HashTable<Int,False|Int>()
  
  ;Call f on all roots of n
  defn do-roots (f:Int -> ?, n:Int) :
    val ps = parents(h, n)
    if empty?(ps) : f(n)
    else : do(do-roots{f, _}, ps)

  ;Assign tags to all children
  defn assign-tags (n:Int) :
    if not key?(table, n) :
      table[n] = next(tag-counter) when leaf?(h,n)
      do(assign-tags, children(h,n))
      
  ;Assigns tags
  assign-tags(FALSE-TYPE-ID)
  assign-tags(TRUE-TYPE-ID)
  for n in types(h) do :
    do-roots(assign-tags, n)
  val num-tags = next(tag-counter)

  ;Return tag table
  new TagTable :
    defmethod tag (this, n:Int) :
      table[n] as Int
    defmethod print (o:OutputStream, this) :
      print(o, "TagTable:")
      for entry in table do :
        print(o, "\n  Tag of %_ = %_" % [key(entry), value(entry)])

;============================================================
;================== Global Table Compilation ================
;============================================================
defn compile-globals (cs:Vector<TGDefConst>, gs:Vector<TGDefGlobal>) :
  ;Track ref-bits
  val ref-bits = Vector<True|False>()
  defn mark-bit (i:Int) :
    if i >= length(ref-bits) :
      lengthen(ref-bits, i + 1, false)
    ref-bits[i] = true

  ;Start of table
  ;[Consts ... Global Vars ...]
  #data()
  #label(GLOBAL-TABLE-LBL)

  ;Add constants
  val size-counter = Counter(0)
  for c in cs do :
    #label(n(c))
    #deflong(to-long(VOID-TAG))
    val offset = next(size-counter, 8)
    mark-bit(offset / 8)

  ;Add globals (in sorted alignment order)
  qsort!(alignment, gs)
  val [padded-gs, gs-aln] = pad(alignment, size, gs, 8)
  for g in padded-gs do :
    match(g) :
      (g:Padding) :
        #defspace(size(g))
        next(size-counter, size(g))
      (g:TGDefGlobal) :
        #label(n(g))       
        val start = value(size-counter) ;Starting offset of global
        for (t in types(g), o in offsets(g)) do :
          ;Offset of field
          val offset = start + o
          ;Difference
          val diff = offset - value(size-counter)
          if diff > 0 :
            #defspace(diff)
          ;Yield declaration instruction
          match(t) :
            (t:TGByteT) : #defbyte(0Y)
            (t:TGIntT) : #defint(0)
            (t:TGLongT) : #deflong(0L)
            (t:TGFloatT) : #deffloat(0.0F)
            (t:TGDoubleT) : #defdouble(0.0)
            (t:TGRefT) :
              #deflong(to-long(VOID-TAG))
              mark-bit(offset / 8)
          ;Increment counter
          set-value(size-counter, offset + size(t))
          
  ;End of table        
  #text()

  ;Emit globals mask table
  ;[Length, Bits ...]
  #label(GLOBAL-MAP-LBL)
  #deflong(to-long(length(ref-bits)))
  do(#deflong, to-bitmask(ref-bits))

;============================================================
;=============== Constant Table Compilation =================
;============================================================

;     Compiling Constant Table
;     ========================
defn compile-constant-table (cs:Vector<TGDefConst>) :
  defn emit-const (v:TGConst) :
    match(v) :
      (v:Char) :
        #defint(CHAR-CONST-TAG)
        #defbyte(to-byte(v))
      (v:Byte) :
        #defint(BYTE-CONST-TAG)
        #defbyte(v)
      (v:Int) :
        #defint(INT-CONST-TAG)
        #defint(v)
      (v:Long) :
        #defint(LONG-CONST-TAG)
        #deflong(v)
      (v:Float) :
        #defint(FLOAT-CONST-TAG)
        #deffloat(v)
      (v:Double) :
        #defint(DOUBLE-CONST-TAG)
        #defdouble(v)
      (v:String) :
        val n = length(v)
        #defint(STRING-CONST-TAG)
        #deflong(to-long(n))
        #defstring(v)
      (v:Symbol) :
        val chars = to-string(v)
        val n = length(chars)
        #defint(SYMBOL-CONST-TAG)
        #deflong(to-long(n))
        #defstring(chars)
      (v:List) :
        #defint(LIST-CONST-TAG)
        #defint(length(v))
        do(emit-const, v)
      (v:True) :
        #defint(TRUE-CONST-TAG)
      (v:False) :
        #defint(FALSE-CONST-TAG)
      (v:TGTypeObject) :
        #defint(TYPE-CONST-TAG)
        #deflabel(n(v))
      ;Top level closures
      ;(v:KClosure) :
      ;  #defint(FN-CONST-TAG)
      ;  emit(tgt-DefLabel(n(v)))
      (v) :
        fatal("Unrecognized constant: %~" % [v])

  ;Emit constant table
  #data()
  #label(CONSTANT-TABLE-LBL)
  #defint(length(cs))
  do(emit-const{value(_)}, cs)
  #text()

;============================================================
;=================== Object Table ===========================
;============================================================

defn compile-object-table (tt:TagTable, objs:Vector<TGDefObject>) :
  ;Sort by tag
  qsort!(tag{tt, n(_)}, objs)

  ;Sanity check
  val last-obj = objs[length(objs) - 1]
  if tag(tt, n(last-obj)) != length(objs) - 1 :
    fatal("Failed tag assignment.")

  ;Emit table
  #data()
  #label(OBJECT-TABLE-LBL)
  do(#deflabel{n(_)}, objs)

  ;Emit table entries
  for obj in objs do :
    defn bitmask (sz:Int, ts:List<TGType>, os:List<Int>) :
      val bits = Array<True|False>(sz / 8, false)
      for (t in ts, o in os) do :
        match(t:TGRefT) :
          bits[o / 8] = true
      to-bitmask(bits)
    
    #label(n(obj))
    #defint(size(obj))
    #defint(rsize(obj))
    do(#deflong, bitmask(size(obj), types(obj), offsets(obj)))
    do(#deflong, bitmask(rsize(obj), rtypes(obj), roffsets(obj)))  

  #text()

;============================================================
;=================== Multi Compilation ======================
;============================================================

;TODO: Doesn't properly check return type
defn compile (m:TGDefmulti, ms:List<TGDefmethod>, backend:Backend) :
  ;Compute branches
  val bs = for m in ms map :
    Branch(tags(m), code(m))

  ;Compute args
  val all-args = cat(
    seq(Reg, call-regs(backend))
    seq(Mem{ARG-LBL, _}, 0 to false by 8))
  val args = let :
    do(next{all-args}, 0 to tarity(m))  ;Skip type arguments
    to-list(take-n(arity(m), all-args)) ;Take arguments

  ;Emit code
  val wrong-arity-lbl = fresh-id()
  #label(n(m))
  #jnel(M(wrong-arity-lbl), R0, INT(arity(m)))    
  #dispatch(args, bs)      
  #label(wrong-arity-lbl)
  #movl(R0, INT(0))
  #goto(M(ARITY-ERROR-ID))

;============================================================
;===================== Runtime Lib ==========================
;============================================================

defn machine-state () :
  #data()

  ;Argument space
  #label(ARG-LBL)
  #defspace(8 * 256)
  
  ;Swapping space
  #label(SWAP-LBL)
  #deflong(0L)
  
  ;C stack pointer
  #label(C-RSP-LBL)
  #deflong(0L)
  
  ;Stack size
  #exlabel(`stanza_stack_size)
  #deflong(to-long(STACK-SIZE))
  #exlabel(`stanza_stack_items_offset)
  #deflong(to-long(STACK-ITEMS-OFFSET))
  
  ;Heap Labels
  #label(HEAP-PTR-LBL)
  #deflong(0L)
  #label(HEAP-LIM-LBL)
  #deflong(0L)
  
  ;Stack Labels
  #exlabel(`stanza_stack_pointer)
  #label(STACK-PTR-LBL)
  #deflong(0L)
  #label(STACK-LIM-LBL)
  #deflong(0L)
  #label(STACK-POOL-LBL)
  #deflong(0L)
  #label(NUM-FREE-STACKS-LBL)
  #deflong(0L)
  #label(FREE-STACKS-LBL)
  #deflong(0L)
  #label(STACK-LBL)
  #deflong(0L)

  ;DEBUG
  #label(INFO-TABLE-LBL)
  #deflong(0L)

  #text()


;============================================================
;============== Stack Retraction/Extension ==================
;============================================================

;=========================
;==== Stack Extension ====
;=========================
defn stack-extension () :
  val #stack-sp = STACK-SP-OFFSET - REF-TAG-BITS
  val #stack-items = STACK-ITEMS-OFFSET - REF-TAG-BITS
  val #stack-parent = STACK-PARENT-OFFSET - REF-TAG-BITS
  val #stack-size = STACK-SIZE - REF-TAG-BITS  
  
  ;Holding return label
  val return-lbl = fresh-id()
  #data()
  #label(return-lbl)
  #deflong(0L)
  #text()

  ;Header
  #label(EXTEND-STACK-LBL)

  ;0.Save return address
  #storel(M(return-lbl), R0)

  ;1. Decrement number of free stacks
  #loadl(R0, M(NUM-FREE-STACKS-LBL))
  #subl(R0, R0, INT(1))
  #storel(M(NUM-FREE-STACKS-LBL), R0)
  
  ;2. Retrieve the next free stack
  ;R0 = next free stack
  ;temporary R1 = stack pool
  #loadl(R1, M(FREE-STACKS-LBL))
  #loadl(R0, R1)
  #addl(R1, R1, INT(8))
  #storel(M(FREE-STACKS-LBL), R1)
  
  ;3. Cap the current stack. Set current stack as parent of new stack.
  ;R1 = current stack
  ;preserve R0 = free stack
  #loadl(R1, M(STACK-LBL))
  #storel(R1, RSP, #stack-sp)
  #storel(R0, R1, #stack-parent)
  
  ;4. update the current stack and limits
  ;preserve R0 = free stack
  ;temporary R1 = stack limit
  ;Update stack register
  #addl(RSP, R0, INT(#stack-items))
  ;Update stack limit, and current stack
  #addl(R1, R0, INT(#stack-size))
  #storel(M(STACK-LIM-LBL), R1)
  #storel(M(STACK-LBL), R0)
  ;Intercept return code
  #movl(R1, M(RETRACT-STACK-LBL))
  #storel(RSP, R1)

  ;5. Return
  #loadl(R0, M(return-lbl))
  #goto(R0)

;==========================
;==== Stack Retraction ====
;==========================
defn stack-retraction () :
  ;============================
  ;==== Assembly Utilities ====
  ;============================
  defn #long (v:Long) :
    val lbl = fresh-id()
    #label(lbl)
    #deflong(v)
    M(lbl)

  val tmp = R5
  defn #addlt (x:asm-Imm, y:asm-Imm) :
    #addl(tmp, x, y)
    tmp
    
  defn #inclt (MEM:asm-Imm, x:Int) :
    #loadl(tmp, MEM)
    #storel(MEM, #addlt(tmp, INT(x)))

  val #stack-position = STACK-POSITION-OFFSET - REF-TAG-BITS
  val #stack-parent = STACK-PARENT-OFFSET - REF-TAG-BITS
  val #stack-sp = STACK-SP-OFFSET - REF-TAG-BITS
  val #stack-size = STACK-SIZE - REF-TAG-BITS
  
  ;==============
  ;==== Code ====
  ;==============
  ;Scratch space
  #data()
  val R2-SAVE = #long(0L)
  val R3-SAVE = #long(0L)
  val R4-SAVE = #long(0L)
  val R5-SAVE = #long(0L)
  #text()

  ;Header
  #label(RETRACT-STACK-LBL)

  ;0. Save required registers
  #storel(R2-SAVE, R2)
  #storel(R3-SAVE, R3)
  #storel(R4-SAVE, R4)
  #storel(R5-SAVE, R5)

  ;1. Increment number of free stacks    
  #inclt(M(NUM-FREE-STACKS-LBL), 1)
  #inclt(M(FREE-STACKS-LBL), -8)
  val free-stacks = tmp

  ;2. Flip positions with active stack
  val swap = R0
  val stk = R1
  val swap-pos = R2
  val stk-pos = R3
  val pool = R4
  val skip-lbl = fresh-id()  
  #loadl(swap, free-stacks)
  #loadl(stk, M(STACK-LBL))
  #jeql(M(skip-lbl), swap, stk)
  
  ;pool[swap.pos] <-> pool[stk.pos]
  #loadl(pool, M(STACK-POOL-LBL))
  #loadi(swap-pos, swap, #stack-position)
  #loadi(stk-pos, stk, #stack-position)
  #convi2l(swap-pos, swap-pos)
  #convi2l(stk-pos, stk-pos)
  #storel(#addlt(pool, swap-pos), stk)
  #storel(#addlt(pool, stk-pos), swap)
  #storei(stk, swap-pos, #stack-position)
  #storei(swap, stk-pos, #stack-position)
  #label(skip-lbl)

  ;3. Update stack and limits
  val parent = R2
  val limit = R3               
  #loadl(parent, stk, #stack-parent)
  #storel(M(STACK-LBL), parent)
  #loadl(RSP, parent, #stack-sp)
  #addl(limit, parent, INT(#stack-size))
  #storel(M(STACK-LIM-LBL), limit)

  ;4. Restore required registers
  #loadl(R2, R2-SAVE)
  #loadl(R3, R3-SAVE)
  #loadl(R4, R4-SAVE)
  #loadl(R5, R5-SAVE)

  ;5. Return
  #return()

;============================================================
;======================= Bitmasks ===========================
;============================================================

public defn to-bitmask (xs:Seqable<True|False>) -> List<Long> :
  val sxs = to-seq(xs)
  defn bit (x:True|False) :
    1L when x else 0L
  defn loop (accum:Long, len:Int) :
    if len == 64 :
      cons(accum, loop(0L, 0))
    else if not empty?(sxs) :
      val mark = bit(next(sxs)) << to-long(len)
      loop(accum + mark, len + 1)
    else if len > 0 : List(accum)
    else : List()
  loop(0L, 0)

;============================================================
;==================== Assembly Shorthands ===================
;============================================================

;============================
;==== Instruction Buffer ====
;============================
public defn current-emitter () :
  EMITTER
  
public defn with-emitter<?T> (emitter: asm-Ins -> ?,
                              body: () -> ?T) -> T :
  let-var EMITTER = emitter :
    body()

public defn chain-emitters (fs:Seqable<(asm-Ins -> ?)>) :
  defn chain (f:asm-Ins -> ?, g:asm-Ins -> ?) :
    fn* (e:asm-Ins) :
      EMITTER = g
      f(e)
  val f* = reduce-right(chain, fs)
  fn (e:asm-Ins) :
    val current-emitter = EMITTER
    f*(e)
    EMITTER = current-emitter
    
var EMITTER: asm-Ins -> ? = fn (e) : fatal("No emitter set.")
public defn* E (e:asm-Ins) : EMITTER(e)

;==============================
;==== Assembly Equivalents ====
;==============================
public defn R (n:Int) : asm-Reg(n)
public defn F (n:Int) : asm-FReg(n)
public defn M (n:Int) : asm-Mem(n,0)
public defn INT (v:Byte|Int|Long) : asm-IntImm(v)
public val BT = asm-ByteT()
public val IT = asm-IntT()
public val LT = asm-LongT()
public val FT = asm-FloatT()
public val DT = asm-DoubleT()

public val R0 = R(0)
public val R1 = R(1)
public val R2 = R(2)
public val R3 = R(3)
public val R4 = R(4)
public val R5 = R(5)
public val R6 = R(6)
public val RSP = asm-RegSP()

public defn #data () : E $ asm-DefData()
public defn #text () : E $ asm-DefText()
public defn #defbyte (v:Byte) : E $ asm-DefByte(v)
public defn #defint (v:Int) : E $ asm-DefInt(v)
public defn #deflong (v:Long) : E $ asm-DefLong(v)
public defn #deffloat (v:Float) : E $ asm-DefFloat(v)
public defn #defdouble (v:Double) : E $ asm-DefDouble(v)
public defn #defstring (v:String) : E $ asm-DefString(v)
public defn #defspace (size:Int) : E $ asm-DefSpace(size)
public defn #deflabel (n:Int) : E $ asm-DefLabel(n)

public defn #label (n:Int) : E $ asm-Label(n)
public defn #exlabel (n:Symbol) : E $ asm-ExLabel(n)
public defn #goto (x:asm-Imm) : E $ asm-Goto(x)
public defn #call (x:asm-Imm) : E $ asm-Call(x)
public defn #return () : E $ asm-Return()
public defn #xchg (x:asm-Loc, y:asm-Loc) : E $ asm-XchgIns(x, y)
public defn #dispatch (xs:List<asm-Imm>, bs:List<asm-Branch>) : E $ asm-Dispatch(xs, bs)
public defn #match (xs:List<asm-Imm>, bs:List<asm-Branch>) : E $ asm-Match(xs, bs)

public defn #mov (t:asm-Type, x:asm-Loc, y:asm-Imm) : E $ asm-SetIns(t, x, y)
public defn #movl (x:asm-Loc, y:asm-Imm) : #mov(LT, x, y)
public defn #movi (x:asm-Loc, y:asm-Imm) : #mov(IT, x, y)
public defn #movd (x:asm-Loc, y:asm-Imm) : #mov(DT, x, y)

public defn #load (t:asm-Type, x:asm-Loc, y:asm-Imm, off:Int) : E $ asm-Load(t, x, y, off)
public defn #loadl (x:asm-Loc, y:asm-Imm, off:Int) : #load(LT, x, y, off)
public defn #loadi (x:asm-Loc, y:asm-Imm, off:Int) : #load(LT, x, y, off)
public defn #loadl (x:asm-Loc, y:asm-Imm) : #load(LT, x, y, 0)
public defn #loadi (x:asm-Loc, y:asm-Imm) : #load(LT, x, y, 0)

public defn #store (t:asm-Type, x:asm-Imm, y:asm-Imm, off:Int) : E $ asm-Store(t, x, y, off)
public defn #storel (x:asm-Imm, y:asm-Imm, off:Int) : #store(LT, x, y, off)
public defn #storei (x:asm-Imm, y:asm-Imm, off:Int) : #store(IT, x, y, off)
public defn #storel (x:asm-Imm, y:asm-Imm) : #store(LT, x, y, 0)
public defn #storei (x:asm-Imm, y:asm-Imm) : #store(IT, x, y, 0)

public defn #bin (t:asm-Type, x:asm-Loc, op:asm-Op, y:asm-Imm, z:asm-Imm) : E $ asm-BinOp(t, x, op, y, z)
public defn #binl (x:asm-Loc, op:asm-Op, y:asm-Imm, z:asm-Imm) : #bin(LT, x, op, y, z)
public defn #addl (x:asm-Loc, y:asm-Imm, z:asm-Imm) : #bin(LT, x, asm-AddOp(), y, z)
public defn #subl (x:asm-Loc, y:asm-Imm, z:asm-Imm) : #bin(LT, x, asm-SubOp(), y, z)
public defn #andl (x:asm-Loc, y:asm-Imm, z:asm-Imm) : #bin(LT, x, asm-AndOp(), y, z)
public defn #shrl (x:asm-Loc, y:asm-Imm, z:asm-Imm) : #bin(LT, x, asm-ShrOp(), y, z)

public defn #una (t:asm-Type, x:asm-Loc, op:asm-Op, y:asm-Imm) : E $ asm-UnaOp(t, x, op, y)

public defn #dual (t:asm-Type, x1:asm-Loc, x2:asm-Loc, op:asm-Op, y:asm-Imm, z:asm-Imm) : E $ asm-DualOp(t, x1, x2, op, y, z)

public defn #break (t:asm-Type, x:asm-Imm, op:asm-Op, y:asm-Imm, z:asm-Imm) : E $ asm-Break(t, x, op, y, z)
public defn #breakl (x:asm-Imm, op:asm-Op, y:asm-Imm, z:asm-Imm) : #break(LT, x, op, y, z)
public defn #jeql (x:asm-Imm, y:asm-Imm, z:asm-Imm) : #break(LT, x, asm-EqOp(), y, z)
public defn #jnel (x:asm-Imm, y:asm-Imm, z:asm-Imm) : #break(LT, x, asm-NeOp(), y, z)
public defn #jugel (x:asm-Imm, y:asm-Imm, z:asm-Imm) : #break(LT, x, asm-UgeOp(), y, z)
public defn #jbsl (x:asm-Imm, y:asm-Imm, z:asm-Imm) : #break(LT, x, asm-BitSetOp(), y, z)

public defn #conv (xt:asm-Type, x:asm-Loc, yt:asm-Type, y:asm-Imm) : E $ asm-ConvertIns(xt, x, yt, y)
public defn #convi2l (x:asm-Loc, y:asm-Imm) : #conv(LT, x, IT, y)

public defn #interpret (xt:asm-Type, x:asm-Loc, yt:asm-Type, y:asm-Imm) : E $ asm-InterpretIns(xt, x, yt, y)

;============================================================
;======================= Counter ============================
;============================================================
public deftype Counter
public defmulti next (c:Counter, n:Int) -> Int
public defn value (c:Counter) : next(c, 0)
public defmulti set-value (c:Counter, x:Int) -> False

public defn Counter (init:Int) :
  var x = init
  new Counter :
    defmethod set-value (this, x2:Int) :
      x = x2
    defmethod next (this, n:Int) :
      val cur-x = x
      x = x + n
      cur-x



