;See License.txt for details about licensing.

defpackage stz/algorithms :
   import core
   import collections

;============================================================
;================ Meta Algorithms ===========================
;============================================================

public defn* fixpoint<?T> (f: (() -> ?) -> ?T) -> T :
   var progress? = false
   val r = f({progress? = true})
   if progress? : fixpoint(f)
   else : r

public defn* worklist<?S> (f: (S, (S) -> ?) -> ?, xs:Seqable<?S>) -> False :
   val q = Queue<S>(4)
   defn add-x (x:S) : add(q, x)
   do(add-x, xs)   
   while not empty?(q) :
      f(pop(q), add-x)  

;============================================================
;============= Bipartite Closure ============================
;============================================================

val ENTRIES = Vector<KeyValue<Hashable&Equalable,List<Hashable&Equalable>>>()
val SOLNS-TABLE = HashTable<Hashable&Equalable, List<Hashable&Equalable>>()
public defn bipartite-closure<?T> (entries: Seqable<KeyValue<?T&Hashable&Equalable, List<T&Hashable&Equalable>>>) ->
                                   List<KeyValue<T, List<T>>> :
   ;Convert to vector
   clear(ENTRIES)
   add-all(ENTRIES, entries)
   
   ;Solution table
   clear(SOLNS-TABLE)
   defn cache (x:Hashable&Equalable, ys:List<Hashable&Equalable>) :
      SOLNS-TABLE[x] = ys
      ys

   ;Substitute all known solutions into xs
   defn sub-known (xs:List<Hashable&Equalable>) :
      for x in xs seq-append :
         match(get?(SOLNS-TABLE, x)) :
            (ys:List<Hashable&Equalable>) : cache(x, sub-known(ys))
            (f:False) : List(x)

   ;Compute remove(unique(xs), x)
   defn minus (xs:List<Hashable&Equalable>, x:Hashable&Equalable) :
      tail(to-list(unique(cons(x, xs))))

   ;Forward solve
   for e in ENTRIES do :
      val [x, ys] = [key(e), value(e)]
      cache(x, sub-known(ys) - x)

   ;Return solutions
   val result = for e in in-reverse(ENTRIES) seq :
      val x = key(e)
      x => sub-known(SOLNS-TABLE[x]) - x
   to-list(result) as List<KeyValue<T&Hashable&Equalable, List<T&Hashable&Equalable>>>   

;============================================================
;============= Transitive Closure ===========================
;============================================================

public defn transitive-closure<?T> (entries: Seqable<KeyValue<?T&Hashable&Equalable, List<T&Hashable&Equalable>>>) ->
                                    List<KeyValue<T, List<T>>> :
   ;Assign ids
   val id-map = Vector<T>()
   val obj-map = HashTable<Hashable&Equalable,Int>()
   val es = to-tuple(entries)
   for e in es do :
      val k = key(e)
      obj-map[k] = length(id-map)
      add(id-map, k)
      add(id-map, k)
   ;Map problem and compute bipartite-closure
   val result = bipartite-closure $
      for e in es seq :
         val x = obj-map[key(e)]
         val ys = for k in value(e) seq-append :
                     val i = obj-map[k]
                     List(i, i + 1)
         x => ys
   ;Map back
   val result* = for e in result map :
      id-map[key(e)] => map({id-map[_]}, value(e))
   result* as List<KeyValue<T&Hashable&Equalable, List<T&Hashable&Equalable>>>      

;============================================================
;============= Strongly Connected Components ================
;============================================================

public defn strong-components<?T> (graph: Seqable<KeyValue<?T&Hashable&Equalable, List<?T&Hashable&Equalable>>>) ->
                                   List<List<T>|T> :
   ;Create Neighbour Table
   val vs = Vector<T&Hashable&Equalable>()
   val neighbours = HashTable<T, List<T&Hashable&Equalable>>()
   for entry in graph do :
      val v = key(entry)
      val ns = value(entry)
      add(vs, v)
      neighbours[v] = ns

   ;Active Table
   val active = HashTable<T,True|False>()
   for v in vs do :
      active[v] = true
   defn active? (x:T&Hashable) :
      get?(active, x, false)         

   ;Stack
   val stack = Vector<T&Hashable&Equalable>()
   defn pop-until-v (v:T&Equalable) :
      val x = pop(stack)
      active[x] = false
      if x == v : List(x)
      else : cons(x, pop-until-v(v))

   ;State Tables
   val lowlink = HashTable<T,Int>()
   val index-counter = to-seq(0 to false)
   val components = Vector<List<T>|T>()
   defn get-lowlink (v:T&Hashable&Equalable) -> Int :
      if not key?(lowlink, v) :
         val idx = next(index-counter)
         lowlink[v] = idx
         add(stack, v)

         var cycle? = false
         for n in neighbours[v] do :
            if active?(n) :
               val nl = get-lowlink(n)
               if nl <= lowlink[v] :
                  lowlink[v] = nl
                  cycle? = true

         if lowlink[v] == idx :
            val c = pop-until-v(v)
            add{components, _} $
               if cycle? : c
               else : head(c)
      lowlink[v]

   ;Run connection
   do(get-lowlink, vs)
   to-list(components)

;============================================================
;============= Topological Numbering ========================
;============================================================

public defn topological-numbering<?T> (nodes:Seqable<KeyValue<?T&Equalable&Hashable, List<T>>>) ->
                                       Table<T,Int> :
   ;Construct node table
   val edges = HashTable<T, List<T>>()
   for e in nodes do : edges[key(e)] = value(e)
   ;Depth first numbering
   val numbers = HashTable<T,False|Int>()
   defn number (n:T) -> Int :
      if key?(numbers, n) :
         match(numbers[n]) :
            (x:Int) : x
            (x:False) : 0
      else :
         numbers[n] = false
         val num = maximum(0, seq({number(_) + 1}, edges[n]))
         numbers[n] = num
         num
   ;Number all nodes
   do(number, keys(edges))
   ;Number all components
   val numbers! = numbers as HashTable<T,Int>
   defn component (n:T) :
      for dst in edges[n] do :
         if numbers![dst] > numbers![n] :
            numbers![dst] = numbers![n]
            component(dst)
   do(component, keys(edges))
   ;Return
   numbers!

;============================================================
;==================== Int Tables ============================
;============================================================

public deftype IntTable<V> <: Seqable<KeyValue<Int,V>> & Lengthable 
public defmulti set<?V> (t:IntTable<?V>, k:Int, v:V) -> False
public defmulti get?<?V,?D> (t:IntTable<?V> k:Int, d:?D) -> V|D
public defmulti get<?V> (t:IntTable<?V>, k:Int) -> V
public defmulti key? (t:IntTable, k:Int) -> True|False
public defmulti clear (t:IntTable) -> False
defmulti double-capacity (t:IntTable) -> False

public defn IntTable<V> () -> IntTable<V> :
   ;              Table State
   ;              ===========
   var cap
   var limit
   var keys
   var values
   var occupied
   var size

   defn init (c:Int) :
      cap = c
      limit = cap >> 1
      keys = Array<Int>(cap)
      values = Array<V>(cap)
      occupied = Array<Int>(cap >> 5, 0)
      size = 0

   init(32)

   ;            Hashing Parameters
   ;            ==================
   defn hash (x:Int, i:Int) :
      val h1 = 3 * x + 5
      val h2 = (7 * x + 11) | 1
      val h = h1 + i * h2
      h & (cap - 1)

   ;            Table Helpers
   ;            =============
   defn set? (occupied:Array<Int>, i:Int) :
      val mask = occupied[i >> 5]
      val bit = (mask >> (i & 31)) & 1
      bit == 1

   defn occupied? (i:Int) :
      set?(occupied, i)

   defn set-occupied? (i:Int) :
      val mask = occupied[i >> 5]
      val bit = 1 << (i & 31)
      occupied[i >> 5] = mask | bit

   defn key-index (k:Int) -> Int :
      defn* loop (i:Int) :
         val s = hash(k, i)
         if occupied?(s) :
            if keys[s] == k : s
            else : loop(i + 1)
         else : s
      loop(0)

   new IntTable<V> :
      defmethod double-capacity (this) :
         val entries = to-seq(this)
         init(cap << 1)
         for entry in entries do :
            this[key(entry)] = value(entry)
            
      defmethod clear (this) :
         set-all(occupied, 0 to false, 0)
         size = 0
      
      defmethod set (this, k:Int, v:V) :         
         ;Get key index
         val i = key-index(k)
         
         ;Set key
         if occupied?(i) :
            values[i] = v
         else :
            keys[i] = k
            values[i] = v
            set-occupied?(i)
            size = size + 1

         ;Ensure capacity
         double-capacity(this) when size >= limit
         
      defmethod get?<?D> (this, k:Int, d:?D) :
         val i = key-index(k)
         if occupied?(i) : values[i]
         else : d

      defmethod get (this, k:Int) :
         val i = key-index(k)
         if occupied?(i) : values[i]
         else : fatal("Key %~ does not exist in table." % [k])

      defmethod key? (this, k:Int) :
         val i = key-index(k)
         occupied?(i)

      defmethod length (this) :
         size
         
      defmethod to-seq (this) :
         val keys = keys
         val values = values
         val occupied = occupied
         generate<KeyValue<Int,V>> :
            for i in 0 to length(keys) do :
               if set?(occupied, i) :
                  yield(keys[i] => values[i])


;============================================================
;==================== DoubleInt Tables ======================
;============================================================

public deftype DualIntTable<V> <: Seqable<KeyValue<[Int,Int],V>> & Lengthable 
public defmulti set<?V> (t:DualIntTable<?V>, k1:Int, k2:Int, v:V) -> False
public defmulti get?<?V,?D> (t:DualIntTable<?V> k1:Int, k2:Int, d:?D) -> V|D
public defmulti get<?V> (t:DualIntTable<?V>, k1:Int, k2:Int) -> V
public defmulti key? (t:DualIntTable, k1:Int, k2:Int) -> True|False
public defmulti clear (t:DualIntTable) -> False
defmulti double-capacity (t:DualIntTable) -> False

public defn DualIntTable<V> () -> DualIntTable<V> :
   ;              Table State
   ;              ===========
   var cap
   var limit
   var keys1
   var keys2
   var values
   var occupied
   var size

   defn init (c:Int) :
      cap = c
      limit = cap >> 1
      keys1 = Array<Int>(cap)
      keys2 = Array<Int>(cap)
      values = Array<V>(cap)
      occupied = Array<Int>(cap >> 5, 0)
      size = 0

   init(32)

   ;            Hashing Parameters
   ;            ==================
   defn hash (x:Int, y:Int, i:Int) :
      val xy = x + 31 * y
      val h1 = 3 * xy + 5
      val h2 = (7 * xy + 11) | 1
      val h = h1 + i * h2
      h & (cap - 1)

   defn set? (occupied:Array<Int>, i:Int) :
      val mask = occupied[i >> 5]
      val bit = (mask >> (i & 31)) & 1
      bit == 1

   defn occupied? (i:Int) :
      set?(occupied, i)

   ;            Table Helpers
   ;            =============
   defn set-occupied? (i:Int) :
      val mask = occupied[i >> 5]
      val bit = 1 << (i & 31)
      occupied[i >> 5] = mask | bit
   
   defn* key-index (k1:Int, k2:Int) -> Int :
      defn* loop (i:Int) :
         val s = hash(k1, k2, i)
         if occupied?(s) :
            if keys1[s] == k1 and keys2[s] == k2 : s
            else : loop(i + 1)
         else : s
      loop(0)

   new DualIntTable<V> :
      defmethod double-capacity (this) :
         val entries = to-seq(this)
         init(cap * 2)
         for entry in entries do :
            val [k1, k2] = key(entry)
            this[k1, k2] = value(entry)
            
      defmethod clear (this) :
         for i in 0 to length(occupied) do :
            occupied[i] = 0
         size = 0
      
      defmethod set (this, k1:Int, k2:Int, v:V) :         
         ;Get key index
         val i = key-index(k1, k2)
         
         ;Set key
         if occupied?(i) :
            values[i] = v
         else :
            keys1[i] = k1
            keys2[i] = k2
            values[i] = v
            set-occupied?(i)
            size = size + 1

         ;Ensure capacity
         double-capacity(this) when size >= limit
         
      defmethod get?<?D> (this, k1:Int, k2:Int, d:?D) :
         val i = key-index(k1, k2)
         if occupied?(i) : values[i]
         else : d

      defmethod get (this, k1:Int, k2:Int) :
         val i = key-index(k1, k2)
         if occupied?(i) : values[i]
         else : fatal("Key [%~, %~] does not exist in table." % [k1, k2])

      defmethod key? (this, k1:Int, k2:Int) :
         val i = key-index(k1, k2)
         occupied?(i)

      defmethod length (this) :
         size
         
      defmethod to-seq (this) :
         val keys1 = keys1
         val keys2 = keys2
         val values = values
         val occupied = occupied
         generate<KeyValue<[Int,Int],V>> :
            for i in 0 to length(keys1) do :
               if set?(occupied, i) :
                  yield([keys1[i], keys2[i]] => values[i])


;============================================================
;==================== BitArrays =============================
;============================================================

public lostanza deftype BitArray <: Array<True|False> :
   words: long
   length: long
   bits: long ...

defn ensure-below-size (a:Lengthable, n:Int) :
   if n < 0 : fatal("Given size (%_) is negative." % [n])
   if n > length(a) : fatal("Given size (%_) is beyond the length of the array (%_)." % [n, length(a)])

public defn BitArray (n:Int) :
   BitArray(n, false)

public lostanza defn BitArray (n:ref<Int>, x:ref<True|False>) -> ref<BitArray> :
   #if-not-defined(OPTIMIZE) :
      core/ensure-non-negative-length(n)
   val nwords = (n.value + 63) >>> 6
   val a = new BitArray{nwords, n.value}
   var init-x:long = 0L
   if x == true : init-x = -1L
   for (var i:long = 0, i < nwords, i = i + 1) :
      a.bits[i] = init-x
   return a

public defn clear (a:BitArray, n:Int) :
   clear(a, n, false)

public lostanza defn clear (a:ref<BitArray>, n:ref<Int>, x:ref<True|False>) -> ref<False> :
   #if-not-defined(OPTIMIZE) :
      ensure-below-size(a, n)
   val nwords = (n.value + 63) >>> 6
   var init-x:long = 0L
   if x == true : init-x = -1L
   for (var i:long = 0, i < nwords, i = i + 1) :
      a.bits[i] = init-x
   return false

lostanza defmethod length (a:ref<BitArray>) -> ref<Int> :
   return new Int{a.length as int}

lostanza defmethod get (a:ref<BitArray>, i:ref<Int>) -> ref<True|False> :
   #if-not-defined(OPTIMIZE) :
      core/ensure-index-in-bounds(a, i)
   val word-idx = i.value >>> 6
   val bit-idx = i.value & 63
   val bit = (a.bits[word-idx] >> bit-idx) & 1
   if bit : return true
   else : return false

lostanza defmethod set (a:ref<BitArray>, i:ref<Int>, v:ref<True|False>) -> ref<False> :
   #if-not-defined(OPTIMIZE) :
      core/ensure-index-in-bounds(a, i)
   val word-idx = i.value >>> 6
   val bit-idx = i.value & 63
   val word = a.bits[word-idx]
   if v == true : a.bits[word-idx] = word | (1L << bit-idx)
   else : a.bits[word-idx] = word & (~ 1L << bit-idx)
   return false

;============================================================
;================== TinyTable ===============================
;============================================================

public lostanza deftype TinyTable<T> :
   capacity: long
   length: long
   entries: TinyEntry<T> ...

public lostanza deftype TinyEntry<T> :
   n:int
   value:ref<T>

public lostanza defn TinyTable<T> (capacity:ref<Int>) -> ref<TinyTable<T>> :
   val c = capacity.value
   val t = new TinyTable{c, 0}   
   for (var i:long = 0, i < c, i = i + 1) :
      t.entries[i] = TinyEntry<?>{-1, false}
   return t   

public lostanza defn key (t:ref<TinyTable>, k:int) -> int :
   for (var i:long = 0, i < t.length, i = i + 1) :
      if t.entries[i].n == k : return i as int
   return -1

public lostanza defn key? (t:ref<TinyTable>, k:ref<Int>) -> ref<False|Int> :
   val i = key(t, k.value)
   if i >= 0 : return new Int{i}
   else : return false

public lostanza defn get<?T> (t:ref<TinyTable<?T>>, idx:ref<Int>) -> ref<T> :
   return t.entries[idx.value].value

public lostanza defn set<?T> (t:ref<TinyTable<?T>>, k:ref<Int>, v:ref<T>) -> ref<False> :
   val i = key(t, k.value)
   if i >= 0 :
      t.entries[i].value = v
   else :
      val n = t.length
      #if-not-defined(OPTIMIZE) :
         if n == t.capacity :
            out-of-space()
      t.entries[n] = TinyEntry<T>{k.value, v}
      t.length = t.length + 1
   return false

public lostanza defn clear (t:ref<TinyTable>) -> ref<False> :
   t.length = 0
   return false

defn out-of-space () :
   fatal("TinyTable out of space.")

;============================================================
;===================== Minima ===============================
;============================================================

;Returns x in xs s.t.
;forall y in xs . (y <= x) => (x <= y)
public defn minima<?T> (xs: Seqable<?T>, less-eq?: (T T) -> True|False) -> List<T> :
   val items = to-vector<Maybe<T>>(seq(One, xs))
   for i in 0 to length(items) do :
      if not empty?(items[i]) :
         for j in 0 to length(items) do :
            if not empty?(items[j]) :
               if j != i :
                  if value!(items[i]) <= value!(items[j]) :
                     items[j] = None()
   to-list(seq?({_}, items))

;============================================================
;=================== All Pairs ==============================
;============================================================

public defn all-pairs (start:Int, end:Int) -> Seq<[Int Int]> :
   generate<[Int Int]> :
      for i in start to end do :
         for j in (i + 1) to end do :
            yield([i, j])

public defn all-pairs<?T> (xs:Seqable<?T>) :
   val xs* = to-vector<T>(xs)
   for [i j] in all-pairs(0, length(xs*)) seq :
      [xs*[i], xs*[j]]

;============================================================
;=================== Relational Graph =======================
;============================================================

public deftype RelationalGraph
public defmulti edge (graph:RelationalGraph, src:Int, dst:Int) -> True|False
public defmulti direct-edge (graph:RelationalGraph, src:Int, dst:Int) -> True|False
public defmulti num-children (graph:RelationalGraph, n:Int) -> Int
public defmulti num-parents (graph:RelationalGraph, n:Int) -> Int
public defmulti parents (graph:RelationalGraph, n:Int) -> Seq<Int>
public defmulti children (graph:RelationalGraph, n:Int) -> Seq<Int>
public defmulti parent! (graph:RelationalGraph, n:Int) -> Int
public defmulti child! (graph:RelationalGraph, n:Int) -> Int

public defn RelationalGraph (num:Int, less-eq?: (Int Int) -> True|False) :
  ;State
  val edges = BitArray(num * num)
  val redges = BitArray(num * num)
  val parents = Vector<Int>()
  val parents-idx = Array<Int>(num)
  val children = Vector<Int>()
  val children-idx = Array<Int>(num)
  val num-parents = Array<Int>(num, 0)
  val num-children = Array<Int>(num, 0)
  
  ;Utilities
  defn set-edge (i:Int, j:Int, v:True|False) : edges[i * num + j] = v
  defn edge (i:Int, j:Int) : edges[i * num + j]
  defn set-redge (i:Int, j:Int, v:True|False) : redges[i * num + j] = v
  defn redge (i:Int, j:Int) : redges[i * num + j]

  ;Analysis
  for [i, j] in all-pairs(0, num) do :
    match(i <= j, j <= i) :
      (a:True, b:False) : set-edge(j, i, true)
      (a:False, b:True) : set-edge(i, j, true)
      (a, b) : false

  ;Transitive reduction
  redges[0 to false] = edges
  for j in 0 to num do :
    for i in 0 to num do :
      if redge(i, j) :
        for k in 0 to num do :
          if redge(j, k) :
            set-redge(i, k, false)

  ;Parent statistics
  defn add-parent (i:Int, p:Int) :
    add(parents, p)      
    num-parents[i] = num-parents[i] + 1
  for i in 0 to num do :
    parents-idx[i] = length(parents)
    for j in 0 to num do :
      add-parent(i, j) when redge(j, i)

  ;Children statistics
  defn add-child (i:Int, c:Int) :
    add(children, c)
    num-children[i] = num-children[i] + 1
  for i in 0 to num do :
    children-idx[i] = length(children)
    for j in 0 to num do :
      add-child(i, j) when redge(i, j)

  ;Return graph
  new RelationalGraph :
    defmethod edge (this, src:Int, dst:Int) : edge(src, dst)
    defmethod direct-edge (this, src:Int, dst:Int) : redge(src, dst)
    defmethod num-children (this, n:Int) : num-children[n]
    defmethod num-parents (this, n:Int) : num-parents[n]
    defmethod children (this, n:Int) :
      val off = children-idx[n]
      seq({children[off + _]}, 0 to num-children[n])
    defmethod parents (this, n:Int) :
      val off = parents-idx[n]
      seq({parents[off + _]}, 0 to num-parents[n])      
    defmethod parent! (this, n:Int) :
      fatal("parent! requires single parent.") when num-parents[n] != 1
      parents[parents-idx[n]]
    defmethod child! (this, n:Int) :
      fatal("child! requires single child.") when num-children[n] != 1
      children[children-idx[n]]

;============================================================
;================ Ambiguity Ordering ========================
;============================================================
public defn ambiguity-ordering (N: Int,
                                less-eq?: (Int, Int) -> True|False) ->
                                Collection<Int|List<Int>> :
  val pending = FreeList(N, true)
  val graph = RelationalGraph(N, less-eq?)

  ;=====================
  ;==== Chain Roots ====
  ;=====================
  defn root? (n:Int) :
    switch(num-parents(graph, n)) :
      0 : true
      1 : num-children(graph, parent!(graph,n)) > 1
      else : true
  defn* root (n:Int) :
    if root?(n) : n
    else : root(parent!(graph,n))

  ;==============
  ;==== Leaf ====
  ;==============
  defn leaf? (n:Int) :
    for c in children(graph,n) all? :
      not pending[c]

  ;===================
  ;==== Algorithm ====
  ;===================
  val accum = Vector<Int|List<Int>>()
  while not empty?(pending) :
    ;1. Discover all leaves
    val leaves = to-list(filter(leaf?, pending))
    ;2. Yield ambiguity of all leaves
    if length(leaves) > 1 :
      add(accum,to-list(map(root, leaves)))
    ;3. Yield chains
    for n in leaves do :
      let loop (n:Int = n) :
        add(accum,n)
        pending[n] = false
        loop(parent!(graph,n)) when not root?(n)
  accum

;============================================================
;===================== Freelist =============================
;============================================================
public deftype FreeList <: Collection<Int>
public defmulti set (xs:FreeList, i:Int, v:True|False) -> False
public defmulti get (xs:FreeList, i:Int) -> True|False
public defmulti empty? (xs:FreeList) -> True|False
public defmulti next (xs:FreeList) -> Int

public defn FreeList (n:Int, default:True|False) :
  val [list, indices] =
    if default :
     [to-vector<Int>(0 to n),
      to-array<False|Int>(0 to n)]
    else :
     [Vector<Int>()
      Array<False|Int>(n, false)]

  new FreeList :
    defmethod set (this, n:Int, v:True|False) :      
      match(indices[n], v) :
        (i:Int, v:False) :
          val n2 = pop(list)
          if n2 != n :
            list[i] = n2
            indices[n2] = i
          indices[n] = false
        (_:False, v:True) :
          val i = length(list)
          add(list, n)
          indices[n] = i
        (i:Int, v:True) :
          fatal("Item %_ is already set." % [i])
        (i:False, v:False) :
          fatal("Item %_ is not set." % [i])      
    defmethod get (this, i:Int) :
      indices[i] is Int
    defmethod empty? (this) :
      empty?(list)
    defmethod next (this) :
      list[0]
    defmethod to-seq (this) :
      to-seq(list)
    defmethod print (o:OutputStream, this) :
      print(o, list)
      
