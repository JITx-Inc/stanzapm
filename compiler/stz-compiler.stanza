;See License.txt for details about licensing.

defpackage stz/compiler :
   import core
   import reader
   import macro-utils
   import stz/params
   import stz/utils
   import stz/algorithms
   import stz/input
   import stz/renamer
   import stz/resolver
   import stz/type
   import stz/type-to-kform
   import stz/kform
   import stz/codegen
   import stz/il-ir
   import stz/tl-ir
   import stz/namemap
   import stz/core-macros
   import stz/backend

defn macroexpand (forms:List) -> List :
   val es = parse-syntax[core / #exps!](forms)
   cons(`$begin, es)

public defn check (filenames:List<String>) -> [TProg, NameMap] :
   ;Read in a file
   defn read-input-file (filename:String) :
      switch suffix?{filename, _} :
         ".stanza" :
            val forms = read-file(filename)
            val expanded = macroexpand(forms)
            read-prog(expanded)
         else : throw(InvalidExtensionError(filename))   

   ;Read in all files and combine into single program
   val input = Begin(map(read-input-file, filenames), false)
   ;Check for syntax violations
   check(input)
   ;Perform global renaming and check for naming violations
   val [namemap, renamed] = rename(input)
   ;Perform symbol resolution and check for resolution errors
   val resolved = resolve(namemap, renamed)
   ;Convert to typed IR and check for type errors
   val typed = type-program(namemap, resolved)

   ;Return
   [typed, namemap]

public defn compile (filenames:List<String>, output:False|String, pkg-dir:False|String) :
   var timer
   defn start-timer (name:String) :
      if flag-defined?(`PRINT-TIMING) :
         timer = MicrosecondTimer(name)
         start(timer)
   defn stop-timer () :
      if flag-defined?(`PRINT-TIMING) :
         println(timer)
      
   if flag-defined?(`VERBOSE) :
      stz/ids/print-all-ids()

   vheader("Check")
   start-timer("Check")
   val [typed, namemap] = check(filenames)
   stop-timer()
   vprintln(typed)

   vheader("Convert to KForm")
   start-timer("KForm Conversion")
   val pkgs = to-kform(typed, namemap)
   stop-timer()
   
   vheader("Converted")
   do(println, pkgs)

   vheader("Compiled")
   val tgt-form = compile(pkgs)

   vheader("Assembled")
   do(println, generate-code(tgt-form, X86Backend()))

defn InvalidExtensionError (filename:String) :
   new Exception :
      defmethod print (o:OutputStream, this) :
         print(o, "File %_ does not have a valid Stanza file extension." % [filename])