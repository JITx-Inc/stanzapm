;See License.txt for details about licensing.

;<doc>=======================================================
;================== Compilation Steps =======================
;============================================================

# Categorize the situation #

There are three different situations that require different
compilation flows:

  1) We are compiling in optimized mode and need to compile to a final
  assembly file.

  2) We are compiling in unoptimized mode and need to compile to a
  final assembly file.

  3) We are compiling in unoptimized mode and only need to compile to
  .pkg files.

# Reorder the given packages by their initialization order #

Input:
  denv: DEnv
  packages: Seqable<EPackage|VMPackage|Pkg>
  input-order: Tuple<Symbol>
  
Output:
  packages: Tuple<EPackage|VMPackage|Pkg>

Reorders the given input by their proper dependency order. 

# Combine multiple EL packages into a single optimized VMPackage #

Input:
  packages: Tuple<EPackage|FastPkg>
Output:
  vmpackage: VMPackage

# Compile a single VMPackage to a File #

Input:
  vmpackage: VMPackage
  bindings: Vector<Bindings>
  filename: String

# Compile VMPackages and StdPkgs to a File #

Input:
  packages: Tuple<VMPackage|StdPkg>
  bindings: Vector<Bindings>
  filename: String
  save-pkgs?: String|False

Emits the compiled instructions to the given file. If save-pkgs? is a
String, then we emit the unoptimized .pkg files into the that
directory.

# Lower and Compile EL Packages to .pkg Files #

Input:
  epackages: Tuple<EPackage>
  pkg-dir: String

# Utility: Compile a Normalized VMPackage #

Input:
  npkg: NormVMPackage
  stitcher: Stitcher
  stubs: AsmStubs
  return-instructions?: True|False

Output:
  instructions: Tuple<Ins>|False

Emits the compiled instructions to the current output stream, when
given the normalized package. If return-instructions? is true, then the
pre-stitched instructions are saved into a tuple and returned.
Otherwise, the function returns false.

# Utility: Emitters #

  file-emitter: () -> CodeEmitter
  buffer-emitter: (buffer:Vector<Ins>, e:CodeEmitter) -> CodeEmitter
  buffer-emitter: (buffer:Vector<Ins>) -> CodeEmitter

# Utility: Emit all system stubs #

Input:
  stitcher: Stitcher
  stubs: AsmStubs

Emits all tables and stubs required by the linked assembly file.

;============================================================
;=======================================================<doc>

defpackage stz/compiler :
  import core
  import collections
  import reader
  import macro-utils
  import stz/params
  import stz/utils
  import stz/algorithms
  import stz/input
  import stz/renamer
  import stz/resolver
  import stz/type
  import stz/il-ir
  import stz/tl-ir
  import stz/namemap
  import stz/core-macros
  import stz/tl-to-el
  import stz/tl-to-dl
  import stz/el-to-vm
  import stz/el
  import stz/el-ir
  import stz/vm-ir
  import stz/dl-ir
  import stz/dl
  import stz/backend
  import stz/reg-alloc with :
    prefix(Ins) => reg-alloc-
  import stz/vm-normalize
  import stz/codegen
  import stz/asm-ir
  import stz/asm-emitter
  import stz/stitcher
  import stz/bindings
  import stz/bindings-to-vm
  import stz/pkg
  import stz/ids
  import stz/front-end
  import stz/proj-manager
  import stz/proj

;============================================================
;============= Compile Given Files EntryPoint ===============
;============================================================

public defn compile (filenames:List<String>,
                     output:False|String,
                     pkg-dir:False|String,
                     backend:Backend,
                     optimize?:True|False) -> ProjDependencies :
  ;Categorize filenames
  val projfiles = to-vector<String> $ ["stanza.proj"]  
  val inputs = Vector<String|Symbol>()
  for name in filenames do :
    if not has-extension?(name) :
      add(inputs, to-symbol(name))
    else if suffix?(name, ".proj") :
      add(projfiles, name)
    else :
      add(inputs, name)

  ;Create project manager                   
  val proj = read-proj-files(projfiles, OUTPUT-PLATFORM)
  val params = ProjParams(
                 compiler-flags(),
                 optimize?)
  val proj-manager = ProjManager(proj, params)

  ;Compile with project manager
  val compiled-packages = compile(proj-manager, inputs, output, pkg-dir, backend, optimize?)

  ;Return the project dependencies
  dependencies(proj-manager, compiled-packages)

defn has-extension? (s:String) :
  index-of-char(s, '.') is Int

;============================================================
;==================== Main Algorithm ========================
;============================================================

defn compile (proj-manager:ProjManager,
              inputs:Collection<String|Symbol>,
              output:False|String,
              pkg-dir:False|String,
              backend:Backend,
              optimize?:True|False) -> Tuple<Symbol> :  
  defn driver () :
    val denv = DEnv()
    val result = compile-to-el $ new FrontEndInputs :
      defmethod inputs (this) : to-tuple(inputs)
      defmethod find-package (this, name:Symbol) : find-package(proj-manager, name)
      defmethod environment-package? (this, name:Symbol) : packageio(denv, name)
      defmethod load-into-denv (this, ios:Tuple<PackageIO>) : load(denv, ios, [])
      defmethod conditional-dependencies (this, pkgs:Seqable<Symbol>) : conditional-imports(proj-manager, pkgs)
    val bindings = collapse([])

    ;Build timestamp table
    val timestamp-table = to-hashtable(package, timestamps(result))
    
    ;Save optimized packages if necessary
    if pkg-dir is String and optimize? :
      within save = save-pkgs(timestamp-table) :
        for p in filter-by<EPackage>(packages(result)) do :
          save(FastPkg(packageio(p), exps(p)))

    ;Depending upon the situation run three different flows
    val situation =
      match(optimize?, output) :
        (opt?:True, output:String) : `optimized-asm
        (opt?:True, output:False) : `optimized-pkgs
        (opt?:False, output:String) : `unoptimized-asm
        (opt?:False, output:False) : `unoptimized-pkgs
    switch(situation) :
      `optimized-asm :
        val vmpackage = combine-and-lower(packages(result) as Tuple<EPackage|FastPkg>)
        ;val packages = match(binding-pkg:VMPackage) : [vmpackage, binding-pkg]
        ;               else : [vmpackage]
        compile-vmpackages({false}, [vmpackage], bindings, output as String, false)
      `optimized-pkgs :
        ;Already done
        false
      `unoptimized-asm :
        val packages = for p in packages(result) map :
          match(p) :
            (p:EPackage) : compile(lower-unoptimized(p))
            (p:StdPkg)  : p          
        ;val packages* = match(binding-pkg:VMPackage) : to-tuple(cat(ordered, [binding-pkg]))
        ;                else : ordered
        within save = save-pkgs(timestamp-table) :
          compile-vmpackages(save, packages, bindings, output as String, pkg-dir is String)
      `unoptimized-pkgs :
        val epackages = to-tuple $ filter-by<EPackage>(packages(result))
        within save = save-pkgs(timestamp-table) :
          compile-to-pkgs(save, epackages)

    ;Return the compiled packages
    map(name, packages(result))

  defn save-pkgs (body:(Pkg -> False) -> ?,  
                  timestamp-table:HashTable<Symbol,PackageStamp>) :
    match(pkg-dir:String) :
      val saved-pkgs = Vector<SavedPkg>()
      defn save-pkg (pkg:Pkg) :
        val filename = save-package(pkg-dir as String, pkg)
        val stamp = timestamp-table[name(pkg)]      
        val filestamp = filestamp(filename)
        val sourcestamp = FileStamp(source-file(location(stamp)) as String,
                                    source-timestamp(stamp) as Long)
        add(saved-pkgs, SavedPkg(name(pkg), filestamp, sourcestamp))
      body(save-pkg)
      update-aux-file(proj-manager, saved-pkgs)
    else :
      defn save-pkg (pkg:Pkg) : false
      body(save-pkg)

  defn combine-and-lower (packages:Tuple<EPackage|FastPkg>) :
    val epackages = for p in packages map :
      match(p:FastPkg) : EPackage(packageio(p), exps(p))
      else : p as EPackage
    compile(lower-optimized(epackages))

  defn compile-vmpackages (save-pkg:Pkg -> ?, packages:Tuple<VMPackage|StdPkg>, bindings:Bindings, filename:String, save-pkgs?:True|False) :
    val stubs = AsmStubs(backend)
    val npkgs = for p in packages map :
      match(p:VMPackage) : normalize(p, backend)
      else : p as StdPkg
    val stitcher = Stitcher(map(collapse,npkgs), bindings, stubs)
    defn compile () :
      for (pkg in packages, npkg in npkgs) do :
        match(npkg) :
          (npkg:NormVMPackage) :
            val ins = compile-normalized-vmpackage(npkg, stitcher, stubs, save-pkgs?)
            if save-pkgs? :
              save-pkg(StdPkg(pkg as VMPackage, ins as Tuple<Ins>, datas(npkg)))
          (std-pkg:StdPkg) :
            compile-stdpkg(std-pkg, stitcher)
      emit-all-system-stubs(stitcher, stubs)
    with-output-file(FileOutputStream(filename), compile)      

  defn compile-stdpkg (pkg:StdPkg, stitcher:Stitcher) :
    val emitter = emitter(stitcher, name(pkg), file-emitter())
    for ins in asm(pkg) do : emit(emitter, ins)

  defn compile-normalized-vmpackage (npkg:NormVMPackage, stitcher:Stitcher, stubs:AsmStubs, return-instructions?:True|False) :
    if return-instructions? :
      val buffer = Vector<Ins>()
      val emitter = buffer-emitter(buffer, emitter(stitcher, name(npkg), file-emitter()))
      emit-normalized-package(npkg, emitter, stubs)      
      to-tuple(buffer)
    else :
      val emitter = emitter(stitcher, name(npkg), file-emitter())
      emit-normalized-package(npkg, emitter, stubs)

  defn compile-to-pkgs (save-pkg:Pkg -> ?, epackages:Tuple<EPackage>) :
    val stubs = AsmStubs(backend)
    for epackage in epackages do :
      val vmpackage = compile(lower-unoptimized(epackage))
      val npkg = normalize(vmpackage, backend)
      val buffer = Vector<Ins>()
      emit-normalized-package(npkg, buffer-emitter(buffer), stubs)
      save-pkg(StdPkg(vmpackage, to-tuple(buffer), datas(npkg)))
    
  defn emit-normalized-package (npkg:NormVMPackage, emitter:CodeEmitter, stubs:AsmStubs) :
    for f in funcs(vmpackage(npkg)) do :
      emit(emitter, LinkLabel(id(f)))
      allocate-registers(func(f), emitter, backend, stubs, false)

  defn emit-all-system-stubs (stitcher:Stitcher, stubs:AsmStubs) :
    val emitter = file-emitter()
    emit-tables(stitcher, emitter)
    emit-stubs(stitcher, emitter)
    compile-runtime-stubs(emitter, stubs)

  ;Buffer Utilities
  defn file-emitter () :
    new CodeEmitter :
      defmethod emit (this, i:Ins) :
        emit(i, backend)

  defn buffer-emitter (buffer:Vector<Ins>, emitter:CodeEmitter) :
    new CodeEmitter :
      defmethod emit (this, i:Ins) :
        add(buffer, i)
        emit(emitter, i)

  defn buffer-emitter (buffer:Vector<Ins>) :
    new CodeEmitter :
      defmethod emit (this, i:Ins) :
        add(buffer, i)
        
  ;Launch
  driver()
  
;============================================================
;============= Collapsing a Normalized Package ==============
;============================================================

defn collapse (p:NormVMPackage|StdPkg) :
  val [vmp, asm-datas] = match(p) :
    (p:NormVMPackage) : [vmpackage(p), datas(p)]
    (p:StdPkg) : [vmp(p), datas(p)]
  new VMPackage :
    defmethod packageio (this) : packageio(vmp)
    defmethod init (this) : init(vmp)
    defmethod globals (this) : globals(vmp)
    defmethod datas (this) : to-tuple(cat(datas(vmp), asm-datas))
    defmethod consts (this) : consts(vmp)
    defmethod classes (this) : classes(vmp)
    defmethod funcs (this) : funcs(vmp)
    defmethod methods (this) : methods(vmp)
    defmethod externs (this) : externs(vmp)
    defmethod extern-defns (this) : extern-defns(vmp)