defpackage stz/type-formatter :
  import core
  import collections
  import stz/types
  import stz/type-fargs
  import stz/exp-printer

;============================================================
;======================== API ===============================
;============================================================

;A type that can be used to create human-readable representations
;of types.
public deftype TypeFormatter

;Format a type as a human-readable object.
public defmulti format (f:TypeFormatter, t:Type|LSType) -> ?

;Format an FArg as a human-readable object.
public defmulti format (f:TypeFormatter, a:FArg) -> ?

;============================================================
;========================= Format ===========================
;============================================================

;Create a new type formatter with the given callback for
;looking up names of variables.
public defn TypeFormatter (name:Int -> Symbol) :

  ;Convert a Stanza type.
  defn pexp (t:Type) -> PrintExp :
    match(t) :
      (t:TArrow) :
        arrow(paren?(seq(pexp,a1(t))), pexp(a2(t)))
      (t:TFunction) :
        val arrow-exp = arrow(paren?(seq(parg,a1(t))), pexp(a2(t)))
        val type-args = cat(
          for v in targs(t) seq : Atom("%~" % [name(v)])
          for v in cargs(t) seq : Atom("?%~" % [name(v)]))
        targ-dot(type-args, arrow-exp)        
      (t:TOr) :
        BinOp("|", pexp(a(t)), pexp(b(t)),
              precedence = 2, associativity = DualAssociative)
      (t:TAnd) :
        BinOp("&", pexp(a(t)), pexp(b(t)),
              precedence = 3, associativity = DualAssociative)
      (t:TOf) :
        val elide-args? = all?({_ is TGradual}, args(t))
        if elide-args? : Atom(written(name(n(t))))
        else : of(Atom(written(name(n(t)))), angle(seq(pexp,args(t))))
      (t:TVar) :
        match(/name(t)) :
          (n:Symbol) : Atom(written(n))
          (_:False) : Atom(written(name(n(t))))
      (t:TCap) :
        match(/name(t)) :
          (n:Symbol) : Atom("?%~" % [n])
          (_:False) : Atom("?%~" % [name(n(t))])
      (t:TGradual) : Atom("?")
      (t:TBot) : Atom("Void")
      (t:TTop) : Atom("Top")
      (t:TTuple) : braces(seq(pexp,args(t)))
      (t:TUVar) :
        val name-atom = Atom(written(name(n(t))))
        match(bounds(t)) :
          (b:NoBound) :
            name-atom
          (b:UpperBound) :
            join-exp(name-atom, paren(prefix("<:", pexp(type(b)))))
          (b:MixBound) :
            val name-atom = Atom(written(name(n(t))))
            join-exp(name-atom, paren(prefix("mix", seq(pexp,types(b)))))

  ;Convert a LoStanza type.
  defn pexp (t:LSType) -> PrintExp :
    match(t) :
      (t:TLSFunction) :
        val type-args = cat(
          for v in targs(t) seq : Atom("%~" % [name(v)])
          for v in cargs(t) seq : Atom("?%~" % [name(v)]))
        val arrow-exp = arrow(paren?(seq(parg, a1(t))), pexp(a2(t)))
        targ-dot(type-args, arrow-exp)
      (t:FnT) :
        val x = match(r(t)) :
          (r:LSType) :
            paren $ cat(
              seq(pexp, a(t)),
              [ellipsis(pexp(r))])
          (f:False) :
            paren(seq(pexp, a(t)))
        arrow(x, pexp(b(t)))
      (t:ByteT) : Atom("byte")
      (t:IntT) : Atom("int")
      (t:LongT) : Atom("long")
      (t:FloatT) : Atom("float")
      (t:DoubleT) : Atom("double")
      (t:UnknownT) : Atom("?")
      (t:UVarT) : Atom(written(name(n(t))))
      (t:PtrT) : of("ptr", angle(pexp(type(t))))
      (t:RestT) : ellipsis(pexp(type(t)))
      (t:StructT) :
        val elide-args? = all?({_ is TGradual}, args(t))
        val name-exp = Atom(written(name(n(t))))
        if elide-args? : name-exp
        else : of(name-exp, angle(seq(pexp,args(t))))
      (t:RefT) : of("ref", angle(pexp(type(t))))

  ;Convert function arg to exp.
  defn parg (a:FArg<Type|LSType>) -> PrintExp :
    match(a) :
      (a:PositionalArg<Type|LSType>) :
        if optional?(a) : eq-optional?(pexp(type(a)))
        else : pexp(type(a))
      (a:KeywordArg<Type|LSType>) :
        val e = colon(Atom(written(/name(a))), pexp(type(a)))
        if optional?(a) : eq-optional?(e)
        else : e
      (a:VarArg<Type|LSType>) :
        ellipsis(colon(Atom(written(/name(a))), pexp(type(a))))

  ;Return the formatting function.
  new TypeFormatter :
    defmethod format (this, t:Type|LSType) :
      pexp(t)

    defmethod format (this, a:FArg) :
      defn option-str (b:True|False) :
        "optional " when b else ""
      match(a) :
        (a:PositionalArg) :
          "%_%_" % [option-str(optional?(a)), format(this,type(a))]
        (a:KeywordArg) :
          "%_%_:%_" % [option-str(optional?(a)), /name(a), format(this,type(a))]
        (a:VarArg) :
          "%_:%_ ..." % [/name(a), format(this,type(a))]

;============================================================
;================ PrintExp Utilities ========================
;============================================================

;Surround given expressions with parentheses.
defn paren (es:Seqable<PrintExp>) -> PrintExp :
  Surround(to-tuple(es), Paren)
defn paren (e:PrintExp) : paren([e])
defn braces (es:Seqable<PrintExp>) -> PrintExp :
  Surround(to-tuple(es), Brace)

;Surround the given expressions with parentheses if it isn't
;exactly 1 exp.
defn paren? (es:Seqable<PrintExp>) -> PrintExp :
  val es-tuple = to-tuple(es)
  if length(es-tuple) == 1 : es-tuple[0]
  else : paren(es-tuple)

;Helper: <v,t> . a
defn targ-dot (input-ts:Seqable<PrintExp>, a:PrintExp) :
  val ts = to-tuple(input-ts)
  if empty?(to-seq(ts)) : a
  else : join-exp(angle(ts), sep = " . ", a)

;Helper: Wrap in angle brackets.
defn angle (es:Seqable<PrintExp>) : Surround(to-tuple(es), Angle)
defn angle (e:PrintExp) : angle([e])

;Add a string prefix to an expression or sequence of expressions.
defn prefix (s:String, e:PrintExp) :
  join-exp(s,e)
defn prefix (s:String, input-es:Seqable<PrintExp>) :
  val es = to-seq(input-es)
  if empty?(es) :
    Atom(s)
  else :
    for (e in es, i in 0 to false) seq :
      prefix(s,e) when i == 0 else e

;Helper: e = ?
defn eq-optional? (e:PrintExp) :
  join-exp(e, " = ?")

;Helper: Create an atom if it's not already one.
defn atom? (e) :
  match(e:PrintExp) : e
  else : Atom(e)

;Helper: a<b>
defn of (a, b:PrintExp) :
  BinOp("", atom?(a), b, precedence = 4)

;Helper: a -> b
defn arrow (a:PrintExp, b:PrintExp) :
  BinOp(" -> ", a, b, precedence = 1,
        associativity = RightAssociative, uses-angle-chars? = true)

;Helper: a:b
defn colon (a:PrintExp, b:PrintExp) :
  join-exp(a, sep = ":", b)
        
;Helper: e ...
defn ellipsis (e:PrintExp) :
  join-exp(e, " ...")

;Join two expressions using a separator.
defn join-exp (a, b -- sep:String = "") :
  val a* = atom?(a)
  val b* = atom?(b)
  BinOp(Atom(sep), a*, b*, precedence = 0,
        associativity = DualAssociative)