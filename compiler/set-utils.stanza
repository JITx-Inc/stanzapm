defpackage stz/set-utils :
  import core
  import collections
  import stz/utils

;============================================================
;====================== Datastructure =======================
;============================================================

public deftype NumSet

public defstruct IntersectSet <: NumSet :
  sets: Tuple<NumSet>
with:
  printer => true

public defstruct UnionSet <: NumSet :
  sets: Tuple<NumSet>
with:
  printer => true

public defstruct AtomSet <: NumSet :
  values: Tuple<Int>
with:
  printer => true

public defstruct AllSet <: NumSet 
with:
  printer => true

;============================================================
;======================== Algorithm =========================
;============================================================

public defn SetFlattener () -> NumSet -> AtomSet|AllSet :
  val accum = MultilevelStack<KeyValue<Int,Int>>()
  val counts = IntTable<Int>(0)

  defn cache-counts (f:() -> ?) :
    push-level(accum)
    for entry in counts do :
      add(accum, entry)
    clear(counts)
    f()
    within e = pop-level(accum) :
      update(counts, {_ + value(e)}, key(e))        

  defn remove-alls (s:NumSet) :
    match(s) :
      (s:IntersectSet) :
        var sets*:Seq<NumSet> = seq(remove-alls, sets(s))
        sets* = filter({_ is-not AllSet}, sets*)
        if empty?(sets*) : AtomSet([])
        else : IntersectSet(to-tuple(sets*))        
      (s:UnionSet) :
        val sets* = map(remove-alls, sets(s))
        if any?({_ is AllSet}, sets*) : AllSet()
        else : UnionSet(sets*)
      (s:AtomSet|AllSet) :
        s
    
  defn add-to-counts (s:NumSet) :
    match(s) :
      (s:IntersectSet) :
        within cache-counts() :
          do(add-to-counts, sets(s))
          val n = length(sets(s))
          for entry in counts map! :
            1 when value(entry) == n else 0            
      (s:UnionSet) :
        within cache-counts() :
          do(add-to-counts, sets(s))
          for entry in counts map! :
            1 when value(entry) > 0 else 0
      (s:AtomSet) :
        for v in values(s) do :
          update(counts, {_ + 1}, v)

  fn (s:NumSet) -> AtomSet|AllSet :
    match(remove-alls(s)) :
      (s:AtomSet|AllSet) :
        s
      (s) :
        add-to-counts(s)
        val xs = to-tuple $ for e in counts seq? :
          One(key(e)) when value(e) > 0 else None()
        AtomSet(xs)

public defn flatten (s:NumSet) :
  SetFlattener()(s)

;defn test () :
;  defn sexp-to-set (form) :
;    if form == `* : AllSet()
;    else if empty?(form) : AtomSet([])
;    else if head(form) is Int : AtomSet(to-tuple(form))
;    else if head(form) == `and : IntersectSet(to-tuple(map(sexp-to-set, tail(form))))
;    else if head(form) == `or : UnionSet(to-tuple(map(sexp-to-set, tail(form))))
;    else : fatal("Bad set: %_" % [form])
;
;  defn case (form) :
;    val s = sexp-to-set(form)
;    println("Test: %_" % [s])
;    println("Flattened: %_" % [flatten(s)])
;
;  case $ `(1 2 3)
;  case $ `*
;  case $ `(and (1 2 3 4 5)
;               (2 3 4)
;               (or (3 9 10) (4) (5)))
;  case $ `(and (1 2 3 4 5)
;               (2 3 4 5) 
;               (or (3 9 10) (4) (5)
;                   (and (3 9 10) (4 5))))
;
;test()