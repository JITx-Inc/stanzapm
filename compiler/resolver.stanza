;See License.txt for details about licensing.

defpackage stz/resolver :
   import core
   import collections
   import stz/il-ir
   import stz/namemap
   import stz/primitives
   import stz/utils
   import stz/algorithms
   import stz/params
   import stz/dl-ir
   import stz/ids
   import stz/visibility
   import stz/timing-log-api
   import stz/dump-to-log
   import stz/absolute-info

;<doc>=======================================================
;====================== Environment =========================
;============================================================

### Environment Imported Packages ###

When the resolver imports a package that is not yet loaded, it
requests the environment to retrieve the package.

If the environment cannot find the package, then it returns false.

If the environment can find the package, then it returns either:

  a. an IPackage: which means that the package is represented by a
  source file, has been renamed, and should be one of the packages to
  be resolved.

  b. a PackageExports: which means that it's a package from the
  resolution environment (whether from a .pkg or from the REPL
  environment) and does not need to be resolved.

### Environment Conditional Dependencies ###

Stanza allows packages to be conditionally imported when it detects
that other packages are imported together.

The conditional-dependencies method is given the current list of
already imported packages, and must return the list of packages
that should be conditionally imported.

### Environment Package Priority ###

By default, all packages have the same priority, and therefore if an
overloaded definition is found in multiple packages, it is by default
an ambigious reference.

By providing different priorities to different packages, the resolver
will allow higher priority definitions to shadow previous definitions.

;============================================================
;=======================================================<doc>

;============================================================
;======================= Timers =============================
;============================================================

val RESOLVER = TimerLabel("Resolver")
val RESOLVER-SYMBOL-TABLES = TimerLabel("Resolver: symbol tables", RESOLVER)
val RESOLVER-EXP = TimerLabel("Resolver: resolve exp", RESOLVER)
var ACTIVE-RESOLVE-EXP:TimerLabel|False = false

defn log-resolve-exp-time<?T> (body:() -> ?T, package-name:Symbol) :
  let-var ACTIVE-RESOLVE-EXP = TimerLabel(RESOLVER-EXP, suffix(package-name)) :
    log-time(body, ACTIVE-RESOLVE-EXP as TimerLabel)

defn exclude-from-resolve-exp-time<?T> (body:() -> ?T) :
  match(ACTIVE-RESOLVE-EXP:TimerLabel) :
    exclude-log-time(body, ACTIVE-RESOLVE-EXP)
  else :
    body()

;============================================================
;================= Environment Callbacks ====================
;============================================================

public deftype Env
public defmulti imported-package (e:Env, package:Symbol) -> IPackage|PackageExports|False

;============================================================
;=================== Multis with Defaults ===================
;============================================================

public defmulti conditional-dependencies (e:Env, packages:Seqable<Symbol>) -> Tuple<Symbol>
defmethod conditional-dependencies (e:Env, packages:Seqable<Symbol>) : []

public defmulti package-priority (e:Env) -> False|(Symbol -> Int)
defmethod package-priority (e:Env) : false

;============================================================
;==================== Result Structures =====================
;============================================================

public defstruct ResolverResult :
  ipackages: Tuple<IPackage>
  import-lists: Tuple<ImportList>
  init-order: Tuple<Symbol>
  errors: ResolveErrors|False

public defstruct ImportList :
  package: Symbol
  imports: Tuple<IImport>

;------------------------------------------------------------
;-------------------- Printers ------------------------------
;------------------------------------------------------------

defmethod print (o:OutputStream, l:ImportList) :
  print(o, "ImportList %_ :" % [package(l)])
  if empty?(imports(l)) :
    print(o, " ()")
  else :
    val o2 = IndentedStream(o)
    do(lnprint{o2, _}, imports(l))

;<doc>=======================================================
;====================== Driver ==============================
;============================================================

Resolution Algorithm:
1. Start with an initial root set of packages to resolve.
2. Based upon this initial set load the conditional dependencies for
   the packages.
3. Now resolve each of the newly loaded IPackages.
4. Now that new packages have been loaded, the set of conditional
   dependencies will change, so take this as the new root set
   and start from step 2 again.

;============================================================
;=======================================================<doc>




public defn resolve-il (packages:Tuple<IPackage|PackageExports>, env:Env) -> ResolverResult :
  within log-time(RESOLVER) :
    ;Track all detected errors
    val error-accum = Vector<ResolveError>()

    ;Create base environments
    val symtables = SymbolTables(packages, env, error-accum)

    ;Resolve individual packages
    ;  Accumulate all resolved packages into ipackages*
    ;  Track conditional dependencies in cond-dependencies
    val ipackages* = Vector<IPackage>()
    val import-lists* = Vector<ImportList>()
    val cond-dependencies = Vector<Symbol>()

    let resolve-ipackages () :
      val ds = load-conditional-dependencies(symtables)
      add-all(cond-dependencies, ds)
      val ps = new-ipackages(symtables)
      for p in ps do :
        val p* = resolve-package(p, symtables, package-priority(env), error-accum)
        match(p*:IPackage) :
          add(import-lists*, ImportList(name(p), imports(p)))
          add(ipackages*, p*)
      resolve-ipackages() when not empty?(ps) or not empty?(ds)

    ;Resolve type dependencies from pkgs
    check-exported-types(symtables, ipackages*, package-exports(symtables), error-accum)


    ;Compute initialization order
    defn init-order () :
      ;Compute set of all successfully resolved packages
      val resolved-set = HashSet<Symbol>()
      add-all(resolved-set, seq(name, ipackages*))
      add-all(resolved-set, seq(package, package-exports(symtables)))

      ;Return sequence of all successfully resolved packages
      defn resolved? (ps:Seqable<Symbol>) -> Seq<Symbol> :
        filter({resolved-set[_]}, ps)

      ;First compute the dependency graph
      val dependency-graph = HashTable<Symbol,List<Symbol>>()
      for p in ipackages* do :
        dependency-graph[name(p)] = to-list $ resolved? $
          seq(package, imports(p))
      for p in package-exports(symtables) do :
        dependency-graph[package(p)] = to-list $ resolved? $
          map(package-name, imported-packages(p))

      ;Compute the input order
      defn get-name (p:IPackage) : name(p)
      defn get-name (p:PackageExports) : package(p)
      val input-package-names = resolved? $ seq(get-name, packages)
      val input-order = to-tuple $ resolved? $ cat-all $ [
        `(core)
        in-reverse(cond-dependencies),
        input-package-names]
      ;Compute init order
      to-tuple(initialization-order(dependency-graph, input-order))

    ;Dump to log
    ;do(dump{_, "logs", "resolved"}, ipackages*)

    ;Return result
    val errors = if not empty?(error-accum) :
      ResolveErrors(to-tuple(error-accum))

    ResolverResult(to-tuple(ipackages*),
                   to-tuple(import-lists*),
                   init-order(),
                   errors)

;============================================================
;=================== Resolve a Single Package ===============
;============================================================

defn resolve-package (ipackage:IPackage,
                      symtables:SymbolTables,
                      priority:False|(Symbol -> Int),
                      error-accum:Vector<ResolveError>) -> IPackage|False :
  ;Retrieve symbol table for the package to resolve
  val num-errors = length(error-accum)
  val symtable = symtables[name(ipackage)] as SymbolTable
  val eng = Engine(symtable, symtables, priority, error-accum)
  val exps* = within log-resolve-exp-time(name(ipackage)) :
    map(resolve-exp{_, eng}, exps(ipackage))
  val ipackage* = sub-exps(ipackage, exps*)
  if length(error-accum) == num-errors :
    add-qualified-imports(ipackage*, qualified-imports(eng))

;<doc>=======================================================
;=================== Check Type Dependencies ================
;============================================================

The resolver ensures that all types referenced in the sources files
are declared (either in another source file or a .pkg file).

This step ensures that all types referenced in the .pkg files
are declared (either in a source file or a .pkg file).

Each referenced type in the .pkg files are held within a TypeId
structure, which tells us the name of the type, and the name
of the package it is in.

First retrieve the symbol table corresponding to the package
that the type is in. If the retrieved symbol table is false,
it means that this package dependency could not be resolved,
and we've already issued an error for that.

If the retrieved symbol table is not false, then ask the
symbol table whether a type with that name exists, and
issue an error if it doesn't.

;============================================================
;=======================================================<doc>
;+<5218000E>

defn check-exported-types (symtables:SymbolTables, pkgs:Collection<IPackage>, pexs:Tuple<PackageExports>, error-accum:Vector<ResolveError>) :
  ;Ensure that all types referenced in exports are defined
  for pex in pexs do :
    ;Check for existence of typeid
    defn check-for-type (e:TypeId) :
      val symtable = symtables[package(e)]
      match(symtable:SymbolTable) :
        val defines-type? = for e in defined(symtable,name(e)) any? :
          type(e) is TypeE|LTypeE
        if not defines-type? :
          add(error-accum, MissingType(package(pex), e))
    ;Recursively scan DItem for typeid
    defn scan-for-type (e:DItem) :
      do(scan-for-type, e)
      match(e:TypeId) :
        check-for-type(e)
    ;Scan all exports
    do(scan-for-type, exports(pex))

;============================================================
;===================== Defresolver ==========================
;============================================================

#use-added-syntax(stz-resolver-lang)
defresolver resolve-exp (e:IExp, eng:Engine) :

  ;     Resolving Stanza Expressions
  ;     ----------------------------
  ;Resolve top level expressions
  resolve te :
    IDoc: ()
    IBegin: (exps:te)
    IDefType: {args:+, parent:t, children:te}
    IDefChild: (name:c, {args:+, parent:t})
    IDef: (type:t, value:e)
    IDefVar: (type:t, value:e)
    IDefn: {targs:+, args:+, a1:t, a2:t, body:e}
    IDefmulti: {targs:+, args:+, a1:t, a2:t}
    IDefmethod: (multi:m, {targs:+, args:+, a1:t, a2:t, body:e})
    IVisibility: (exp:te)
    + ltc
    + e

  ;Resolve Stanza expressions
  resolve e :
    Let: (def:e, body:e)
    LetRec: (defns:f+, defns:f, body:e)
    ILet: {exp:e}
    IDef: (type:t, value:e, name:+)
    IDefVar: (type:t, value:e, name:+)
    IFn: (a1:t, a2:t, {args:+, body:e})
    IBranch: (types:t, {args:+, body:e})
    INew: (class:pt, methods:dm)
    ICast: (exp:e, type:t)
    IUpCast: (exp:e, type:t)
    ISet: (name:v, value:e)
    IPrim: (op:prim, args:e)
    IDo: (func:farg, args:e)
    IKeywordArg: (value:e)
    IVar: resolve var
    ILiteral: ()
    INone: ()
    IMulti: (_:e)
    IBegin: (_:e)
    IMatch: (_:e)
    ITuple: (_:e)

  ;Stanza Nested functions
  resolve f :
    IDefn: {targs:+, args:+, a1:t, a2:t, body:e}

  ;Function arguments used in do forms
  resolve farg :
    IOf: (class:e, args:t)
    + e

  ;Nested defmethods in new forms
  resolve dm :
    IDefmethod: (multi:m, {targs:+, args:+, a1:t, a2:t, thisn:this, body:e})

  ;For resolving multis in defmethod forms
  resolve m :
    IVar: resolve multi

  ;For resolving the this argument in nested defmethod forms
  resolve this (Int|False) :
    Int|False: resolve this

  ;For resolving mutable variables in set forms
  resolve v :
    IVar: resolve mutable-var

  ;For resolving HiStanza primitive
  resolve prim :
    IVar: resolve prim

  ;For scanning for nested functions in a letrec form
  define f+ :
    IDefn: (name:+)

  ;For scanning for defined blocks in a labels form
  define blk+ :
    ILSLabeledBlock: (name:+)

  ;     Resolving Types
  ;     ---------------
  ;Resolving a HiStanza type
  resolve t :
    IVar: resolve type
    ICap: (name:cap)
    IOf: (class:c, args:t)
    IExp: (_:t)

  ;For resolving class in a A<X> form
  resolve c :
    IVar: resolve class

  ;For resolving the captured type variable
  resolve cap :
    IVar: resolve capvar

  ;     Resolving Parent Types
  ;     ----------------------
  resolve pt :
    IVar: resolve raw-hs-class
    IOf: (class:hclass, args:t)
    IExp: (_:pt)
  resolve hclass :
    IVar: resolve hs-class

  ;     Resolving LoStanza
  ;     ------------------
  ;For resolving top level LoStanza commands
  resolve ltc :
    IBegin: (exps:ltc)
    ILSDef: (exp:le, type:lt)
    ILSDefVar: (exp:le, type:lt)
    ILSDefType: {args:+, parent:pt, fields:fd, rfield:fd}
    ILSExtern: (type:lt)
    ILSDefn: {targs:+, a1:lt, a2:lt, args:+, body:lc}
    ILSExternFn: {a1:lt, a2:lt, args:+, body:lc}
    ILSDefmethod: (multi:m, {targs:+, a1:lt, a2:lt, args:+, body:lc})
    + lc

  ;For resolving LoStanza commands
  resolve lc :
    IBegin: (exps:lc)
    ILSSet: (exp:lval, value:le)
    ILSLabels: {blocks:blk+, blocks:lc}
    ILSLabeledBlock: (types:lt, {args:+, body:lc})
    ILSGoto: (name:lbl, args:le)
    ILSReturn: (exp:le)
    ILSLet: {comm:lc}
    ILSIf: (pred:le, {conseq:lc}, {alt:lc})
    ILSMatch: (args:le, branches:lc)
    ILSBranch: (types:lt, {args:+, body:lc})
    ILSDef: (exp:le, type:lt, name:+)
    ILSDefVar: (exp:le, type:lt, name:+)
    ILSDo: (func:lfarg, args:le)
    ILSPrim: (op:lprim, args:le)
    ILSCallC: (_:le)

  ;For resolving a LoStanza expression
  resolve le :
    IVar: resolve var
    ILSAddr: (exp:lval)
    ILSNew: (type:lt, args:le)
    ILSStruct: (type:lt, args:le)
    ILSField: (exp:le)
    ILSDo: (func:lfarg, args:le)
    IKeywordArg: (value:le)
    ILSPrim: (op:lprim, args:le)
    ILSSizeof: (type:lt)
    ILSTagof: (name:lclass)
    ILSAs: (exp:le, type:lt)
    ILSFn: (ref:fn)
    ILiteral: ()
    IExp: (_:le)

  ;For resolving functions in ls-fn forms
  resolve fn :
    IVar: resolve function

  ;For resolving labels in label/goto forms
  resolve lbl :
    IVar: resolve label

  ;For resolving the lvalue expression in a set form
  resolve lval :
    IVar: resolve var
    ILSDeref: (exp:le)
    ILSSlot: (exp:le index:le)
    ILSField: (exp:le)

  ;For resolving the name argument of a prim form
  resolve lprim :
    IVar: resolve ls-prim

  ;For resolving the function argument of a do form
  resolve lfarg :
    ILSOfT: (class:le, args:t)
    + le

  ;For resolving a LoStanza type
  resolve lt :
    IVar: resolve raw-ls-class
    ILSOfT: (class:lclass, args:t)
    ILSRefT: (type:t)
    IExp: (_:lt)
  resolve lclass :
    IVar: resolve ls-class

  ;For resolving types in LoStanza field declarations
  resolve fd :
    ILSDefField: (type:lt)
    INone: ()

;============================================================
;===================== Engine ===============================
;============================================================

deftype Engine
defmulti new-definitions (eng:Engine, e:IExp) -> False
defmulti push-scope (eng:Engine) -> False
defmulti pop-scope (eng:Engine) -> False
defmulti resolve (e:IVar, eng:Engine, type:Symbol) -> IExp
defmulti resolve (e:Int|False, eng:Engine, type:Symbol) -> Int|False
defmulti qualified-imports (eng:Engine) -> Tuple<Symbol>

defn Engine (current-symtable:SymbolTable,
             symtables:SymbolTables,
             priority:False|(Symbol -> Int),
             errors:Vector<ResolveError>) :
  ;All packages that need to be imported
  ;due to package-qualified identifiers.
  val import-set = HashSet<Symbol>()

  ;Type predicates
  defn type-pred (f: EType -> True|False) : fn* (e:VEntry) : f(type(e))
  val var? = type-pred({_ is LValE|LVarE|LFnE|ValE|VarE|FnE|MultiE})
  val mvar? = type-pred({_ is LVarE|VarE})
  val fn? = type-pred({_ is LFnE|FnE|MultiE})
  val multi? = type-pred({_ is MultiE})
  val type? = type-pred({_ is TVarE|CapVarE|TypeE|LTypeE})
  val class? = type-pred({_ is TypeE|LTypeE})
  val hs-class? = type-pred({_ is TypeE})
  val ls-class? = type-pred({_ is LTypeE})
  val tvar? = type-pred({_ is TVarE|CapVarE})
  val capvar? = type-pred({_ is CapVarE})
  val label? = type-pred({_ is LabelE})

  ;Resolve a variable of the given type.
  ;Result can be multiple entries.
  defn resolve-many (e:IVar, pred?:VEntry -> True|False, base?:True|False) -> List<VEntry> :
    val [package-name, local-name] = qualifier(name(e))
    match(package-name) :
      (package-name:Symbol) :
        if package-name == `\|| :
          resolve-top(local-name)
        else :
          match(symtables[package-name]) :
            (t:SymbolTable) : resolve-qualified(t, package-name, local-name)
            (_:False) : throw(BadQualifyPackage(name(e), info(e)))
      (package-name:False) :
        resolve-unqualified(local-name)
    where :
      ;Prune by priority
      defn prune-low-priority (es:Seqable<VEntry>) :
        match(priority:Symbol -> Int) :
          defn max-priority (es:Seqable<VEntry>) : maximum(seq(priority{package(_)}, es))
          val [es, max-p] = fork-on-seq(es, to-tuple, max-priority)
          filter({priority(package(_)) == max-p}, es)
        else :
          es

      ;Return type-appropriate entries
      defn return-pruned (es:Seqable<VEntry>) :
        val es* = filter(pred?, es)
        if empty?(es*) : throw(NoResolve(name(e), info(e)))
        else : to-list(prune-low-priority(es*))

      ;Qualified form: /mysymbol
      defn resolve-top (name:Symbol) :
        return-pruned(base(current-symtable, name))

      ;Qualified form: mypackage/mysymbol
      defn resolve-qualified (table:SymbolTable, package-name:Symbol, name:Symbol) :
        add(import-set, package-name)
        return-pruned $ for e in base(table,name) filter :
          visibility(e) is Public|Protected and
          package(e) == package(table)

      ;Standard unqualified symbol
      defn resolve-unqualified (name:Symbol) :
        if base? :
          resolve-top(name)
        else :
          val es = for layer in current-symtable[name] first :
            val es* = filter(pred?, layer)
            if empty?(es*) : None()
            else : One(es*)
          if empty?(es) : throw(NoResolve(/name(e), info(e)))
          else : to-list(prune-low-priority(value!(es)))
  defn resolve-many (e:IVar, pred?:VEntry -> True|False) -> List<VEntry> :
    resolve-many(e, pred?, false)

  ;Resolve a variable of the given type.
  ;Result must be a single unambiguous entry.
  defn resolve-one (e:IVar, pred?:VEntry -> True|False, base?:True|False) -> VEntry :
    val es = resolve-many(e, pred?, base?)
    if empty?(tail(es)) : head(es)
    else : throw(AmbResolve(name(e), info(e), es))
  defn resolve-one (e:IVar, pred?:VEntry -> True|False) -> VEntry :
    resolve-one(e, pred?, false)

  ;Resolve a variable in the immediate scope.
  ;Guaranteed to not be a top-level scope. (So no need for priority pruning.)
  defn resolve-immediate (e:IVar, pred?:VEntry -> True|False) :
    val es = to-list(filter(type?, immediate(current-symtable, name(e))))
    if empty?(es) : throw(NoResolve(name(e), info(e)))
    else if one?(es) : head(es)
    else : throw(AmbResolve(name(e), info(e), es))

  ;Accumulate errors
  defn catch-error<?T> (f:() -> ?T, default:?T) :
    try :
      f()
    catch (ex:ResolveError) :
      add(errors, ex)
      default

  new Engine :
    defmethod qualified-imports (this) :
      to-tuple(import-set)
    defmethod new-definitions (this, e:IExp) :
      let loop (e:IExp = e) :
        match(e:VarN) : define(current-symtable, n(e))
        else : do(loop, e)
    defmethod push-scope (this) :
      push-scope(current-symtable)
    defmethod pop-scope (this) :
      pop-scope(current-symtable)
    defmethod resolve (e:IVar, this, type:Symbol) :
      ;Return a list of entries
      defn return (es:List<VEntry>) :
        if one?(es) : return(head(es))
        else : Mix(map(return,es), info(e))
      defn return (ventry:VEntry) :
        VarN(n(ventry), info(e))

      within catch-error(e) :
        switch(type) :
          `var :
            val vs = resolve-many(e,var?)
            if one?(vs) : return(head(vs))
            else if all?(fn?, vs) : return(vs)
            else : throw(AmbResolve(name(e), info(e), vs))
          `mutable-var :
            val v = resolve-one(e,var?)
            if not mvar?(v) : throw(NotMutable(name(e), info(e), v))
            else : return(v)
          `multi :
            return(resolve-many(e,multi?,true))
          `function :
            val vs = resolve-many(e,var?)
            if one?(vs) :
              val v = head(vs)
              if fn?(v) : return(v)
              else : throw(NotFn(name(e),info(e),v))
            else if all?(fn?, vs) : return(vs)
            else : throw(AmbResolve(name(e), info(e), vs))
          `type :
            val v = resolve-one(e,type?)
            if class?(v) : Raw(return(v), info(e))
            else : return(v)
          `class :
            val v = resolve-one(e,type?,true)
            if class?(v) : return(v)
            else : throw(NotClass(name(e),info(e),v))
          `capvar :
            val v = resolve-immediate(e, type?)
            if capvar?(v) : return(v)
            else : throw(NotCapVar(name(e), info(e), v))
          `raw-hs-class :
            val v = resolve-one(e,type?,true)
            if hs-class?(v) : Raw(return(v), info(e))
            else : throw(NotHSClass(name(e),info(e),v))
          `hs-class :
            val v = resolve-one(e,type?,true)
            if hs-class?(v) : return(v)
            else : throw(NotHSClass(name(e),info(e),v))
          `raw-ls-class :
            val v = resolve-one(e,type?,true)
            if ls-class?(v) : Raw(return(v), info(e))
            else : throw(NotLSClass(name(e),info(e),v))
          `ls-class :
            val v = resolve-one(e,type?,true)
            if ls-class?(v) : return(v)
            else : throw(NotLSClass(name(e),info(e),v))
          `label :
            return(resolve-one(e,label?))
          `prim :
            throw(NotPrim(name(e),info(e))) when not primitive?(name(e))
            e
          `ls-prim :
            throw(NotLSPrim(name(e),info(e))) when not ls-primitive?(name(e))
            e
    defmethod resolve (e:Int|False, this, type:Symbol) :
      fatal("Illegal argument") when type != `this
      val es = to-list(filter(var?, immediate(current-symtable, `this)))
      fatal("Improper instance method.") when length(es) != 1
      n(head(es))

defn add-qualified-imports (ipackage:IPackage, imps:Tuple<Symbol>) :
  ;Set of imports
  val imports = HashSet<IImport>(name-hash, name-equal?) where :
    defn name-hash (i:IImport) : hash(package(i))
    defn name-equal? (a:IImport, b:IImport) : package(a) == package(b)

  ;Add existing imports
  add-all(imports, /imports(ipackage))

  ;Add new imports
  for imp in imps do :
    add(imports, IImport(imp)) when imp != name(ipackage)

  ;Add imports
  sub-imports(ipackage, to-tuple(imports))

;============================================================
;=================== Symbol Tables ==========================
;============================================================

deftype SymbolTables
defmulti get (st:SymbolTables, package:Symbol) -> SymbolTable|False
defmulti package-exports (st:SymbolTables) -> Tuple<PackageExports>
defmulti new-ipackages (st:SymbolTables) -> Tuple<IPackage>
defmulti load-conditional-dependencies (st:SymbolTables) -> Vector<Symbol>

; Three different import modes:
; - "import" mode: copy all imported definitions into symbol table.
;   Corresponds to "import" clause
; - "forward" mode: copy forwarded definitions into symbol table, update their associated package
;   Corresponds to forward clause in a .pkg file (definitions are already imported)
; - "import and forward" mode: Both of the above.
;   Corresponds to a "forward" clause in a .stanza source file
deftype ImportMode
defmulti import (i : ImportMode) -> True|False
defmulti forward (i : ImportMode) -> True|False

defstruct MImport <: ImportMode
defmethod import (i : MImport) : true
defmethod forward (i : MImport) : false

defstruct MForward <: ImportMode
defmethod import (i : MForward) : false
defmethod forward (i : MForward) : true

defstruct MImportAndForward <: ImportMode
defmethod import (i : MImportAndForward) : true
defmethod forward (i : MImportAndForward) : true


defn SymbolTables (packages:Tuple<IPackage|PackageExports>, env:Env, errors:Vector<ResolveError>) :
  ;Table holding packages
  val pkg-table = HashTable<Symbol,IPackage|PackageExports|False>()

  ;Accumulator holding new ipackages loaded during the resolution process
  val new-ipackages = Vector<IPackage>()

  ;Load the given package from the environment if it has not
  ;already been loaded. Recursively load all of its dependencies as well.
  defn load-package (name:Symbol) -> IPackage|PackageExports|False :
    if not key?(pkg-table, name) :
      val p = within exclude-from-resolve-exp-time() :
        imported-package(env, name)
      pkg-table[name] = p
      match(p:IPackage) :
        add(new-ipackages, p)
      match(p:IPackage|PackageExports) :
        load-dependencies(p)
    pkg-table[name]

  ;Load all dependencies of a package
  defn load-dependencies (p:IPackage|PackageExports) :
    match(p) :
      (p:IPackage) :
        for imp in imports(p) do :
          val result = load-package(package(imp))
          if result is False :
            add(errors, NoPackage(package(imp), name(p), info(imp)))
      (p:PackageExports) :
        for imp in imported-packages(p) do :
          val result = load-package(package-name(imp))
          if result is False :
            add(errors, NoPackage(package-name(imp), package(p), false))

  ;Initialize with source packages,
  ;and load all of their dependencies.
  for p in packages do :
    match(p) :
      (p:IPackage) :
        pkg-table[name(p)] = p
        add(new-ipackages, p)
      (p:PackageExports) :
        pkg-table[package(p)] = p
  do(load-dependencies, packages)

  ;Ensure that core is loaded.
  load-package(`core)

  ;Helper: Convert into a HashSet (if given).
  defn to-import-set (xs : False|Tuple<Symbol>) -> HashSet<Symbol>|False :
    match(xs):
      (xs:Tuple<Symbol>) : to-hashset<Symbol>(xs)
      (f:False) : false

  ; Wrapper to initialize cycle detection set: we should never re-import
  ;   the top-level package via a forward
  defn extend-symtable (symtable, imp, ptable, mode, import-list, target-pkg:Symbol) -> False :
    extend-symtable(symtable, imp, ptable, mode, import-list, to-hashset<Symbol>([target-pkg]))

  ; For a given import and its prefix table:
  ; Add its public symbols to the table, recursively import any
  ;   forwarded packages, transitively composing prefix tables.
  ; Performs an in-place modification of `symtable`. Will be called
  ; once for every `import` statement within a package.
  ; - symtable: The table to modify.
  ; - imp: The import statement to process.
  ; - import-ptable: The representation of the prefix directives to use for this import.
  ; - forwarding: True if in the original call to extend-symtable, 'imp' is a forwarding import.
  ;   (extend-symtable is recursive.)
  ; - import-list: The concrete list of symbols. False if we should import everything.
  ; - exposed-packages : set of package names transitively contained within package `imp` via forwarding. Used for cycle detection.
  defn extend-symtable (symtable:SymbolTable,
                        imp:IImport,
                        import-ptable:PrefixTable,
                        mode:ImportMode
                        import-list:False|HashSet<Symbol>
                        exposed-packages:HashSet<Symbol>) -> False :

    ; Compute the intersection of two import lists for propagating them down the dependency chain.
    ; import-list : the list of symbols to import
    ; forwarded-list : the list of symbols to forward
    ; ptable : the PrefixTable under which symbols are forwarded. Need to prefix elements of forwarded-list in order to compare them to import-list.
    defn import-list-intersection (il : False, fl : False, ptable) : false
    ; Concrete import list, universal forward list: remove prefixes from concrete imports for local reasoning
    defn import-list-intersection (import-list: HashSet<Symbol>, forwarded-list: False, ptable) :
      to-hashset<Symbol>(seq?(fn (sym) : unprefix(ptable[sym], sym), import-list))
    ; Concrete forwarding list, universal import list: use forwarding list
    defn import-list-intersection (import-list: False, forwarded-list: Tuple<Symbol>, ptable) :
      to-hashset<Symbol>(forwarded-list)
    ; Two concrete import lists: compute intersection (modulo prefixing)
    ; - import-list: The import list we're attempting to process.
    ; - forwarded-list: The list of forwarded definitions that we might import.
    ; - ptable: Is the prefix directives for the forwarded-list.
    defn import-list-intersection (import-list: HashSet<Symbol>, forwarded-list: Tuple<Symbol>, ptable : PrefixTable) :
      val intersection = HashSet<Symbol>()
      for fwd in forwarded-list do:
        if import-list[add-prefix(ptable[fwd], fwd)] : add(intersection, fwd)
      intersection

    ; Check if an importable VEntry is in the import list
    defn in-import-list? (e: VEntry) -> True|False :
        match(import-list) :
          (only:HashSet<Symbol>) : only[name(e)]
          (f:False) : true

    ; Import entries with public visibility that are also in the import list
    defn should-import? (e : VEntry) :
      if import-private?(imp) : in-import-list?(e)
      else : (visibility(e) is Public) and in-import-list?(e)

    ; Forward entries with public or private visibility that are also in the import list
    defn should-forward? (e : VEntry) :
      in-import-list?(e) and
      visibility(e) is Protected|Public

    ; Main functionality:
    ;   Extend symtable with all definitions in IImport, as well as any forwarded imports
    val import-name = package(imp)
    match(load-package(import-name)) :
      ;Imported a source file: use visible members of NameMap, recursively import any forwards
      (p:IPackage) :
        ; Import public definitions according to the import prefix table.
        if import(mode):
          import(symtable, filter(should-import?, toplevel(namemap(p))), import-ptable)
        if forward(mode):
          update-owner(symtable, filter(should-forward?, toplevel(namemap(p))), import-ptable)
        ; Recursively extend symtable with all packages forwarded by p
        for fwd in filter(forward, imports(p)) do :
          if exposed-packages[package(fwd)] : ; Check for cycles
            add(exposed-packages, package(fwd))
            throw(ForwardingCycle(to-seq(exposed-packages)))
          add(exposed-packages, package(fwd)) ; Record visit for cycle detection
          ; Update import list and all ptables
          val import-list* = import-list-intersection(import-list, only(fwd), PrefixTable(prefix(fwd)))
          val import-ptable* = compose(import-ptable, PrefixTable(prefix(fwd)))
          extend-symtable(symtable, fwd, import-ptable*, mode, import-list*, exposed-packages)
          remove(exposed-packages, package(fwd))
      ;Imported a .pkg file: copy all Exports, recursively extend from any forwarded packages
      (p:PackageExports) :
        ; Import public definitions and protected definitions (when necessary)
        if import(mode):
          import(symtable, filter(should-import?, (seq(VEntry, exports(p)))), import-ptable)
        if forward(mode):
          update-owner(symtable, filter(should-forward?, (seq(VEntry, exports(p)))), import-ptable)
        for fwd in filter(forward, imported-packages(p)) do:
          if exposed-packages[package-name(fwd)] : ; Check for cycles
            add(exposed-packages, package-name(fwd))
            throw(ForwardingCycle(to-seq(exposed-packages)))
          add(exposed-packages, package-name(fwd)) ; Record visit for cycle detection
          val import-list* = import-list-intersection(import-list, only(fwd), PrefixTable(prefix(fwd)))
          val import-ptable* = compose(import-ptable, PrefixTable(prefix(fwd)))
          extend-symtable(symtable, to-iimport(fwd), import-ptable*, mode, import-list*, exposed-packages)
          remove(exposed-packages, package-name(fwd))
      ;Could not resolve the imported package.
      (f:False) :
        add(errors, NoPackage(import-name, package(symtable), info(imp)))

  ;Construct a symbol table from a source package.
  defn make-symtable (p:IPackage) -> SymbolTable :
    ;Initialize symboltable with base mappings
    val symtable = SymbolTable(name(p), namemap(p))
    ;Extend symtable from all imports
    for imp in imports(p) do :
      val only-set = to-import-set(only(imp))
      val mode = if forward(imp) : MImportAndForward() else : MImport()
      extend-symtable(symtable, imp, PrefixTable(prefix(imp)), mode, only-set, name(p))

    symtable

  ;Construct a symbol table from a .pkg file.
  defn make-symtable (p:PackageExports) -> SymbolTable :
    within log-time(RESOLVER-SYMBOL-TABLES) :
      ; Initialize symbol table according to package's exported definitions
      val symtable = SymbolTable(package(p), exports(p))
      ; Extend symbol table with exports from all forwarded dependencies
      for fwd in filter(forward, imported-packages(p)) do :
        val import-list* = to-import-set(only(fwd))
        extend-symtable(symtable, to-iimport(fwd), PrefixTable(prefix(fwd)), MForward(), import-list*, package(p))

      symtable

  ;Create cached symbol tables
  val symtables = within package-name = HashTable-init<Symbol,SymbolTable|False>() :
    match(load-package(package-name)) :
      (p:IPackage|PackageExports) : make-symtable(p)
      (p:False) : false

  ;Return symbol tables structure
  new SymbolTables :
    defmethod get (this, package:Symbol) :
      symtables[package]
    defmethod package-exports (this) :
      to-tuple $ filter-by<PackageExports>(values(pkg-table))
    defmethod new-ipackages (this) :
      val ps = to-tuple(new-ipackages)
      clear(new-ipackages)
      ps
    defmethod load-conditional-dependencies (this) -> Vector<Symbol> :
      val ds = conditional-dependencies(env, keys(pkg-table))
      val newly-loaded = Vector<Symbol>()
      for d in ds do :
        match(load-package(d)) :
          (l:PackageExports) : add(newly-loaded, package(l))
          (l:IPackage) : add(newly-loaded, name(l))
          (l:False) : add(errors, NoConditionalPackage(d))
      ;Return newly loaded
      newly-loaded

;============================================================
;=============== Single-Package SymbolTable =================
;============================================================

;The SymbolTable for a package holds all the names a user can reference from that package.
deftype SymbolTable

;The package name of this SymbolTable.
defmulti package (t:SymbolTable) -> Symbol

defmulti import (t:SymbolTable, entries:Seqable<VEntry>, ptable:PrefixTable) -> False

;For each entry, changes its "owning package" to the SymbolTable's package, and adds it to this SymbolTable.
defmulti update-owner (t:SymbolTable, entries:Seqable<VEntry>, ptable:PrefixTable) -> False

defmulti push-scope (t:SymbolTable) -> False
defmulti pop-scope (t:SymbolTable) -> False
defmulti define (t:SymbolTable, n:Int) -> False
defmulti get (t:SymbolTable, name:Symbol) -> List<List<VEntry>>
defmulti base (t:SymbolTable, name:Symbol) -> List<VEntry>
defmulti immediate (t:SymbolTable, name:Symbol) -> List<VEntry>

;Returns the entries that are defined within this package itself.
defmulti defined (t:SymbolTable, name:Symbol) -> List<VEntry>

defn SymbolTable (package-name:Symbol, base:NameMap|Tuple<Export>) :
  ;Level Table
  val table = MultilevelTable<Symbol, List<VEntry>>()
  val basetable = HashTable<Symbol, List<BaseEntry>>(List())


    
  ; Update an entry in the basetable
  ; Assumes the resulting entry should be forwarded
  defn forward-base-entry (e:VEntry, f, xs:List<BaseEntry>) -> List<BaseEntry> :
    if any?({ventry(_) == e}, xs) :
      map(fn (x:BaseEntry) : if ventry(x) == e : BaseEntry(f(e), true) else : x, xs)
    else : cons(BaseEntry(f(e), true), xs)

  ; Forward symbol table entry to new-package under some prefix by updating its package field
  ; Concretely: 
  ;   Search for existing entry e, update package field if found. 
  ;   If not found, simply update package field in e and add
  defn forward-entry (e:VEntry, new-package:Symbol, prefix:String|False) :
    defn fwd (e) : sub-package(e, new-package) ; Update package field
    val name* = add-prefix(prefix, name(e))
    table[name*] =
      if key?(table, name*) :
        ; If e not found, add forwarded version
        if not contains?(table[name*], e) :
          cons(fwd(e), table[name*])
        ; Otherwise, update the matching VEntry
        else : map(fn (x) : if x == e : fwd(x) else : x, table[name*])
      else : List(fwd(e))
    ; Update basetable
    if level(table) == 0 :
      update(basetable, forward-base-entry{e, fwd, _}, name*)

  ; Helper for adding VEntries to collection only if they have not
  ;   already been added
  defn add-unique<?E> (e:?E&Equalable, entries:List<E&Equalable>) -> List<E> :
    if contains?(entries, e) : entries
    else : cons(e, entries)  

  ; Add a VEntry to the symbol table under its prefix
  defn add-entry (e:VEntry, prefix:String|False) :
    val name* = add-prefix(prefix, name(e))
    ; Update symbol table
    table[name*] =
      if key?(table, name*) : add-unique(e, table[name*])
      else : List(e)
    ; Update basetable
    if level(table) == 0 :
      update(basetable, {add-unique(BaseEntry(e, false), _)}, name*)
      false

  defn add-entries (es:Seqable<VEntry>) :
    do(add-entry{_, false}, es)

  ;Importing a sequence of entries
  defn import (es:Seqable<VEntry>, ptable:PrefixTable) :
    for e in es do :
      add-entry(e, ptable[name(e)])

  ; Forward public definitions by copying and updating their owner
  ; Ensures that qualified references will work.
  defn update-owner (es:Seqable<VEntry>, ptable:PrefixTable) :
    for e in es do :
      forward-entry(e, package-name, ptable[name(e)])

  ;Initializing the symbol table
  match(base) :
    (basemap:NameMap) : add-entries(toplevel(basemap))
    (baseexs:Tuple<Export>) : add-entries(seq(VEntry,baseexs))

  ;Return bindings structure
  new SymbolTable :
    defmethod package (this) :
      package-name
    defmethod import (this, entries:Seqable<VEntry>, ptable:PrefixTable) :
      import(entries, ptable)
    defmethod update-owner (this, entries:Seqable<VEntry>, ptable:PrefixTable) :
      update-owner(entries, ptable)
    defmethod push-scope (this) :
      push-level(table)
    defmethod pop-scope (this) :
      pop-level(table)
    defmethod define (this, n:Int) :
      val basemap = base as NameMap
      add-entry(basemap[n], false)
    defmethod get (this, name:Symbol) :
      get-all(table,name)
    defmethod base (this, name:Symbol) :
      map(ventry,basetable[name])
    defmethod defined (this, name:Symbol) :
      to-list $ for e in basetable[name] seq? :
        if package(ventry(e)) == package-name and
           not forwarded?(e) : One(ventry(e))
        else : None()
    defmethod immediate (this, name:Symbol) :
      if key?(table,name) : table[name]
      else : List()
    defmethod print (o:OutputStream, this) :
      val o2 = IndentedStream(o)
      val o3 = IndentedStream(o, 4)
      print(o, "symbol table for package %~ :" % [package-name])
      for e in basetable do :
        lnprint(o2, "%~ : " % [key(e)])
        lnprints(o3, value(e))

;Represents an entry into the base table in the SymbolTable.
;- forwarded?: True if the entry was inherited from forwarding.
defstruct BaseEntry <: Equalable :
  ventry:VEntry
  forwarded?:True|False
with:
  equalable => true

;============================================================
;==================== Prefixes ==============================
;============================================================

;A condensed representation of the list of prefix directives
;in an defpackage statement.
deftype PrefixTable

;Given the name of a symbol, returns the associated prefix
;to apply to it (if any).
defmulti get (t:PrefixTable, name:Symbol) -> String|False

; Main constructor for a PrefixTable.
defn PrefixTable (prefixes:Tuple<IPrefix>) :
  var all-prefix:String|False = false
  val table = HashTable<Symbol,String>()
  for e in prefixes do :
    match(names(e)) :
      (names:False) : all-prefix = prefix(e)
      (names:Tuple<Symbol>) : do({table[_] = prefix(e)}, names)
  new PrefixTable :
    defmethod get (this, name:Symbol) :
      match(get?(table, name)) :
        (s:String) : s
        (s:False) : all-prefix

; Convenience: Create an empty prefix table.
defn PrefixTable () :
  new PrefixTable :
    defmethod get (this, name:Symbol) : false

; Convenience: Create a PrefixTable from DL-IR Tuple<ImportPrefix>.
defn PrefixTable (prefixes:Tuple<ImportPrefix>) :
  PrefixTable(map(to-iprefix, prefixes))

; Compose tables t1 and t2, where t1 depends on t2.
; t1's prefix comes before t2's prefix.
defn compose (t1:PrefixTable, t2:PrefixTable) -> PrefixTable :
  new PrefixTable :
    defmethod get (this, name:Symbol) :
      match(t2[name]) :
        (s:String) :
          match(t1[add-prefix(s, name)]) :
            (t:String) : append(t,s)
            (f:False) : s
        (f:False) :
          t1[name]

; Add a prefix to a symbol. If no prefix is given, then
; symbol is returned unchanged.
defn add-prefix (prefix:String|False, x:Symbol) -> Symbol :
  match(prefix:String) :
    val name* = append(prefix,name(x))
    match(x) :
      (x:StringSymbol) : to-symbol(name*)
      (x:GenSymbol) : gensym(name*)
  else :
    x

; Remove an optional prefix from a symbol, returning None if symbol
; does not begin with said prefix.
; If no prefix is given, then symbol is returned unchanged.
defn unprefix (prefix:String|False, x:Symbol) -> Maybe<Symbol>:
  match(prefix:String) :
    if prefix?(name(x), prefix) :
      val name* = name(x)[length(prefix) to false]
      match(x):
        (x:StringSymbol) : One(to-symbol(name*))
        (x:GenSymbol) : One(gensym(name*))
    else : None()
  else : One(x)

;============================================================
;======================= Utilities ==========================
;============================================================

defn one? (xs:List) :
  not empty?(xs) and empty?(tail(xs))

defn to-iimport (imp : ImportedPackage) :
  IImport(package-name(imp), forward(imp), only(imp), map(to-iprefix, prefix(imp)), false, false)

defn to-iprefix (p : ImportPrefix) :
  IPrefix(names(p), prefix(p))

;============================================================
;===================== Exceptions ===========================
;============================================================

public deftype ResolveError <: Exception
public defmulti info (e:ResolveError) -> AbsoluteFileInfo|False

public defstruct NoResolve <: ResolveError :
  name:Symbol
  info:AbsoluteFileInfo|False with: (as-method => true)
public defstruct BadQualifyPackage <: ResolveError :
  name:Symbol
  info:AbsoluteFileInfo|False with: (as-method => true)
public defstruct NoPackage <: ResolveError :
  name:Symbol
  source-package:Symbol
  info:AbsoluteFileInfo|False with: (as-method => true)
public defstruct NoConditionalPackage <: ResolveError :
  name:Symbol
public defstruct AmbResolve <: ResolveError :
  name:Symbol
  info:AbsoluteFileInfo|False with: (as-method => true)
  entries:List<VEntry>
public defstruct NotMutable <: ResolveError :
  name:Symbol
  info:AbsoluteFileInfo|False with: (as-method => true)
  entry:VEntry
public defstruct NotFn <: ResolveError :
  name:Symbol
  info:AbsoluteFileInfo|False with: (as-method => true)
  entry:VEntry
public defstruct NotClass <: ResolveError :
  name:Symbol
  info:AbsoluteFileInfo|False with: (as-method => true)
  entry:VEntry
public defstruct NotHSClass <: ResolveError :
  name:Symbol
  info:AbsoluteFileInfo|False with: (as-method => true)
  entry:VEntry
public defstruct NotLSClass <: ResolveError :
  name:Symbol
  info:AbsoluteFileInfo|False with: (as-method => true)
  entry:VEntry
public defstruct NotPrim <: ResolveError :
  name:Symbol
  info:AbsoluteFileInfo|False with: (as-method => true)
public defstruct NotLSPrim <: ResolveError :
  name:Symbol
  info:AbsoluteFileInfo|False with: (as-method => true)
public defstruct NotCapVar <: ResolveError :
  name:Symbol
  info:AbsoluteFileInfo|False with: (as-method => true)
  entry:VEntry
public defstruct MissingType <: ResolveError :
  src-package:Symbol
  typeid:TypeId
public defstruct ForwardingCycle <: ResolveError :
  src-packages:Seq<Symbol>

defmethod print (o:OutputStream, ps:ForwardingCycle) :
  print(o, "Packages form a cycle via forwarding: ")
  print-all(o, join(src-packages(ps), ", "))

defmethod print (o:OutputStream, e:MissingType) :
  val FMT = "Missing type: The %~ package requires the %_/%_ type to be defined."
  print(o, FMT % [src-package(e), package(typeid(e)), name(typeid(e))])

defmethod print (o:OutputStream, e:NoResolve) :
  val FMT = "%_Could not resolve %~."
  print(o, FMT % [infostr(e), name(e)])

defmethod print (o:OutputStream, e:BadQualifyPackage) :
  val [package,n] = qualifier(name(e))
  val FMT = "%_Could not resolve %~. The package %~ could not be found."
  print(o, FMT % [infostr(e), name(e), package])

defmethod print (o:OutputStream, e:NoPackage) :
  val FMT = "%_Could not find package %~, which is imported by package %~."
  print(o, FMT % [infostr(e), name(e), source-package(e)])

defmethod print (o:OutputStream, e:NoConditionalPackage) :
  val FMT = "Conditionally-imported package %_ could not be found."
  print(o, FMT % [name(e)])

defmethod print (o:OutputStream, e:AmbResolve) :
  val FMT = "%_Ambiguous reference to %~. Possibilities include:"
  print(o, FMT % [infostr(e), name(e)])
  val o2 = IndentedStream(o)
  for v in entries(e) do :
    val FMT = "%_%~ defined in package %~"
    lnprint(o2, FMT % [infostr(v), name(v), package(v)])

defmethod print (o:OutputStream, e:NotMutable) :
  val FMT = "%_Expected %~ to be a mutable variable, but %_"
  print(o, FMT % [infostr(e), name(e), descriptor(entry(e))])

defmethod print (o:OutputStream, e:NotFn) :
  val FMT = "%_Expected %~ to be a function, but %_"
  print(o, FMT % [infostr(e), name(e), descriptor(entry(e))])

defmethod print (o:OutputStream, e:NotClass) :
  val FMT = "%_Expected %~ to be a type, but %_"
  print(o, FMT % [infostr(e), name(e), descriptor(entry(e))])

defmethod print (o:OutputStream, e:NotHSClass) :
  val FMT = "%_Expected %~ to be a HiStanza type, but %_"
  print(o, FMT % [infostr(e), name(e), descriptor(entry(e))])

defmethod print (o:OutputStream, e:NotLSClass) :
  val FMT = "%_Expected %~ to be a LoStanza type, but %_"
  print(o, FMT % [infostr(e), name(e), descriptor(entry(e))])

defmethod print (o:OutputStream, e:NotCapVar) :
  val FMT = "%_Expected %~ to be a captured type variable, but %_"
  print(o, FMT % [infostr(e), name(e), descriptor(entry(e))])

defmethod print (o:OutputStream, e:NotPrim) :
  val FMT = "%_%~ is not a recognized HiStanza primitive."
  print(o, FMT % [infostr(e), name(e)])

defmethod print (o:OutputStream, e:NotLSPrim) :
  val FMT = "%_%~ is not a recognized LoStanza primitive."
  print(o, FMT % [infostr(e), name(e)])

defn descriptor (e:VEntry) :
  val typestr = match(type(e)) :
    (t:ValE) : "HiStanza value"
    (t:VarE) : "HiStanza variable"
    (t:TVarE) : "type variable"
    (t:CapVarE) : "captured type variable"
    (t:TypeE) : "HiStanza type"
    (t:MultiE) : "multi"
    (t:FnE) : "HiStanza function"
    (t:LValE) : "LoStanza value"
    (t:LVarE) : "LoStanza variable"
    (t:LFnE) : "LoStanza function"
    (t:LTypeE) : "LoStanza type"
    (t:FieldE) : "field"
    (t:LabelE) : "label"
  val defstr = match(info(e)) :
    (info:AbsoluteFileInfo) : " at %_" % [/info(info)]
    (info:False) : ""
  "%~ defined%_ in package %~ is a %_." % [name(e), defstr, package(e), typestr]

defn infostr (info:AbsoluteFileInfo|False) :
  match(info) :
    (info:AbsoluteFileInfo) : "%_: " % [/info(info)]
    (info:False) : ""
defn infostr (e:ResolveError) :
  infostr(info(e))
defn infostr (e:VEntry) :
  infostr(info(e))

public defstruct ResolveErrors <: Exception :
  errors: Tuple<ResolveError>
defmethod print (o:OutputStream, e:ResolveErrors) :
  print(o, "%n" % [errors(e)])
