defpackage stz/kl2-ir :
  import core
  import collections
  import stz/ids

#use-added-syntax(stz-ast-lang, stz-printer-lang)

;============================================================
;=================== Structures =============================
;============================================================

public defast :
  deftype KType <: Hashable & Equalable
  defnodes KType :
    ;LoStanza Types
    KByteT
    KIntT
    KLongT
    KFloatT
    KDoubleT
    KUnknownT
    KPtrT: (type:KType)
    KFnT: (a:List<KType>, r:False|KType, b:KType)
    KStructT: (n:Int)
    
    ;HiStanza Types
    KOf: (n:Int)
    KTVar: (n:Int)
    KAnd: (a:KType, b:KType)
    KOr: (a:KType, b:KType)
    KTop
    KBot
    
  ;Top Level Expressions
  deftype KTExp
  defnodes KTExp :
    ;Input Expressions
    KDef*: (n:Int, type:KType, value:KExp, info:False|FileInfo)
    KDefVar*: (n:Int, type:KType, value:False|KExp, info:False|FileInfo)
    KDefmethod*: (n:Int, multi:Int, targs:List<KType>, value:KExp)
    
    ;Standard Expressions
    KDef: (n:Int, type:KType, value:KExp)
    KDefVar: (n:Int, type:KType, value:False|KExp)
    KDefn: (n:Int, value:KExp)
    KDefmulti: (n:Int, tail?:True|False, targs:List<Int>,
                a1:List<KType>, a2:KType, info:False|FileInfo)  
    KDefmethod: (n:Int, multi:Int, value:KExp)
    KDefType: (n:Int, name:String, parent:False|KType, children:List<KChild>)
    KDefStruct: (n:Int, name:String, parent:False|KType,
                 fields:List<KStructField>, rfield:False|KStructField)
    KExternFn: (n:Int, lbl:Symbol, value:KExp)
    KExtern: (n:Int, lbl:Symbol, type:KType)
    KInit: (exp:KExp)

  deftype KExp
  defnodes KExp :
    ;Input Expressions
    KFn*: (tail?:True|False, targs:List<Int>,
           a1:List<KType>, a2:KType, args:List<Int>, body:KExp, info:False|FileInfo, guard?:True|False)
    KDo*: (func:KExp, args:List<KExp>, a1:List<KType>, a2:KType, info:False|FileInfo)
    KVar*: (n:Int, info:False|FileInfo)
    
    ;Standard Expressions
    KLet: (n:Int, type:KType, value:KExp, body:KExp)
    KLetVar: (n:Int, type:KType, value:False|KExp, body:KExp)
    KLetRec: (ns:List<Int>, values:List<KExp>, body:KExp)
    KVar: (n:Int)
    KSet: (n:Int, type:KType, value:KExp, info:False|FileInfo)
    KNew: (type:KType, name:String, methods:List<KExp>, info:False|FileInfo)
    KTuple: (exps:List<KExp>, info:False|FileInfo)
    KTupleGet: (exp:KExp, index:Int)
    KEnsureLength: (exp:KExp, length:Int, info:False|FileInfo)
    KObject: (n:Int, args:List<KExp>, info:False|FileInfo)
    KArray: (n:Int, length:KExp, args:List<KExp>, info:False|FileInfo)
    KStruct: (n:Int, args:List<KExp>)
    KPtr: (loc:KExp)
    KDo: (func:KExp, args:List<KExp>, type:KType, info:False|FileInfo)
    KDoC: (func:KExp, args:List<KExp>, varargs:List<KExp>, type:KType)
    KLSLiteral: (value:?)
    KLiteral: (value:?)
    KMix: (exps:List<KExp>)
    KCurry: (exp:KExp, targs:List<KType>)
    KInterpret: (exp:KExp, type:KType)
    KCheck: (exp:KExp, type:KType, info:False|FileInfo)
    KConv: (exp:KExp, type:KType)
    KAndExp: (a:KExp, b:KExp)
    KOrExp: (a:KExp, b:KExp)
    KPrim: (op:LSPrimitive|Primitive, args:List<KExp>)
    KSizeof: (type:KType)
    KTagof: (n:Int)
    KMatch: (args:List<KExp>, branches:List<KExp>, info:False|FileInfo)    
    KBranch: (args:List<Int>, types:List<KType>, body:KExp, info:False|FileInfo)
    KLabels: (blocks:List<KExp>)
    KBlock: (n:Int, args:List<Int>, types:List<KType>, body:KExp)
    KIf: (pred:KExp, conseq:KExp, alt:KExp)
    KSeq: (a:KExp, b:KExp)
    KGoto: (n:Int, args:List<KExp>)
    KDeref: (exp:KExp)
    KDeptr: (exp:KExp)
    KField: (exp:KExp, n:Int)
    KSlot: (exp:KExp, index:KExp, type:KType)
    KFn: (tail?:True|False, targs:List<Int>,
          a1:List<KType>, a2:KType, args:List<Int>, body:KExp, info:False|FileInfo)
    KMultifn: (funcs:List<KExp>)
    KMethod: (multi:Int, targs:List<KType>, thisn:Int, value:KExp)

    ;Working Expressions
    KDispatch: (args:List<KExp>, branches:List<KExp>, info:False|FileInfo)
    KEnsureSet: (exp:KExp, info:False|FileInfo)


;Structures
public defstruct KChild: (n:Int, parent:KType)
public defstruct KStructField: (n:Int, type:KType)
public defstruct KPackage: (name:Symbol, ids:PkgIds,
                            exps:List<KTExp>, loaded?:True|False)

;============================================================
;====================== Printing ============================
;============================================================

#use-added-syntax(stz-printer-lang)

defprinter (p:KPackage) :
  KPackage :
    ($package name ids exps ...)

defprinter (c:KChild) :
  KChild :
    ($child n parent)

defprinter (c:KStructField) :
  KStructField :
    ($field n type)

defprinter (t:KType) :
  KByteT :
    custom{"$byte"}
  KIntT :
    custom{"$int"}
  KLongT :
    custom{"$long"}
  KFloatT :
    custom{"$float"}
  KDoubleT :
    custom{"$double"}
  KUnknownT :
    custom{"$unknown"}
  KPtrT:
    ($ptr type)
  KFnT:
    ($fn a r b)
  KStructT:
    ($struct n)
  KOf:
    ($of n)
  KTVar:
    custom{"$v%_" % [n(t)]}
  KAnd:
    ($and a b)
  KOr:
    ($or a b)
  KTop :
    custom{"$top"}
  KBot :
    custom{"$bot"}

defprinter (e:KTExp) :
  KDef* :
    ($def* n type value guard?)
  KDefVar* :
    ($defvar* n type value guard?)    
  KDef :
    ($def n type value)
  KDefVar :
    ($defvar n type value)
  KDefn :
    ($defn n value)
  KDefmulti :
    ($defmulti n tail? targs a1 a2 info)  
  KDefMethod :
    ($defmethod n multi value)
  KDefType :
    ($deftype n name parent children ...)
  KDefStruct :
    ($defstruct n name parent fields rfield)
  KExternFn :
    ($externfn n lbl value)
  KExtern :
    ($extern n lbl type)
  KInit :
    ($init exp)  

defprinter (e:KExp) :
  KFn* :
    ($fn* tail? targs a1 a2 args body info guard?)
  KDo* :
    ($do* func args a1 a2 info)
  KVar* :
    ($var* n info)  
  KLet :
    ($let n type value body)
  KLetVar :
    ($letvar n type value body)
  KLetRec :
    ($letrec ns values body)
  KVar :
    custom{"$v_" % [n(e)]}
  KSet :
    ($set n type value info)
  KNew :
    ($new type name methods ...)
  KTuple :
    ($tuple exps ...)
  KTupleGet :
    ($tuple-get exp index)
  KEnsureLength :
    ($ensure-length exp length)
  KObject :
    ($object n args ...)
  KArray :
    ($array n length args ...)
  KStruct :
    ($struct n args ...)
  KPtr :
    ($ptr loc)
  KDo :
    ($do func args type)
  KDoC :
    ($do-c func args varargs type)
  KLSLiteral :
    ($ls-literal value)
  KLiteral :
    ($literal value)
  KMix :
    ($mix exps ...)
  KCurry :
    ($curry exp targs ...)
  KInterpret :
    ($interpret exp type)
  KCheck :
    ($check exp type)
  KConv :
    ($conv exp type)
  KAndExp :
    ($and a b)
  KOrExp :
    ($or a b)
  KPrim :
    ($prim op args ...)
  KSizeof :
    ($sizeof type)
  KTagof :
    ($tagof n)
  KMatch :
    ($match args branches ...)
  KBranch :
    ($branch args types body)
  KLabels :
    ($labels blocks ...)
  KBlock :
    ($block n args types body)
  KIf :
    ($if pred conseq alt)
  KSeq :
    ($seq a b)
  KGoto :
    ($goto n args ...)
  KDeref :
    ($deref exp)
  KDeptr :
    ($deptr exp)
  KField :
    ($field exp n)
  KSlot :
    ($slot exp index type)
  KFn :
    ($fn tail? targs a1 a2 args body)
  KMultifn :
    ($multi funcs ...)
  KMethod :
    ($method multi targs thisn value)
  KDispatch :
    ($dispatch args branches ...)
  KEnsureSet :
    ($ensure-set exp)