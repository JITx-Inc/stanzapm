defpackage stz/kl2-ir :
  import core
  import collections
  import ids

#use-added-syntax(stz-ast-lang, stz-printer-lang)

;============================================================
;=================== Structures =============================
;============================================================

public defast :
  deftype KType <: Hashable & Equalable
  defnodes KType :
    ;LoStanza Types
    KByteT
    KIntT
    KLongT
    KFloatT
    KDoubleT
    KUnknownT
    KPtrT: (type:KLSType)
    KRefT: (tag:KType)
    KFnT: (a:List<KLSType>, r:False|KLSType, b:KLSType)
    KStructT: (n:Int)
    
    ;HiStanza Types
    KOf: (n:Int)
    KTVar: (n:Int)
    KAnd: (a:KType, b:KType)
    KOr: (a:KType, b:KType)
    KTop
    KBot
    
  ;Top Level Expressions
  defnodes KTExp :
    KDef: (n:Int, type:KType, value:KExp)
    KDefVar: (n:Int, type:KType, value:False|KExp)
    KDefn: (n:Int, value:KExp)
    KDefmulti: (n:Int, tail?:True|False, targs:List<Int>,
                a1:List<KType>, a2:KType, info:False|FileInfo)  
    KDefMethod: (n:Int, multi:Int, targs:List<KType>, value:KExp)
    KDefType: (n:Int, name:String, parent:False|KType, children:List<KChild>)
    KDefStruct: (n:Int, name:String, parent:False|KType,
                 fields:List<KStructField>, rfield:False|KStructField)
    KInit: (exp:KExp)

  ;Expressions
  defnodes KExp :
    KLet: (n:Int, type:KType, value:KExp, body:KExp)
    KLetVar: (n:Int, type:KType, value:False|KExp, body:KExp)    
    KVar: (n:Int)
    KObject: (n:Int, args:List<KExp>, info:False|FileInfo)
    KArray: (n:Int, length:KExp, args:List<KExp>, info:False|FileInfo)
    KStruct: (n:Int, args:List<KExp>)
    KPtr: (loc:KExp)
    KDo: (func:KExp, args:List<KExp>, type:KType, info:False|FileInfo)
    KDoC: (func:KExp, args:List<KExp>, varargs:List<KExp>, type:KType)
    KLSLiteral: (value)
    KLiteral: (value)
    KMix: (exps:List<KExp>)
    KCurry: (exp:KExp, type:KType)
    KInterpret: (exp:KExp, type:KType)
    KCheck: (exp:KExp, type:KType, info:False|FileInfo)
    KConv: (exp:KExp, type:KType)
    KAndExp: (a:KExp, b:KExp)
    KOrExp: (a:KExp, b:KExp)
    KPrim: (op:LSPrimitive|Primitive, args:List<KExp>)
    KSizeof: (type:KType)
    KTagof: (n:Int)
    KMatch: (args:List<KExp>, branches:List<KExp>, info:False|FileInfo)
    KDispatch: (args:List<KExp>, branches:List<KExp>, info:False|FileInfo)
    KBranch: (args:List<Int>, types:List<KType>, body:KExp, info:False|FileInfo)
    KLabels: (blocks:List<KExp>)
    KBlock: (n:Int, args:List<Int>, types:List<KType>, body:KExp)
    KIf: (pred:KExp, conseq:KExp, alt:KExp)
    KSeq: (a:KExp, b:KExp)
    KGoto: (n:Int, args:List<KExp>)
    KDeref: (exp:KExp)
    KDeptr: (exp:KExp)
    KField: (exp:KExp, n:Int)
    KSlot: (exp:KExp, index:KExp, type:KType)
    KFn: (tail?:True|False, targs:List<Int>,
          a1:List<KType>, a2:KType, args:List<Int>, body:KExp, info:False|FileInfo)
    KMultifn: (funcs:List<KExp>)
    KMethod: (multi:Int, targs:List<KType>, thisn:Int, value:KExp)

;Structures
public defstruct KChild: (n:Int, parent:KType)
public defstruct KStructField: (n:Int, type:KType)
public defstruct KPackage: (name:Symbol, ids:PkgIds,
                            exps:List<KTExp>, loaded?:True|False)
  
  deftype KComm
  defnodes KComm :
    KDef :
      n: Int
      tag: KTag
      value: KExp
      info: False|FileInfo
    KDefVar :
      n: Int
      tag: KTag
      value: False|KExp
      info: False|FileInfo
    KDefn :
      n: Int
      value: KFunc
    KDefmulti :
      n: Int
      tail?: True|False
      targs: List<Int>
      a1: List<KTag>
      a2: KTag
      info: False|FileInfo
    KDefmethod :
      n: Int
      multi: Int
      targs: List<KTag>
      thisn: False|Int
      value: KFunc
    KDefTag :
      n: Int
      name: String
      parent: False|KTag
      children: List<KChild>
    KInit :
      exp: KExp

    KLSDef :
      n: Int
      type: KLSType
      value: KLSExp
    KLSDefVar :
      n: Int
      type: KLSType
      value: False|KLSExp
    KLSDefn :
      n: Int
      value: KLSFunc
    KLSDefmethod :
      n: Int
      multi: Int
      targs: List<KTag>
      value: KLSFunc
    KLSDefStruct :
      n: Int
      name: String
      parent: False|KTag
      fields: List<KStructField>
      rfield: False|KStructField
    KLSExternFn :
      n: Int
      lbl: Symbol
      value: KLSFunc
    KLSExtern :
      n: Int
      lbl: Symbol
      type: KLSType      
    KLSInit :
      comm: KLSComm

    ;[Type Reification]  
    KDefConst :
      n: Int
      value: ?
    KDefTypeObject :
      n: Int
      args: List<Int>
      tag: KTag
    ;[Object Lifting]  
    KDefObject :
      n: Int
      name: String
      parent: KTag
      arity: Int

  ;Expressions
  deftype KExp
  defnodes KExp :
    KSet :
      n: Int
      tag: KTag
      value: KExp
      info: False|FileInfo
    KCast :
      exp: KExp
      tag: KTag
      type: Int
      info: False|FileInfo
    KLet :
      def: KDef|KDefVar
      body: KExp
    KLetRec :
      defs: List<KDefn>
      body: KExp
    KSeq :
      a: KExp
      b: KExp
    KMatch :
      args: List<KExp>
      branches: List<KBranch>
      info: False|FileInfo
    KNew :
      tag: KTag
      name: String
      methods: List<KDefmethod>
      info: False|FileInfo
    KDo :
      func: KExp
      args: List<KExp>
      a1: List<KTag>
      a2: KTag
      info: False|FileInfo
    KVar :
      n: Int
      info: False|FileInfo
    KLiteral :
      value: ?
    KTuple :
      exps: List<KExp>
      info: False|FileInfo
    KTupleGet :
      exp: KExp
      index: Int
    KEnsureLength :
      exp: KExp
      length: Int
      info: False|FileInfo
    KMix :
      exps: List<KCurry|KVar>
    KCurry :
      n: Int
      targs: List<KTag>
    KAFn :
      value: KFunc
    KPrim :
      op: Primitive
      args: List<KExp>

    ;[Mix Conversion]
    KDispatch :
      args: List<KExp>
      branches: List<KBranch>
      info: False|FileInfo
    ;[Boundary Guards]  
    KEnsureSet :
      exp: KExp
      info: False|FileInfo
    KDo! :
      arity: Int
      func: KExp
      args: List<KExp>
      info: False|FileInfo
    ;[Loop Detection]
    KLetLoop :
      n: Int
      targs: List<Int>
      args: List<Int>
      tags: List<KTag>
      init-targs: List<KTag>
      init-args: List<KExp>
      body: KExp
    KGoto :
      loop: Int
      targs: List<KTag>
      args: List<KExp>
    ;[Type Reification]
    KTypeObject :
      n: Int
      args: List<KExp>
    KReifiedCast :
      exp: KExp
      tag: KTag
      targ: KExp
      type: Int
      info: False|FileInfo
    ;[Mutable Boxing]
    KBox :
      value: False|KExp
    KBoxSet :
      exp: KExp
      value: KExp
    KBoxGet :
      exp: KExp
    ;[Object Lifting]
    KObjectGet :
      exp: KExp
      index: Int
    KObject :
      n: Int
      args: List<KExp>
      info: False|FileInfo
    ;[Closure Lifting]
    KCall :
      arity: Int
      func: Int
      args: List<KExp>
      info: False|FileInfo
    KClosure :
      n: Int
      args: List<KExp>
      info: False|FileInfo
    KLetClosures :
      ns: List<Int>
      closures: List<KClosure>
      body: KExp
    KClosureGet :
      exp: KExp
      index: Int
    ;[Type Inference]
    KTypedExp :
      exp: KExp
      tag: KTag








  deftype KLSComm
  defnodes KLSComm :
    KLSExec :
      exp: KLSExp
    KLSSet :
      loc: KLoc
      type: KLSType
      value: KLSExp
    KLSLabels :
      blocks: List<KLSLabeledBlock>
    KLSGoto :
      n: Int
      args: List<KLSExp>
    KLSReturn :
      exp: KLSExp
    KLSDefLocal :
      n: Int
      type: KLSType
      value: KLSExp
    KLSDefLocalVar :
      n: Int
      type: KLSType
      value: False|KLSExp
    KLSSeq :
      a: KLSComm
      b: KLSComm
    KLSIf :
      pred: KLSExp
      conseq: KLSComm
      alt: KLSComm
    KLSMatch :
      args: List<KLSExp>
      branches: List<KLSBranch>
      info: False|FileInfo
    KLSSkip
    

      
  ;LoStanza Expressions
  deftype KLSExp
  defnodes KLSExp :
    ;[Boundary Guards]  
    KLSGuard :
      exp: KLSExp
      tag: KTag
      targ: KLSExp
      type: Int
      info: False|FileInfo
    ;[For closure creation]
    KLSAFn :
      value: KFunc
    ;[For mix conversion]
    KLSLet :
      n: Int
      type: KLSType
      value: KLSExp
      body: KLSExp
    KLSDispatch :
      args: List<KLSExp>
      branches: List<KLSBranchExp>
      info: False|FileInfo
    ;[Type Reification]  
    KLSTypeObject :
      n: Int
      args: List<KLSExp>
    KLSDo! :
      arity: Int
      func: KLSExp
      args: List<KLSExp>
      type: KLSType
      info: False|FileInfo
    ;[Closure Lifting]
    KLSClosure :
      n: Int
      args: List<KLSExp>
      info: False|FileInfo
    ;[Primitive Tagging]
    KDetagPrim :
      n: Int
      exp: KLSExp
    KTagPrim :
      n: Int
      exp: KLSExp






;Children
public defstruct KChild :
  n: Int
  parent: KTag

;Functions
public deftype KFunc
public defmulti freevars? (f:KFunc) -> False|List<Int>
public defn freevars (f:KFunc) : freevars?(f) as List<Int>

public defstruct KFn <: KFunc :
  tail?: True|False
  targs: List<Int>
  a1: List<KTag>
  a2: KTag
  args: List<Int>
  body: KExp
  info: False|FileInfo

public defstruct KMultifn <: KFunc :
  funcs: List<KFunc>
  freevars?: False|List<Int> with: (as-method => true)
public defn KMultifn (funcs:List<KFunc>) :
  KMultifn(funcs, false)
  
public defstruct KFn! <: KFunc :
  tail?: True|False
  arity: Int
  a1: List<KTag>
  a2: KTag
  args: List<Int>
  body: KExp
  info: False|FileInfo
  freevars?: False|List<Int> with: (as-method => true)
public defn KFn! (tail?:True|False, arity:Int,
                  a1:List<KTag>, a2:KTag, args:List<Int>, body:KExp,
                  info:False|FileInfo) :
  KFn!(tail?, arity, a1, a2, args, body, info, false)

;LoStanza Functions
public deftype KLSFunc

public defstruct KLSFn <: KLSFunc :
  tail?: True|False
  targs: List<Int>
  a1: List<KLSType>
  a2: KLSType
  args: List<Int>
  body: KLSComm
  info: False|FileInfo

public defstruct KLSFn! <: KLSFunc :
  stack-properties: StackProperties
  tail?: True|False
  arity: Int
  a1: List<KLSType>
  a2: KLSType
  args: List<Int>
  body: KLSComm
  info: False|FileInfo

public deftype StackProperties
public defstruct NewStack <: StackProperties
public defstruct LastStack <: StackProperties
public defstruct CheckStack <: StackProperties
  
;Branches
public defstruct KBranch :
  args: List<Int>
  tags: List<KTag>
  body: KExp
  info: False|FileInfo

public defstruct KLSBranch :
  args: List<Int>
  tags: List<KTag>
  body: KLSComm

public defstruct KLSBranchExp :
  args: List<Int>
  tags: List<KTag>
  exp: KLSExp

public defstruct KLSLabeledBlock :
  n: Int
  args: List<Int>
  types: List<KLSType>
  body: KLSComm

public defstruct KStructField :
  n: Int
  type: KLSType    

public deftype KPkgComm :
  TGPackage <: KPkgComm

public defstruct KPackage <: KPkgComm :
  name: Symbol
  ids: PkgIds
  comms: List<KComm>
  loaded?: True|False