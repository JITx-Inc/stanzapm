defpackage stz/loaded-ids :
  import core
  import collections
  import stz/dl-ir
  import stz/vm-ir
  import stz/data-pool
  import stz/const-pool

;<doc>=======================================================
;================== VirtualMachine Ids ======================
;============================================================

The purpose of the VMIds is to assign a unique global integer id
permanently to each Stanza definition. When a Stanza definition is
reloaded, it is reassigned the same id. This is what allows functions
to be reloaded without disturbing downstream dependencies.

The ids are dense and categorized according to the type of definition
they refer to. However, because they are dense, it also means that the
same integer, depending upon the type of definition it is referring
to, may refer to different things.

# Fundamental State #

  fn-ids:Vector<FnId>
  global-ids:Vector<ValId>
  class-ids:Vector<TypeId>
  data-pool:DataPool
  const-pool:ConstantPool
  package-inits:HashTable<Symbol,Int|False>

For fn-recs, global-recs, class-recs, the array index is the
identifier of the definition, and the array value is the record id of
the definition it refers to.

# State for Dependency Tracking #

  function-dependencies:Vector<Tuple<Rec>>
  class-dependencies:Vector<Tuple<Rec>>

The array index is the identifier of the definition, the array values
are the set of definitions that it depends upon.

;============================================================
;=======================================================<doc>

;============================================================
;====================== Global Ids ==========================
;============================================================

public deftype LoadedIds
public defmulti function-dependencies (ids:LoadedIds, f:Int) -> Tuple<Rec>
public defmulti class-dependencies (ids:LoadedIds, c:Int) -> Tuple<Rec>
public defmulti load-packages (ids:LoadedIds, pkgs:Collection<VMPackage>) -> LoadUnit
public defmulti type-id (ids:LoadedIds, global-id:Int) -> TypeId|False
public defmulti package-init (ids:LoadedIds, package:Symbol) -> Int|False

public defn LoadedIds () :
  ;Fundamental State
  val id-table = HashTable<RecId,Int>()
  val fn-ids = Vector<FnId|False>()
  val global-ids = Vector<ValId|False>()
  val class-ids = Vector<TypeId|False>()
  val data-pool = DataPool()
  val const-pool = ConstantPool()
  val package-inits = HashTable<Symbol,Int|False>()
  
  ;Dependency Tracking
  val function-dependencies = Vector<Tuple<Rec>>()
  val class-dependencies = Vector<Tuple<Rec>>()

  ;Utility Tables for handling externs
  val extern-id-table = extern-id-table()
  println("Extern id table:")
  for entry in extern-id-table do :
    println("Extern %~ %_ %_" % [key(entry), value(entry), extern-address(value(entry))])
  val callback-index-table = callback-index-table()

  ;Make an Id
  defn make-fn-id () -> Int :
    add(fn-ids, false)
    add(function-dependencies, [])
    length(fn-ids) - 1
  defn make-class-id () -> Int :
    add(class-ids, false)
    add(class-dependencies, [])
    length(class-ids) - 1
  defn make-global-id () -> Int :
    add(global-ids, false)
    length(global-ids) - 1

  ;Assign a given record a new Id
  defn assign-id (r:RecId) -> Int :
    if key?(id-table, r) :
      id-table[r]
    else :
      ;Get id and id vector
      val [ids, i]:[Vector<False|RecId>, Int] = match(r) :
        (r:FnId) : [fn-ids, make-fn-id()]
        (r:ValId) : [global-ids, make-global-id()]
        (r:TypeId) : [class-ids, make-class-id()]
      ids[i] = r
      id-table[r] = i
      i

  ;Assign existing ids
  defn assign-ids (rs0:Seqable<KeyValue<RecId,Int>>) :
    ;Put into array, and sort by i
    val rs = to-array<KeyValue<RecId,Int>>(rs0)
    qsort!(value, rs)
    ;Assume that the index is dense
    for e in rs do :
      val i = assign-id(key(e))
      fatal("Assigned id (%_) is not the desired id (%_)." % [i, value(e)]) when i != value(e)
  assign-ids $ [
    CORE-EXTEND-HEAP-ID => EXTEND-HEAP-FN
    CORE-EXTEND-STACK-ID => EXTEND-STACK-FN
    CORE-INIT-CONSTS-ID => INIT-CONSTS-FN
    CORE-EXECUTE-TOPLEVEL-COMMAND-ID => EXECUTE-TOPLEVEL-COMMAND-FN    
    CORE-FALSE-ID => FALSE-TYPE
    CORE-TRUE-ID => TRUE-TYPE
    CORE-BYTE-ID => BYTE-TYPE
    CORE-CHAR-ID => CHAR-TYPE
    CORE-INT-ID => INT-TYPE
    CORE-FLOAT-ID => FLOAT-TYPE
    CORE-STACK-ID => STACK-TYPE
    CORE-FN-ID => FN-TYPE
    CORE-TYPE-ID => TYPE-TYPE
    CORE-LIVENESS-TRACKER-ID => LIVENESS-TRACKER-TYPE]

  ;Form a single LoadUnit from a group of packages
  defn load-packages (pkgs:Collection<VMPackage>) -> LoadUnit :
    ;Driver
    defn driver () :
      val num-existing-datas = length(datas(data-pool))
      val num-existing-classes = length(consts(const-pool))
      val packages = Vector<LoadPackage>()
      val classes = Vector<VMClass>()
      val funcs = Vector<VMDefn>()
      val callbacks = Vector<Callback>()
      assign-export-ids()
      for pkg in pkgs do :
        val [global-ids, extern-defn-table] = create-global-ids(pkg)
        record-package-init(pkg, global-ids)
        add(packages, make-load-package(pkg, global-ids))
        add-all(classes, resolved-classes(pkg, global-ids))
        add-all(funcs, resolved-defns(pkg, global-ids, extern-defn-table))
        add-all(callbacks, resolved-callbacks(pkg, global-ids))
        val iotable = IOTable(packageio(pkg))
        record-dependencies(iotable, global-ids, /classes(pkg))
        record-dependencies(iotable, global-ids, /funcs(pkg))
      for i in 0 to length(global-ids) do :
        println("GLOBAL %_ = %_" % [i, global-ids[i]])
      LoadUnit(
        to-tuple(packages),
        form-new-datas(data-pool, num-existing-datas),
        form-new-consts(const-pool, num-existing-classes),
        to-tuple(classes),
        to-tuple(funcs),
        to-tuple(callbacks))

    ;Assign global export ids to all exported definitions in all packages.
    ;Extern records are handled differently (through the extern id table).
    defn assign-export-ids () :
      for pkg in pkgs do :
        for e in exports(packageio(pkg)) do :
          assign-id(id(rec(e))) when rec(e) is-not ExternRec

    ;Compute global ids for all definitions in package
    defn create-global-ids (pkg:VMPackage) -> [IntTable<Int>, IntTable<Int>] :
      val global-ids = IntTable<Int>()
      ;First record ids for imported and exported definitions
      for i in cat(imports(packageio(pkg)), exports(packageio(pkg))) do :
        val local-id = n(i)
        val global-id = match(rec(i)) :
          (r:ExternRec) : extern-id-table[lbl(r)]
          (r) : id-table[id(r)]
        global-ids[local-id] = global-id
      ;Then create ids for unexported definitions
      defn create-ids<?T> (entries: VMPackage -> Tuple<?T>, local-id: T -> Int, make-id: () -> Int) :
        for e in entries(pkg) do :
          if not key?(global-ids, local-id(e)) :
            val gid = make-id()
            global-ids[local-id(e)] = gid
      create-ids(globals, id, make-global-id)
      create-ids(classes, id, make-class-id)
      create-ids(funcs, id, make-fn-id)
      ;Then create ids for datas and consts
      for d in datas(pkg) do :
        val local-id = id(d)
        val global-id = intern(data-pool, data(d))
        global-ids[local-id] = global-id
      for c in consts(pkg) do :
        val local-id = id(c)
        val value* = map-id({global-ids[_]}, value(c))
        val global-id = id(id(intern(const-pool, value*)))
        global-ids[local-id] = global-id
      ;Then create ids for externs
      for e in externs(pkg) do :
        val local-id = id(e)
        val global-id = extern-id-table[name(e)]
        global-ids[local-id] = global-id
      ;Then create ids for extern-defns
      ;Keys are the function-ids of all extern functions
      ;Values are the extern index corresponding to their labels.
      val extern-defn-table = IntTable<Int>()
      for e in extern-defns(pkg) do :
        val local-id = fid(e)
        val global-id = extern-id-table[lbl(e)]
        extern-defn-table[local-id] = global-id
      ;Return ids
      [global-ids, extern-defn-table]

    ;Record package init
    defn record-package-init (pkg:VMPackage, global-ids:IntTable<Int>) :
      val init-id = match(init(pkg)) :
        (i:Int) : global-ids[i]
        (i:False) : false
      package-inits[name(pkg)] = init-id

    ;Make a LoadPackage from a VMPackage
    defn make-load-package (pkg:VMPackage, global-ids:IntTable<Int>) -> LoadPackage :
      defn gid (n:Int) : global-ids[n]
      defn resolve<?T> (e:VMItem&?T) : map-id(gid,vm-map(resolve,e))
      LoadPackage(
        name(pkg),
        map(resolve, globals(pkg)),
        map(resolve, methods(pkg)))

    ;Resolve all classes in the given package
    defn resolved-classes (pkg:VMPackage, global-ids:IntTable<Int>) :
      for c in classes(pkg) seq : map-id({global-ids[_]}, c)

    ;Resolve a single func
    defn resolved-defn (func:VMDefn,
                        global-ids:IntTable<Int>,
                        extern-defn-ids:IntTable<Int>) :
      defn gid (n:Int) : global-ids[n]
      defn resolve-ids (x:VMItem) :
        match(x) :
          (x:ExternDefnId) : ExternId(extern-defn-ids[id(x)])
          (x:ExternId) :
            val x* = map-id(gid, vm-map(resolve-ids, x))
            println("RESOLVED %_ to %_" % [x, x*])
            x*
          (x) : map-id(gid, vm-map(resolve-ids, x))
      resolve-ids(/func(func))
      new VMDefn :
        defmethod id (this) : gid(id(func))
        defmethod dependencies (this) : map(gid, dependencies(func))
        defmethod func (this) : resolve-ids(/func(func)) as VMFunction

    ;Resolve all funcs from packages
    defn resolved-defns (pkg:VMPackage, global-ids:IntTable<Int>, extern-defn-ids:IntTable<Int>) :
      for f in funcs(pkg) seq :
        resolved-defn(f, global-ids, extern-defn-ids)

    ;Resolve all Callbacks for extern defns
    defn resolved-callbacks (pkg:VMPackage, global-ids:IntTable<Int>) :
      for e in extern-defns(pkg) seq :
        val fid = global-ids[fid(e)]
        val callback-index = callback-index-table[lbl(e)]
        Callback(callback-index, fid)        

    ;Record class dependencies
    defn record-dependencies (iotable:IOTable, global-ids:IntTable<Int>, classes:Tuple<VMClass>) :
      for c in filter-by<VMArrayClass|VMLeafClass>(classes) do :
        val ds = map({iotable[_]}, dependencies(c))
        val global-id = global-ids[id(c)]
        class-dependencies[global-id] = ds
        
    ;Record function dependencies
    defn record-dependencies (iotable:IOTable, global-ids:IntTable<Int>, funcs:Tuple<VMDefn>) :
      for f in funcs do :
        val ds = map({iotable[_]}, dependencies(f))
        val global-id = global-ids[id(f)]
        function-dependencies[global-id] = ds       

    ;Construct new datas
    defn form-new-datas (pool:DataPool, num-existing-datas:Int) :
      val datas = datas(pool)
      to-tuple $ for i in num-existing-datas to length(datas) seq :
        VMData(i, datas[i])

    ;Construct new consts
    defn form-new-consts (pool:ConstantPool, num-existing-consts:Int) :
      val values = consts(pool)
      to-tuple $ for i in num-existing-consts to length(values) seq :
        VMConst(i, values[i])        

    ;Launch
    driver()

  ;Return datastructure
  new LoadedIds :
    defmethod package-init (this, pkg:Symbol) :
      package-inits[pkg]
    defmethod type-id (this, global-id:Int) :
      class-ids[global-id]
    defmethod function-dependencies (this, f:Int) :
      function-dependencies[f]
    defmethod class-dependencies (this, c:Int) :
      class-dependencies[c]
    defmethod load-packages (this, pkgs:Collection<VMPackage>) :
      load-packages(pkgs)

;<doc>=======================================================
;===================== LoadUnit =============================
;============================================================

Represents a group of packages ready to be loaded into the VM.

# For each package #

  name: Symbol
  globals: Tuple<VMGlobal>
  methods: Tuple<VMMethod>

These definitions must be grouped by package because old definitions
must be removed in order to preserve semantics. Old globals must be
removed so that they are not considered live. Old methods must be
removed so that we do not consider them during method dispatch.

# For each extern defn #

  index: Int
  function-id: Int

The index field refers to the extern defn slot. The generated stub
will call the VM with that index. The VM will then lookup the extern
defn table at the given slot to find the function-id.

# For the unit #

  packages: Tuple<LoadPackage>
  datas: Tuple<VMData>
  consts: Tuple<VMConst>
  classes: Tuple<VMClass>
  funcs: Tuple<VMDefn>
  callbacks: Tuple<Callback>

All datas and consts are interned. The new datas and consts necessary
for this LoadUnit are included here.

All newly defined classes are listed.

All newly defined functions are listed.

All newly defined extern defn callbacks are listed here.

Within each function:
  ExternId will refer to the index of the address of the extern.
  ExternDefnId will be removed and replaced with ExternId. 

;============================================================
;=======================================================<doc>

public defstruct LoadUnit :
  packages: Tuple<LoadPackage>
  datas: Tuple<VMData>
  consts: Tuple<VMConst>
  classes: Tuple<VMClass>
  funcs: Tuple<VMDefn>
  callbacks: Tuple<Callback>

public defstruct LoadPackage :
  name: Symbol
  globals: Tuple<VMGlobal>
  methods: Tuple<VMMethod>

public defstruct Callback :
  index: Int
  function-id: Int