defpackage stz/loaded-ids :
  import core
  import collections
  import stz/dl-ir
  import stz/el-ir
  import stz/vm-ir

;============================================================
;====================== Global Ids ==========================
;============================================================

public deftype LoadedIds
public defmulti make-id (ids:LoadedIds, rec:Rec) -> VMId
public defmulti init (ids:LoadedIds, package:Symbol) -> CodeId
public defmulti dependencies (ids:LoadedIds, vmid:VMId) -> Tuple<Rec>
public defmulti package-ids (ids:LoadedIds, packageio:PackageIO, epackage:EPackage) -> PackageIds

public deftype PackageIds
public defmulti init (ids:PackageIds) -> CodeId
public defmulti get (ids:PackageIds, n:Int) -> VMId
public defmulti set-dependencies (ids:PackageIds, id:Int, dependencies:Tuple<Int>) -> False

;defmulti get (ids:LoadedIds, id:RecId) -> VMId
;defmulti set-dependencies (ids:LoadedIds, id:VMId, ids:Tuple<VMId>) -> False
;defmulti make-fn-id (ids:LoadedIds) -> CodeId
;defmulti make-extern-id (ids:LoadedIds) -> ExternId
;defmulti make-global-id (ids:LoadedIds) -> GlobalId
;defmulti make-data-id (ids:LoadedIds) -> DataId
;defmulti make-const-id (ids:LoadedIds) -> ConstId
;defmulti make-class-id (ids:LoadedIds) -> ClassId

public defn LoadedIds () :
  ;Tables
  val rec-table = HashTable<VMId,Rec>()
  val id-table = HashTable<RecId,VMId>()
  val init-table = HashTable<Symbol,CodeId>()

  ;Counters
  val fn-counter = to-seq(0 to false)
  val extern-counter = to-seq(0 to false)
  val global-counter = to-seq(0 to false)
  val data-counter = to-seq(0 to false)
  val const-counter = to-seq(0 to false)
  val class-counter = to-seq(0 to false)
  defn make-fn-id () : CodeId(next(fn-counter))
  defn make-extern-id () : ExternId(next(extern-counter))
  defn make-global-id () : GlobalId(next(global-counter))
  defn make-data-id () : DataId(next(data-counter))
  defn make-const-id () : ConstId(next(const-counter))
  defn make-class-id () : ClassId(next(class-counter))  

  defn get-id (id:RecId|Symbol) :
    if key?(table, id) :
      table[id]
    else :
      val n = match(id) :
        (id:TypeId) : next(type-counter)
        (id:FnId) : next(fn-counter)
        (id:Symbol) : next(fn-counter)
      table[id] = n
      n

  ;Return LoadedIds datastructure
  new LoadedIds :
    defmethod make-id (this, rec:Rec) :
      if not key?(id-table, id(rec)) :
        val vmid = match(rec) :
          (r:FnRec) : make-fn-id()
          (r:TypeRec) : make-class-id()
        rec-table[vmid] = rec
        id-table[id(rec)] = vmid
      id-table[id(rec)]
      
    defmethod init (this, package:Symbol) :
      if not key?(init-table, package) :
        init-table[package] = make-fn-id()
      init-table[package]

    defmethod dependencies (this, vmid:VMId) :
      fatal("Calculate dependencies")

    defmethod package-ids (this, packageio:PackageIO, epackage:EPackage) :
      make-package-ids(packageio, epackage)

;============================================================
;======================= Package Ids ========================
;============================================================

public deftype LoadedPackageIds
public defmulti get (ids:LoadedPackageIds, n:Int) -> Int
public defmulti init (ids:LoadedPackageIds) -> Int

public defn LoadedPackageIds (ids:LoadedIds, packageio:PackageIO, epackage:EPackage) :
  val table = IntTable<Int>()
  for e in exports(packageio) do :
    table[n(e)] = ids[id(rec(e))]
  for i in imports(packageio) do :
    table[n(i)] = ids[id(rec(i))]
  for e in exps(epackage) do :
    defn set-id (n:Int, f:LoadedIds -> Int) :
      if not key?(table,n) :
        table[n] = f(ids)
    match(e) :
      (e:EDefn) : set-id(n(e), next-fn-id)
      (e:EDef) : set-id(n(e), next-global-id)
      (e:EDefType) : set-id(n(e), next-type-id)
      (e) : false
  new LoadedPackageIds :
    defmethod get (this, n:Int) : table[n]
    defmethod init (this) : init(ids, name(epackage))
    defmethod print (o:OutputStream, this) :
      print(o, "ids for package %_ :" % [name(epackage)])
      for e in table do :
        print(o, "  %_" % [e])