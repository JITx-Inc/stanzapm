defpackage stz/loaded-ids :
  import core
  import collections
  import stz/dl-ir
  import stz/el-ir

;============================================================
;====================== Global Ids ==========================
;============================================================

public deftype LoadedIds
public defmulti get (ids:LoadedIds, id:RecId) -> Int
public defmulti next-fn-id (ids:LoadedIds) -> Int
public defmulti next-type-id (ids:LoadedIds) -> Int
public defmulti next-global-id (ids:LoadedIds) -> Int

public defn LoadedIds () :
  val table = HashTable<RecId,Int>()
  val type-counter = to-seq(0 to false)
  val fn-counter = to-seq(0 to false)
  val global-counter = to-seq(0 to false)
  new LoadedIds :
    defmethod get (this, id:RecId) :
      if key?(table, id) :
        table[id]
      else :
        val n = match(id) :
          (id:TypeId) : next(type-counter)
          (id:FnId) : next(fn-counter)
        table[id] = n
        n
    defmethod next-fn-id (this) :
      next(fn-counter)
    defmethod next-type-id (this) :
      next(type-counter)
    defmethod next-global-id (this) :
      next(global-counter)

defstruct InitId <: RecId : (package: Symbol)
defmethod hash (x:InitId) : hash(package(x))
defmethod equal? (x:InitId, y:InitId) : package(x) == package(y)

;============================================================
;======================= Package Ids ========================
;============================================================

public deftype LoadedPackageIds
public defmulti get (ids:LoadedPackageIds, n:Int) -> Int
public defmulti init (ids:LoadedPackageIds) -> Int

public defn LoadedPackageIds (ids:LoadedIds, packageio:PackageIO, epackage:EPackage) :
  val table = IntTable<Int>()
  for e in exports(packageio) do :
    table[n(e)] = ids[id(rec(e))]
  for i in imports(packageio) do :
    table[n(i)] = ids[id(rec(i))]
  for e in exps(epackage) do :
    defn set-id (n:Int, f:LoadedIds -> Int) :
      if not key?(table,n) :
        table[n] = f(ids)
    match(e) :
      (e:EDefn) : set-id(n(e), next-fn-id)
      (e:EDef) : set-id(n(e), next-global-id)
      (e:EDefType) : set-id(n(e), next-type-id)
      (e) : false
  new LoadedPackageIds :
    defmethod get (this, n:Int) : table[n]
    defmethod init (this) : table[InitId(name(epackage))]
    defmethod print (o:OutputStream, this) :
      print(o, "ids for package %_ :" % [name(epackage)])
      for e in table do :
        print(o, "  %_" % [e])