defpackage stz/loaded-ids :
  import core
  import collections
  import stz/dl-ir
  import stz/vm-ir

;============================================================
;====================== Global Ids ==========================
;============================================================

public deftype LoadedIds
public defmulti make-package-ids (ids:LoadedIds, vmps:Collection<VMPackage>) -> False
public defmulti package-ids (ids:LoadedIds, vmpackage:VMPackage) -> PackageIds
public defmulti function-dependencies (ids:LoadedIds, function:Int) -> Tuple<Rec>
public defmulti class-dependencies (ids:LoadedIds, class:Int) -> Tuple<Rec>
public defmulti get (ids:LoadedIds, id:RecId) -> Int

public deftype PackageIds
public defmulti get (ids:PackageIds, n:Int) -> Int
public defmulti set-function-dependencies (ids:PackageIds, n:Int, ds:Tuple<Int>) -> False
public defmulti set-class-dependencies (ids:PackageIds, n:Int, ds:Tuple<Int>) -> False
public defmulti consts (ids:PackageIds) -> Vector<VMConst>

public defn LoadedIds () :
  ;Tables
  val id-table = HashTable<RecId,Int>()
  val function-dependencies = IntTable<Tuple<Rec>>()
  val class-dependencies = IntTable<Tuple<Rec>>()
  val constant-pool = HashTable<?,Int>()

  ;Counters
  val fn-counter = to-seq(0 to false)
  val extern-counter = to-seq(0 to false)
  val global-counter = to-seq(0 to false)
  val data-counter = to-seq(0 to false)
  val class-counter = to-seq(NUM-BUILTIN-TYPES to false)
  defn make-fn-id () : next(fn-counter)
  defn make-extern-id () : next(extern-counter)
  defn make-global-id () : next(global-counter)
  defn make-data-id () : next(data-counter)
  defn make-class-id () : next(class-counter)

  ;Make global id
  defn make-id (r:Rec) :
    if not key?(id-table, id(r)) :
      val f = match(r) :
        (r:ValRec) : make-global-id
        (r:FnRec) : make-fn-id
        (r:MultiRec) : make-fn-id
        (r:ExternRec) : make-extern-id
        (r:StructRec) : make-class-id
        (r:TypeRec) : make-class-id
        (r:ExternFnRec) : fatal("Not yet implemented")
      id-table[id(r)] = f()
    id-table[id(r)]

  ;Populate built-in IDs
  for (name in [`False, `True, `Byte, `Char, `Int,
                `Float, `Stack, `Fn, `Type],
       i in [FALSE-TYPE, TRUE-TYPE, BYTE-TYPE,  CHAR-TYPE,  INT-TYPE,
             FLOAT-TYPE,  STACK-TYPE,  FN-TYPE,  TYPE-TYPE]) do :
    id-table[TypeId(`core, name)] = i

  ;Create PackageIds
  defn package-ids (vmp:VMPackage) :    
    ;Populate table with global ids
    val table = IntTable<Int>()
    val recs = IntTable<Rec>()
    for e in cat(imports(packageio(vmp)), exports(packageio(vmp))) do :
      table[n(e)] = id-table[id(rec(e))]
      recs[n(e)] = rec(e)

    ;Populate table with local ids
    defn make-local-ids<?T> (entries:VMPackage -> Seqable<?T>, n:T -> Int, id:() -> Int) :
      for e in entries(vmp) do :
        val n = n(e)
        if not key?(table, n) :
          table[n] = id()
    make-local-ids(globals, id, make-global-id)
    make-local-ids(datas, id, make-data-id)
    make-local-ids(classes, id, make-class-id)
    make-local-ids(funcs, id, make-fn-id)
    make-local-ids(externs, id, make-extern-id)

    ;Add consts to pool
    val package-consts = Vector<VMConst>()
    defn intern-const (v:VMValue) -> VMInternedConst :
      if key?(constant-pool, v) :
        VMInternedConst(ConstId(constant-pool[v]))
      else :        
        val v* = match(v) :
          (v:List) : map(intern-const, v)
          (v) : v
        val i = length(constant-pool)
        constant-pool[v] = i
        add(package-consts, VMConst(i, v*))
        VMInternedConst(ConstId(i))
    ;Add package constants
    for c in consts(vmp) do :
      ;First resolve any type objects or code objects
      val v* = map-id({table[_]}, value(c))
      ;Then intern the value
      val c* = intern-const(v*)
      ;Record the mapping
      table[id(c)] = id(id(c*))      
    
    ;Return Structure
    new PackageIds :
      defmethod get (this, n:Int) : table[n]
      defmethod consts (this) : package-consts
      defmethod set-function-dependencies (this, n:Int, ds:Tuple<Int>) :
        function-dependencies[table[n]] = map({recs[_]}, ds)
      defmethod set-class-dependencies (this, n:Int, ds:Tuple<Int>) :
        class-dependencies[table[n]] = map({recs[_]}, ds)

  ;Return LoadedIds datastructure
  new LoadedIds :
    defmethod package-ids (this, vmp:VMPackage) :
      package-ids(vmp)
    defmethod make-package-ids (this, vmps:Collection<VMPackage>) :
      for vmp in vmps do :
        for e in exports(packageio(vmp)) do :
          make-id(rec(e))
    defmethod function-dependencies (this, function:Int) :
      function-dependencies[function]
    defmethod class-dependencies (this, class:Int) :
      class-dependencies[class]
    defmethod get (this, id:RecId) :
      id-table[id]