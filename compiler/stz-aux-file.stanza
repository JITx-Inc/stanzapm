#use-added-syntax(stz-serializer-lang)
defpackage stz/aux-file :
  import core
  import collections
  import stz/serializer
  import stz/utils
  import stz/front-end
  import stz/proj-manager

;============================================================
;=================== Aux Serializer =========================
;============================================================

public defn write-aux-file (name:String, auxfile:AuxFile) :
  val f = FileOutputStream(name)
  try : serialize(f, auxfile)
  finally : close(f)

public defn read-aux-file (name:String) -> AuxFile :
  val f = FileInputStream(name)
  try : deserialize-auxfile(f)
  finally : close(f)

public defn read-aux-file? (name:String) -> AuxFile :
  read-aux-file(name) when file-exists?(name) else AuxFile([])

;============================================================
;===================== Aux File Structure ===================
;============================================================

public defstruct AuxFile :
  records: Tuple<AuxRecord>

public deftype AuxRecord

public defstruct PkgRecord <: AuxRecord & Hashable & Equalable :
  package: Symbol
  filestamp: FileStamp
  source-stamp: FileStamp
  flags: Tuple<Symbol>
  optimize?: True|False
with:
  constructor => #PkgRecord

public defstruct BuildRecord <: AuxRecord :
  target: Symbol
  packages: Tuple<PackageStamp>
  files: Tuple<FileStamp>

;------------------------------------------------------------
;---------------- Canonical Constructor ---------------------
;------------------------------------------------------------

public defn PkgRecord (package:Symbol,
                       filestamp:FileStamp,
                       source-stamp:FileStamp,
                       flags:Tuple<Symbol>,
                       optimize?:True|False) :
  #PkgRecord(package, filestamp, source-stamp,
             qsort(flags), optimize?)

;------------------------------------------------------------
;------------------ Hashing and Equality --------------------
;------------------------------------------------------------

defn key (r:PkgRecord) :
  [package(r), filestamp(r), source-stamp(r), flags(r), optimize?(r)]

defmethod equal? (a:PkgRecord, b:PkgRecord) : key(a) == key(b)
defmethod hash (r:PkgRecord) : hash $ key(r)

;============================================================
;======================== Printer ===========================
;============================================================

defmethod print (o:OutputStream, f:AuxFile) :
  print(o, "auxfile :")
  val o2 = IndentedStream(o)
  do(lnprint{o2, _}, records(f))

defmethod print (o:OutputStream, r:PkgRecord) :
  print(o, "package %~ at %%_ defined-in %_ with flags (%@) using optimize %_" % [
    package(r), filestamp(r), source-stamp(r), flags(r), optimize?(r)])

;============================================================
;================== Adding New Records ======================
;============================================================

public defn add (file:AuxFile, records:Seqable<AuxRecord>) :
  val pkg-records = HashTable<String,PkgRecord>()
  val build-records = HashTable<Symbol,BuildRecord>()
  for r in cat(/records(file), records) do :
    match(r) :
      (r:PkgRecord) :
        pkg-records[filename(filestamp(r))] = r
      (r:BuildRecord) :
        build-records[target(r)] = r
  val records* = to-tuple $ cat(
    values(pkg-records),
    values(build-records))
  AuxFile(records*)

;============================================================
;================= Serializer Definition ====================
;============================================================

defserializer (out:FileOutputStream, in:FileInputStream) :

  ;----------------------------------------------------------
  ;--------------------- Records ----------------------------
  ;----------------------------------------------------------
  defunion auxfile (AuxFile) :
    AuxFile: (records:tuple(auxrecord))

  defunion auxrecord (AuxRecord) :
    PkgRecord: (package:symbol, filestamp:filestamp, source-stamp:filestamp,
                flags:tuple(symbol), optimize?:bool)
    BuildRecord: (target:symbol, packages:tuple(pkgstamp), files:tuple(filestamp))            

  defunion pkgstamp (PackageStamp) :
    PackageStamp: (location:pkglocation, source-timestamp:opt<Long>(long), pkg-timestamp:opt<Long>(long))

  defunion pkglocation (PkgLocation) :
    PkgLocation: (package:symbol, source-file:opt<String>(string), pkg-file:opt<String>(string), read-pkg?:bool) 

  defunion filestamp (FileStamp) :
    FileStamp: (filename:string, timestamp:long)

  ;----------------------------------------------------------
  ;-------------------- Combinators -------------------------
  ;----------------------------------------------------------
  
  reader defn read-tuple<?T> (f: () -> ?T) :
    val n = read-int()
    to-tuple(repeatedly(f, n))

  writer defn write-tuple<?T> (f: T -> False, xs:Tuple<?T>) :
    write-int(length(xs))
    do(f, xs)

  reader defn read-opt<T> (f: () -> T) :
    val n = read-byte()
    f() when n == 1Y

  writer defn write-opt<T> (f: T -> False, x:T|False) :
    match(x) :
      (x:False) :
        write-byte(0Y)
      (x:T) :
        write-byte(1Y)
        f(x)

  ;----------------------------------------------------------
  ;----------------------- Atoms ----------------------------
  ;----------------------------------------------------------
  defatom bool (x:True|False) :
    writer :
      match(x) :
        (x:True) : put(out, 1Y)
        (x:False) : put(out, 0Y)
    reader :
      switch(get-byte(in)) :
        1Y : true
        0Y : false
        else : throw(DeserializeException())

  defatom byte (x:Byte) :
    writer :
      put(out, x)
    reader :
      match(get-byte(in)) :
        (x:Byte) : x
        (x:False) : throw(DeserializeException())
  
  defatom int (x:Int) :
    writer :
      put(out, x)
    reader :
      match(get-int(in)) :
        (x:Int) : x
        (x:False) : throw(DeserializeException())

  defatom long (x:Long) :
    writer :
      put(out, x)
    reader :
      match(get-long(in)) :
        (x:Long) : x
        (x:False) : throw(DeserializeException())

  defatom string (x:String) :
    writer :
      write-int(length(x))
      print(out, x)
    reader :
      val n = read-int()
      String(repeatedly(read-char, n))

  defatom symbol (x:Symbol) :
    writer :
      write-string(to-string(x))
    reader :
      to-symbol(read-string())

  defatom char (x:Char) :
    writer :
      print(out, x)
    reader :
      match(get-char(in)) :
        (x:Char) : x
        (x:False) : throw(DeserializeException())