defpackage stz/tenv :
  import core
  import collections
  import stz/tl-ir

;============================================================
;================ Type Environment Definition ===============
;============================================================

public defstruct TypeDefs :
  package: Symbol
  imported-packages: Tuple<Symbol>
  defs: Tuple<TypeDef>

public deftype TypeDef :
  TLDefType <: TypeDef
  TDefType <: TypeDef  
public defstruct TDecl <: TypeDef :
  n: Int
  type: Type
public defstruct TLDecl <: TypeDef :
  n: Int
  type: LSType

;============================================================
;============================================================
;============================================================

;          (c:Export) :            
;            val n = coreid(id(rec(c)) as TypeId)
;            match(rec(c)) :
;              (r:TypeRec|TypeDecl) :
;                val args = to-list(0 to ntargs(r))
;                HSHEntry(n, args, parents[n])
;              (r:StructRec) :                
;                ;Convert fields
;                defn to-field (Type:LSType -> LSType, f:StructField) :
;                  val type = Type(to-lstype(type(f), TVars(ntargs(r))))
;                  Field(fresh-id(), name(f), type)
;                val fs = Vector<Field>()                
;                for f in base(r) do : add(fs, to-field({_}, f))
;                val rf = items(r)
;                match(rf:StructField) :
;                  add(fs, to-field(RestT, rf))
;                ;Create entry                
;                val args = to-list(0 to ntargs(r))
;                LSHEntry(n, args, parents[n], to-list(fs))