defpackage stz/dependencies :
  import core
  import collections
  import stz/compiler
  import stz/front-end
  import stz/il-ir
  import stz/pkg
  import stz/dl-ir
  import stz/algorithms
  import stz/proj-manager
  
public defn analyze-dependencies (settings:BuildSettings, ignore-cache?:True|False, output:String|False) :
  defn driver () :
    val dep-result = dependencies(settings, ignore-cache?)
    val dependencies = scan-dependencies(packages(dep-result))
    val source-files = SourceFiles $
      for stamp in pkgstamps(dep-result) seq :
        val l = location(stamp)
        package(l) => filename(l)
    match(output:String) :
      spit(output, "%_\n%_" % [dependencies, source-files])
    else :
      println(dependencies)
      println(source-files)
    
  defn scan-dependencies (ps:Seqable<IPackage|Pkg>) :
    ;Compute the package dependency graph
    val dependency-graph = to-hashtable<Symbol,List<Symbol>> $
      for p in ps seq :
        val imported-packages = match(p) :
          (p:IPackage) : unique(seq(package, imports(p)))
          (p:Pkg) : to-list(imported-packages(packageio(p)))
        name(p) => imported-packages
    ;Component graph
    defn list? (x:List<Symbol>|Symbol) :
      match(x:Symbol) : List(x)
      else : x as List<Symbol>
    val components = to-tuple(seq(list?,strong-components(dependency-graph)))
    ;Component table    
    val component-table = HashTable<Symbol,Int>()
    for (component in components, i in 0 to false) do :
      for p in component do : component-table[p] = i
    ;Component imports
    defn component-dependencies (c:Int) -> List<Symbol> :
      val cs = unique $ for p in components[c] seq-cat :
        for d in dependency-graph[p] seq :
          component-table[d]
      for d in cs seq-append :
        List() when d == c else components[d]
    val component-dependencies-list = to-tuple $
      for i in 0 to length(components) seq :
        components[i] => component-dependencies(i)
    ;Return Dependencies structure
    Dependencies(to-tuple(dependency-graph), component-dependencies-list)

  ;Launch
  driver()

;============================================================
;======================= Datastructures =====================
;============================================================

defstruct Dependencies :
  package-dependencies: Tuple<KeyValue<Symbol,List<Symbol>>>
  component-dependencies: Tuple<KeyValue<List<Symbol>,List<Symbol>>>

defmethod print (o:OutputStream, d:Dependencies) :
  defn empty-paren? (xs:Tuple) : " ()" when empty?(xs) else ""
  val o2 = IndentedStream(o)
  print(o, "package dependencies:%_" % [empty-paren?(package-dependencies(d))])
  for entry in package-dependencies(d) do :
    print(o2, "\n%~ imports %~" % [key(entry), value(entry)])
  print(o, "\npackage group dependencies:%_" % [empty-paren?(component-dependencies(d))])
  for entry in component-dependencies(d) do :
    print(o2, "\n%~ imports %~" % [key(entry), value(entry)])

defstruct SourceFiles :
  entries: Tuple<KeyValue<Symbol,String>>
with:
  constructor => #SourceFiles

defn SourceFiles (entries:Seqable<KeyValue<Symbol,String>>) :
  #SourceFiles(to-tuple(entries))

defmethod print (o:OutputStream, sf:SourceFiles) :
  defn empty-paren? (xs:Tuple) : " ()" when empty?(xs) else ""
  val o2 = IndentedStream(o)
  print(o, "source files:%_" % [empty-paren?(entries(sf))])
  for e in entries(sf) do :
    print(o2, "\n%~ loaded-from %~" % [key(e), value(e)])