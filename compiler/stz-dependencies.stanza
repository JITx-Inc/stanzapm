defpackage stz/dependencies :
  import core
  import collections
  import reader
  import stz/il-ir
  import stz/input
  import stz/pkg
  import stz/core-macros
  import stz/renamer
  import stz/resolver
  import stz/dl-ir
  import stz/algorithms
  
public defn analyze-dependencies (inputs:Collection<String>,
                                  optimize?:True|False,
                                  output:String|False) :
  defn driver () :
    val pkgloader = PkgLoader(optimize?)
    val [ipackages, input-packages, source-file-table] = read-inputs(pkgloader)
    val all-pkgs = resolve(to-tuple(ipackages), pkgloader)
    val dependencies = scan-dependencies(all-pkgs)
    val source-files = SourceFiles $ for p in all-pkgs seq :
      match(p) :
        (p:IPackage) : name(p) => source-file-table[name(p)]
        (p:Pkg) : name(p) => source-file(pkgloader, name(p))
    match(output:String) :
      spit(output , "%_\n%_" % [dependencies, source-files])
    else :
      println(dependencies)
      println(source-files)

  defn read-inputs (pkgloader:PkgLoader) ->
                   [Vector<IPackage>,
                    Vector<Symbol>,
                    Table<Symbol,String>] :
    ;Read in all inputs
    val input-packages = Vector<Symbol>()
    val ipackages = Vector<IPackage>()
    val source-files = HashTable<Symbol,String>()

    ;For each input
    for input in inputs do :
      switch(category(input)) :
        `package :
          val pkg = load-pkg(pkgloader, to-symbol(input))
          add(input-packages, name(pkg))
        `stanza-file :
          val ipkgs = read-ipackages(input)
          add-all(input-packages, seq(name,ipkgs))
          add-all(ipackages, ipkgs)
          for pkg in ipkgs do :
            source-files[name(pkg)] = input
        `pkg-file :
          val pkg = load-pkg(pkgloader, input)
          add(input-packages, name(pkg))
    ensure-no-duplicate-packages!(input-packages)

    ;Return inputs
    [ipackages, input-packages, source-files]

  defn category (name:String) -> Symbol :
    defn has-extension? (s:String) :
      index-of-char(s, '.') is Int
    if not has-extension?(name) :
      `package
    else :
      switch suffix?{name, _} :
        ".stanza" : `stanza-file
        ".pkg" : `pkg-file
        ".fpkg" : `pkg-file
        else : throw(InvalidExtensionError(name))  

  defn read-ipackages (filename:String) -> Tuple<IPackage> :
    ;Lex the file into s-expressions
    val forms = read-file(filename)
    ;Expand macros
    val expanded = cons(`$begin, parse-syntax[core / #exps!](forms))
    ;Convert to IPackage using standard imports
    val core-imports = [IImport(`core), IImport(`collections)]
    to-ipackages(expanded, core-imports)

  defn resolve (ipackages:Tuple<IPackage>, pkgloader:PkgLoader) -> Tuple<IPackage|Pkg> :
    ;First rename the binders
    val renamed = match(rename-il(ipackages)) :
      (renamed:Tuple<IPackage>) : renamed
      (e:RenameErrors) : throw(e)

    ;Create resolution environment
    val env = new stz/resolver/Env :
      defmethod stz/resolver/exports (this, name:Symbol) :
        try :
          val pkg = load-pkg(pkgloader, name)
          to-package-exports(packageio(pkg))
        catch (e:NoPackageException) :
          false
          
    ;Resolve binders
    val resolved = match(resolve-il(renamed, env, false)) :
      (e:ResolveErrors) : throw(e)
      (e:Tuple<IPackage>) : e

    ;Load all packages and dependencies
    val all-pkgs = all-pkgs-and-dependencies(pkgloader, already-loaded) where :
      val already-loaded = seq(name, ipackages)

    ;Return resolved ipackages along with loaded .pkg files.
    to-tuple(cat(resolved, all-pkgs))
    
  defn scan-dependencies (ps:Seqable<IPackage|Pkg>) :
    ;Compute the package dependency graph
    val dependency-graph = to-hashtable<Symbol,List<Symbol>> $
      for p in ps seq :
        val imported-packages = match(p) :
          (p:IPackage) : unique(seq(package, imports(p)))
          (p:Pkg) : to-list(imported-packages(packageio(p)))
        name(p) => imported-packages
    ;Component graph
    defn list? (x:List<Symbol>|Symbol) :
      match(x:Symbol) : List(x)
      else : x as List<Symbol>
    val components = to-tuple(seq(list?,strong-components(dependency-graph)))
    ;Component table    
    val component-table = HashTable<Symbol,Int>()
    for (component in components, i in 0 to false) do :
      for p in component do : component-table[p] = i
    ;Component imports
    defn component-dependencies (c:Int) -> List<Symbol> :
      val cs = unique $ for p in components[c] seq-cat :
        for d in dependency-graph[p] seq :
          component-table[d]
      for d in cs seq-append :
        List() when d == c else components[d]
    val component-dependencies-list = to-tuple $
      for i in 0 to length(components) seq :
        components[i] => component-dependencies(i)
    ;Return Dependencies structure
    Dependencies(to-tuple(dependency-graph), component-dependencies-list)

  defn ensure-no-duplicate-packages! (packages:Seqable<Symbol>) :
    val pset = HashSet<Symbol>()
    for p in packages do :
      if not add(pset,p) :
        throw(DuplicatePackage(p))

  ;Launch
  driver()

;============================================================
;======================= Datastructures =====================
;============================================================

defstruct Dependencies :
  package-dependencies: Tuple<KeyValue<Symbol,List<Symbol>>>
  component-dependencies: Tuple<KeyValue<List<Symbol>,List<Symbol>>>

defmethod print (o:OutputStream, d:Dependencies) :
  defn empty-paren? (xs:Tuple) : " ()" when empty?(xs) else ""
  val o2 = IndentedStream(o)
  print(o, "package dependencies:%_" % [empty-paren?(package-dependencies(d))])
  for entry in package-dependencies(d) do :
    print(o2, "\n%~ imports %~" % [key(entry), value(entry)])
  print(o, "\npackage group dependencies:%_" % [empty-paren?(component-dependencies(d))])
  for entry in component-dependencies(d) do :
    print(o2, "\n%~ imports %~" % [key(entry), value(entry)])

defstruct SourceFiles :
  entries: Tuple<KeyValue<Symbol,String>>
with:
  constructor => #SourceFiles

defn SourceFiles (entries:Seqable<KeyValue<Symbol,String>>) :
  #SourceFiles(to-tuple(entries))

defmethod print (o:OutputStream, sf:SourceFiles) :
  defn empty-paren? (xs:Tuple) : " ()" when empty?(xs) else ""
  val o2 = IndentedStream(o)
  print(o, "source files:%_" % [empty-paren?(entries(sf))])
  for e in entries(sf) do :
    print(o2, "\n%~ loaded-from %~" % [key(e), value(e)])  

;============================================================
;===================== Errors ===============================
;============================================================

defn InvalidExtensionError (filename:String) :
  new Exception :
    defmethod print (o:OutputStream, this) :
      print(o, "File %_ does not have a valid Stanza file extension." % [filename])

defn DuplicatePackage (name:Symbol) :
  Exception("The package %~ is loaded multiple times." % [name])