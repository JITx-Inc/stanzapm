defpackage stz/el :
  import core
  import collections
  import stz/dl-ir
  import stz/el-ir
  import stz/ids
  import stz/built-ins with:
    prefix => VM-

;============================================================
;========================= Lowering =========================
;============================================================

public defn lower (packageio:PackageIO, epackage:EPackage) :
  println("===== PACKAGE IO =====")
  println(packageio)
  println("===== EPACKAGE =====")
  println(epackage)

  var cur-package:EPackage = epackage
  defn report (name:String) :
    println("===== %_ =====" % [name])
    println(cur-package)
  
  cur-package = map-methods(cur-package)
  report("Mapped Methods")

  ;val type-table = TypeTable(packageio)
  ;val function-table = FunctionTable(type-table, packageio, cur-package)
  ;cur-package = create-closures(function-table, cur-package)
  ;report("Created Closures")
  ;
  ;cur-package = convert-mixes(function-table, cur-package)
  ;report("Converted Mixes")
  ;
  ;val var-table = VarTable(type-table, packageio, cur-package)
  ;cur-package = insert-guards(var-table, cur-package)
  ;report("Inserted Guards")
  ;
  ;cur-package = box-mutables(VarTable(type-table, packageio, cur-package), cur-package)
  ;report("Boxed Mutables")

;============================================================
;================== Consistency Check =======================
;============================================================

;============================================================
;================== Method TArg Mapping =====================
;============================================================

defn inverse-solve (input-xs:Tuple<Int>, targs:Tuple<EType>) -> [Tuple<Int>, Tuple<EType>] :
  ;Created targs
  val ys = map(fresh-id{}, targs)
  ;Initialize solved table
  val solved = IntTable<ETVar>()
  ;Precise Solutions
  for (t in targs, y in ys) do :
    match(t:ETVar) : set?(solved, n(t), ETVar{y})
  ;Approximate Solutions
  for (t in targs, y in ys) do :
    let loop (t:EType = t) :
      match(t) :
        (t:ETVar) : set?(solved, n(t), ETVar{y})
        (t:EOr) : dor(loop, t)
        (t) : false
  ;Return solutions
  val solns = map(get?{solved, _, ETop()}, input-xs)
  [ys, solns]

defn replace-tvars (f:EFn, xs:Tuple<Int>, ys:Tuple<EType>) :
  val table = to-inttable<EType>(xs,ys)
  defn loop (x:EType) :
    match(x) :
      (x:ETVar) : get?(table, n(x), ETop())
      (x) : mapr(loop, x)
  mapr(loop, f)

defn map-methods (e:EPackage) :
  defn loop (x:ELBigItem) :
    mapr{loop, _} $ match(x) :      
      (m:EDefmethod) :
        val [targs*, tvals] = inverse-solve(targs(func(m)), targs(m))
        val func* = sub-targs(replace-tvars(func(m), targs(func(m)), tvals), targs*)
        EDefmethod(n(m), multi(m), [], func*, lostanza?(m))
      (m:EMethod) :
        val [targs*, tvals] = inverse-solve(targs(func(m)), targs(m))
        val func* = sub-targs(replace-tvars(func(m), targs(func(m)), tvals), targs*)
        EMethod(multi(m), [], thisn(m), func*)
      (x) :
        x
  mapr(loop, e)

;============================================================
;====================== Type Table ==========================
;============================================================

deftype TypeTable
defmulti to-etype (t:TypeTable, d:DType, targs:Tuple<EType>) -> EType

defn TypeTable (io:PackageIO) :
  val type-ids = HashTable<TypeId,Int>()
  for e in cat(imports(io), exports(io)) do :
    match(rec(e):TypeRec|StructRec) :
      type-ids[id(rec(e)) as TypeId] = n(e)
  defn to-etype (d:DType, targs:Tuple<EType>) :
    defn conv (f:False) : false
    defn conv (ds:Tuple<DType>) : map(conv, ds)
    defn conv (d:DType) :
      match(d) :
        (d:DByte) : EByte()
        (d:DInt) : EInt()
        (d:DLong) : ELong()
        (d:DFloat) : EFloat()
        (d:DDouble) : EDouble()
        (d:DUnknown) : EUnknown()
        (d:DPtrT) : EPtrT(conv(type(d)))
        (d:DFnT) : EFnT(conv(a(d)), conv(r(d)), conv(b(d)))
        (d:DStructT) : EStructT(type-ids[id(d)])
        (d:DOf) : EOf(type-ids[id(d)])
        (d:DTVar) : targs[index(d)]
        (d:DAnd) : reduce(EAnd, seq(conv, types(d)))
        (d:DOr) : reduce(EOr, seq(conv, types(d)))
        (d:DTop) : ETop()
        (d:DBot) : EBot()
    conv(d)
         
  new TypeTable :
    defmethod to-etype (this, d:DType, targs:Tuple<EType>) :
      to-etype(d, targs)

;============================================================
;==================== Function Table ========================
;============================================================

deftype FnEntry
defstruct EFnEntry <: FnEntry :
  targs: Tuple<Int>
  a1: Tuple<EType>
  a2: EType
defstruct DFnEntry <: FnEntry :
  ntargs: Int
  a1: Tuple<DType>
  a2: DType
defstruct EMultifnEntry <: FnEntry :
  funcs: Tuple<EFnEntry>

deftype FunctionTable
defmulti register (t:FunctionTable, e:ELocalFn) -> False
defmulti function? (t:FunctionTable, n:Int) -> True|False
defmulti arity (t:FunctionTable, n:Int) -> Int
defmulti fn-types (t:FunctionTable, f:EFVar) -> [Tuple<EType>, EType]

defn FunctionTable (type-table:TypeTable, io:PackageIO, ep:EPackage) :
  val entries = IntTable<FnEntry>()

  ;Create entry
  defn FnEntry (e:EFunction) :
    match(e) :
      (e:EFn) : EFnEntry(targs(e), a1(e), a2(e))
      (e:EMultifn) : EMultifnEntry(map({FnEntry(_) as EFnEntry}, funcs(e)))

  ;Initialize table using global definitions
  for import in imports(io) do :
    val r = rec(import)
    match(r:FnRec|MultiRec) :
      val id = id(r) as FnId
      entries[n(import)] = DFnEntry(ntargs(id), a1(id), a2(r))
  for e in exps(ep) do :
    match(e) :
      (e:EDefn) :
        entries[n(e)] = FnEntry(func(e))
      (e:EDefmulti) :
        entries[n(e)] = EFnEntry(targs(e), a1(e), a2(e))
      (e) : false

  ;Retrieve the argument and return types of a function
  defn fn-types (f:EFVar) :
    match(entries[n(f)]) :
      (e:DFnEntry) :
        fatal("Incorrect type arity.") when ntargs(e) != length(targs(f))
        val a1* = for t in a1(e) map :
          to-etype(type-table, t, targs(f))
        val a2* = to-etype(type-table, a2(e), targs(f))
        [a1*, a2*]
      (e:EFnEntry) :
        fatal("Incorrect type arity.") when length(targs(e)) != length(targs(f))
        val table = to-inttable<EType>(targs(e), targs(f))
        val a1* = map(sub-tvars{_, table}, a1(e))
        val a2* = sub-tvars(a2(e), table)
        [a1*, a2*]

  new FunctionTable :
    defmethod register (this, e:ELocalFn) :
      entries[n(e)] = FnEntry(func(e))
    defmethod function? (this, n:Int) :
      key?(entries, n)
    defmethod arity (this, n:Int) :
      match(entries[n]) :
        (e:EFnEntry) : length(a1(e))
        (e:DFnEntry) : length(a1(e))
    defmethod fn-types (this, f:EFVar) :
      fn-types(f)

defn sub-tvars (t:EType, table:IntTable<EType>) :
  let loop (t:EType = t) :
    match(t:ETVar) : get?(table, n(t), t)
    else : mapr(loop, t) as EType

;============================================================
;===================== Variable Table =======================
;============================================================

defstruct VarEntry :
  mutable?: True|False
  global?: True|False
  type: EType

deftype VarTable
defmulti register (vt:VarTable, e:ELocal) -> False
defmulti variable? (vt:VarTable, n:Int) -> True|False
defmulti mutable? (vt:VarTable, n:Int) -> True|False
defmulti global? (vt:VarTable, n:Int) -> True|False
defmulti type (vt:VarTable, n:Int) -> EType

defn VarTable (type-table:TypeTable, io:PackageIO, ep:EPackage) :
  val entries = IntTable<VarEntry>()
  for import in imports(io) do :
    match(rec(import)) :
      (r:ValRec) :
        entries[n(import)] = VarEntry(mutable?(r), true, to-etype(type-table, type(r), []))
      (r:ExternRec) :
        entries[n(import)] = VarEntry(true, true, to-etype(type-table, type(r), []))
      (r) : false
  for e in exps(ep) do :
    match(e) :
      (e:EDef) :
        entries[n(e)] = VarEntry(mutable?(e), true, type(e))
      (e:EExtern) :
        entries[n(e)] = VarEntry(true, true, type(e))
      (e) : false
  new VarTable :
    defmethod register (this, e:ELocal) :
      entries[n(e)] = VarEntry(mutable?(e), false, type(e))
    defmethod variable? (this, n:Int) : key?(entries,n)
    defmethod mutable? (this, n:Int) : mutable?(entries[n])
    defmethod global? (this, n:Int) : global?(entries[n])
    defmethod type (this, n:Int) : type(entries[n])

;<COMMENT>
;============================================================
;=================== Closure Creation =======================
;============================================================

defn create-closures (ft:FunctionTable, epackage:EPackage) -> EPackage :
  ;Create a trampoline function that calls the given immediate
  ;with known arity.
  defn trampoline-fn (f:EVar|ECurry|EMix, arity:Int) :
    defn times<?T> (n:Int, f:() -> ?T) :
      to-tuple(repeatedly(f,n))
    val ret = EVar(fresh-id())
    val args = arity * fresh-id
    val [a1, a2] = match(f) :
      (f:EVar|ECurry) : fn-types(ft, f)
      (f:EMix) : [arity * ETop, ETop()]    
    val locals = [
      ELocal(n(ret), ETop(), false)]
    EFn([], args, arity * ETop, ETop(),
      EBody(locals, [], [], [
        ECheckedDo(ret, a2, f, map(EVar,args), a1)
        EReturn(ret)]))
      
  ;Create a trampoline function that calls the given immediate
  ;with unknown (and potentially multiple) arities.
  defn trampoline-fn (f:EVar|ECurry|EMix) :
    defn num-args (e:EVar|ECurry) : arity(ft, n(e))
    match(f) :
      (f:EVar|ECurry) :
        trampoline-fn(f, num-args(f))
      (f:EMix) :
        val funcs = to-tuple $
          for group in group-by(num-args, funcs(f)) seq :
            val e* = switch(length(value(group))) :
              1 : head(value(group))
              else : EMix(to-tuple(value(group)))
            trampoline-fn(e*, key(group))
        EMultifn(funcs)
        
  ;Lift
  defn analyze-body (body0:EBody) :
    ;Recursively analyze sub-bodies first
    val body = mapr(analyze-body, body0) as EBody
    
    ;Register all local functions first
    do(register{ft, _}, localfns(body))

    ;New definitions
    val new-locals = Vector<ELocal>()
    val new-localfns = Vector<ELocalFn>()
    val new-ins = Vector<EIns>()

    ;Lift a reference to a closure
    defn lift (x:EVar|ECurry|EMix) -> EVar :
      val n = fresh-id()
      val v = fresh-id()
      add(new-localfns, ELocalFn(n, trampoline-fn(x)))
      add(new-locals, ELocal(v, ETop(), false))
      add(new-ins, ELetRec([EVar(v)], [EClosure(n)]))
      EVar(v)

    ;Analyze an immediate, lifting when necessary
    defn lift-imm (x:EImm) :
      match(x) :
        (x:EVar) : lift(x) when function?(ft,n(x)) else x
        (x:ECurry|EMix) : lift(x)
        (x) : x        
    defn lift-imms (xs:Tuple<EImm>) :
      map(lift-imm, xs)
    defn lift-loc (x:ELoc) :
      {_ as ELoc} $ let loop (x:ELItem = x) :
        match(x) :
          (x:EImm) : lift-imm(x)
          (x:EVarLoc) : x
          (x) : map(loop, x)

    ;Analyze all instructions
    for i in ins(body) do :
      add{new-ins, _} $ match(i) :
        (i:ECheckedDo) : ECheckedDo(x(i), xtype(i), f(i), lift-imms(ys(i)), ytypes(i))
        (i:EDo) : EDo(x(i), xtype(i), f(i), lift-imms(ys(i)))
        (i:EPtr) : EPtr(x(i), lift-loc(loc(i)))
        (i) : map(lift-imm, i) as EIns

    ;Return analyzed function
    if empty?(new-locals) :
      body
    else :
      defn plus<?T> (xs:Seqable<?T>, ys:Seqable<?T>) : to-tuple(cat(xs,ys))
      EBody(locals(body) + new-locals,
            localfns(body) + new-localfns,
            localobjs(body),
            to-tuple(new-ins))

  ;Create closures
  mapr(analyze-body, epackage) as EPackage

;============================================================
;===================== Mix Conversion =======================
;============================================================

public defn convert-mixes (ft:FunctionTable, epackage:EPackage) :
  ;Analyze a given body
  defn analyze-body (body0:EBody) :
    ;Recursively analyze bodies first
    val body = mapr(analyze-body, body0) as EBody
    
    ;Buffer for holding generated instructions
    val new-ins = Vector<EIns>()

    ;Split a call into a dispatch branch
    defn make-dispatch (Do:(EType, EImm, Tuple<EImm>, Tuple<EType>) -> EIns, f:EMix, ys:Tuple<EImm>) :
      ;Construct branches and blocks
      val branches = Vector<EBranch>()
      val blocks = Vector<Tuple<EIns>>()
      val refmask = map(reftype?, a1) where :
        val [a1, a2] = fn-types(ft, funcs(f)[0])
      for f in funcs(f) do :
        val [a1, a2] = fn-types(ft, f)
        val lbl = fresh-id()
        add(branches, EBranch(select(a1,refmask), lbl))
        add(blocks, [
          ELabel(lbl)
          Do(a2, f, ys, a1)])
      ;Yield branches
      add(new-ins, EDispatch(select(ys,refmask), to-tuple(branches)))
      val end-lbl = fresh-id()
      for b in blocks do :
        add-all(new-ins, b)
        add(new-ins, EGoto(end-lbl))
      add(new-ins, ELabel(end-lbl))

    ;Scan through instructions
    for i in ins(body) do :
      match(i:ECheckedDo) :
        match(f(i)) :
          (f:EMix) : make-dispatch(ECheckedDo{x(i), _, _, _, _}, f, ys(i))
          (f) : add(new-ins, i)
      else : add(new-ins, i)

    ;Yield new body
    sub-ins(body, to-tuple(new-ins))

  ;Analyze all bodies
  mapr(analyze-body, epackage) as EPackage

;============================================================
;===================== Boundary Guards ======================
;============================================================

public defn insert-guards (vt:VarTable, epackage:EPackage) :
  ;Remove type variables from definition
  defn has-tvar? (t:EType) :
    var tvar? = false
    let loop (t:EType = t) :
      match(t:ETVar) : tvar? = true
      else : dor(loop, t)
    tvar?
  defn remove-tvars (t:EType) :
    let loop (t:EType = t) :
      match(t) :
        (t:ETVar) : ETop()
        (t) : mapr(loop, t) as EType
  defn remove-tvars (ts:Tuple<EType>) :
    map(remove-tvars, ts)
  defn remove-tvars (b:EBranch) :
    sub-types(b, remove-tvars(types(b)))
  defn remove-tvars (e:EMatch|EDispatch) :
    sub-branches(e, map(remove-tvars, branches(e)))

  ;Insert guards for HiStanza body
  defn guard-histanza-body (body:EBody, prelude:Collection<EIns>) :
    ;Buffer for holding generated instructions
    val new-ins = Vector<EIns>()
    defn emit (i:EIns) : add(new-ins, i)

    ;Buffer for holding label entrance guards
    val entry-blocks = IntTable<List<EIns>>(List())
    defn add-entry (b:Int, i:EIns) : update(entry-blocks, cons{i, _}, b)
    defn entry (b:Int) : reverse(entry-blocks[b])

    ;Register locals
    do(register{vt, _}, locals(body))

    ;Add prelude
    do(emit, prelude)

    ;Check that all used variables have been set
    defn check-vars (x:EImm) :
      match(x) :
        (x:EVar) :
          if variable?(vt,n(x)) and (mutable?(vt, n(x)) or global?(vt, n(x))) :
            emit(ECheckSet(x))            
        (x) : false

    ;Emit instructions for checks
    for i in ins(body) do :
      do-args(check-vars, i)
      match(i) :
        (i:ECheckedDo) :
          for (y in ys(i), t in ytypes(i)) do :
            emit(ECheck(y,t))
          emit(EDo(x(i), xtype(i), f(i), ys(i)))
          emit(ECheck(x(i), xtype(i)))
        (i:ESet|EDefSet) :
          match(y(i):EImm) :
            emit(ECheck(y(i) as EImm, type(vt, n(x(i)))))
          emit(i)
        (i:ELabel) :
          emit(i)
          do(emit, entry(n(i)))
        (i:EMatch|EDispatch) :
          for b in branches(i) do :
            for (t in types(b), y in ys(i)) do :
              add-entry(n(b), ECheck(y,t)) when has-tvar?(t)
          emit(remove-tvars(i))
        (i:ECheckLength) : 
          emit(ECheck(y(i), EOf(VM-TUPLE-TYPE-ID)))
          emit(i)
        (i) :
          emit(i)

    ;Return new body
    sub-ins(body, to-tuple(new-ins))

  ;Transform instructions for LoStanza body
  defn analyze-lostanza-body (body:EBody) :
    val ins* = for i in ins(body) map :
      match(i) :
        (i:EMatch|EDispatch) : remove-tvars(i)
        (i) : i
    sub-ins(body, ins*)

  ;Analysis for Methods
  defn guard-method (f:EFn, histanza?:True|False) -> EFn :
    val a1* = remove-tvars(a1(f))
    val body* = 
      if histanza? :
        val prelude = Vector<EIns>()
        for (x in args(f), t in a1(f)) do :
          add(prelude, ECheck(EVar(x),t)) when has-tvar?(t)
        guard-histanza-body(body(f), prelude)        
      else :
        analyze-lostanza-body(body(f))
    EFn(targs(f), args(f), a1*, a2(f), body*)

  ;Analysis for Functions
  defn guard-func (f:EFunction, histanza?:True|False) -> EFunction :
    defn loop (e:ELItem) :
      match(e) :
        (e:EBody) :
          if histanza? : guard-histanza-body(e, [])
          else : analyze-lostanza-body(e)
        (e) : map(loop, e)
    loop(f) as EFunction

  ;Overall driver
  defn analyze (e:ELItem) -> ELItem :
    match(e) :
      (e0:EDefmethod) :
        val e = map(analyze, e0) as EDefmethod
        sub-func(e, guard-method(func(e), not lostanza?(e)))
      (e0:EMethod) :
        val e = map(analyze, e0) as EMethod
        sub-func(e, guard-method(func(e), true))
      (e0:EDefn) :
        val e = map(analyze, e0) as EDefn
        sub-func(e, guard-func(func(e), not lostanza?(e)))
      (e0:EExternFn) :
        val e = map(analyze, e0) as EExternFn
        sub-func(e, guard-func(func(e), false) as EFn)
      (e0:ELocalFn) :
        val e = map(analyze, e0) as ELocalFn
        sub-func(e, guard-func(func(e), true))
      (e:EBody) :
        EBody(locals(e),
              map(analyze, localfns(e)) as Tuple<ELocalFn>,
              map(analyze, localobjs(e)) as Tuple<ELocalObj>,
              ins(e))
      (e) :
        map(analyze, e)

  analyze(epackage) as EPackage

;============================================================
;=================== Freevar Analysis =======================
;============================================================

defn analyze-freevars (el:ELItem) -> ELItem :
  defn analyze-usages (e:EFn) :
    ;Gather all uses in the function
    val var-uses = IntSet()
    val tvar-uses = IntSet()
    defn loop (e:ELItem) :
      match(e) :
        (e:EVar) :
          add(var-uses, n(e))
          e
        (e:ETVar) :
          add(tvar-uses, n(e))
          e
        (e:EFn) :
          val e* = analyze-usages(e) as EFn
          add-all(var-uses, free-vars(e*))
          add-all(tvar-uses, free-tvars(e*))
          e*
        (e:EType) :
          e
        (e) :
          map(loop, e)
    val e* = map(loop,e) as EFn
    
    ;Remove all locally defined quantities
    defn remove-all (xs:IntSet, ys:Seqable<Int>) :
      do(remove{xs, _}, ys)
    remove-all(tvar-uses, targs(e))
    remove-all(var-uses, args(e))
    remove-all(var-uses, seq(n, locals(body(e))))
    remove-all(var-uses, seq(n, localfns(body(e))))
    
    ;Record free
    sub-free-tvars{_, to-tuple(tvar-uses)} $
    sub-free-vars(e*, to-tuple(var-uses))

  match(el) :
    (el:EFn) : analyze-usages(el)
    (el) : mapr(analyze-usages, el)

;============================================================
;===================== Mutable Boxing =======================
;============================================================

defn box-mutables (vt:VarTable, epackage:EPackage) -> EPackage :
  val boxed = IntSet()
  defn box (e:ELItem) :
    match(e) :
      (e0:EBody) :
        ;Find all closed-over variables
        val closed-over = IntSet()
        defn add-to-closed (e:ELItem) :
          match(e:EFn) : add-all(closed-over, free-vars(e))
          else : do(add-to-closed, e)
        do(add-to-closed, localfns(e0))
        do(add-to-closed, localobjs(e0))

        ;Add all locally closed-over mutable items to boxed set
        for l in locals(e0) do :
          if mutable?(l) and closed-over[n(l)] :
            add(boxed, n(l))
            
        ;Recursively analyze sub-bodies
        val e = map(box, e0) as EBody

        ;Register local variables
        do(register{vt, _}, locals(e))

        ;Perform boxing
        val new-locals = Vector<ELocal>()
        val new-ins = Vector<EIns>()
        defn emit (e:ELocal) : add(new-locals, e)
        defn emit (e:EIns) : add(new-ins, e)
        defn plus<?T> (xs:Seqable<?T>, ys:Seqable<?T>) : to-tuple(cat(xs,ys))

        ;Convert a boxed var retrieval into a BoxGet instruction
        defn retrieve-var (e:EImm) :
          match(e:EVar) :
            if boxed[n(e)] :
              val x = EVar(fresh-id())
              emit(ELocal(n(x), type(vt, n(e)), false))
              emit(EBoxGet(x, e))
              x
            else : e
          else : e
        
        ;Convert instructions for operating with boxed variables
        for i in ins(e) do :
          match(map-args(retrieve-var, i)) :
            (i:ESet) :
              if boxed[n(x(i))] : emit(EBoxSet(x(i), y(i)))
              else : emit(i)
            (i:EDefSet) :
              if boxed[n(x(i))] : emit(EBox(x(i), y(i)))
              else : emit(i)
            (i) : emit(i)

        ;Return new body
        sub-locals{_, locals(e) + new-locals} $
        sub-ins(e, to-tuple(new-ins))
      (e) :
        map(box, e)

  ;Perform freevar analysis and then boxing
  map(box, analyze-freevars(epackage)) as EPackage                  

;============================================================
;================== Specialized Mappers =====================
;============================================================

defn do-args (f:EImm -> ?, e:EIns) :
  defn f* (x:EImm) : (f(x), x)
  map-args(f*, e)
  false

defn map-args (f:EImm -> EImm, e:EIns) :
  defn g (x:False) : x
  defn g (x:EImm) -> ? : f(x)
  defn g (x:ELoc) : mapr(f, x) as ELoc
  defn g (x:Tuple<EImm>) : map(g,x)
  match(e) :
    (e:ESet) : ESet(x(e), g(y(e)))
    (e:EDefSet) : EDefSet(x(e), g(y(e)))
    (e:EShuffle) : EShuffle(xs(e), g(ys(e)))
    (e:ELetRec) : ELetRec(xs(e), closures(e))
    (e:ECheckedDo) : ECheckedDo(x(e), xtype(e), g(/f(e)), g(ys(e)), ytypes(e))
    (e:ENew) : ENew(x(e), n(e))
    (e:ETuple) : ETuple(x(e), g(ys(e)))
    (e:EVoidTuple) : EVoidTuple(x(e), length(e))
    (e:ETupleGet) : ETupleGet(x(e), g(y(e)), index(e))
    (e:ETupleSet) : ETupleSet(g(y(e)), index(e), g(z(e)))
    (e:ECheckLength) : ECheckLength(g(y(e)), length(e))
    (e:EObject) : EObject(x(e), n(e), g(ys(e)))
    (e:EArray) : EArray(x(e), n(e), g(ys(e)))
    (e:EStruct) : EStruct(x(e), n(e), g(ys(e)))
    (e:EPtr) : EPtr(x(e), g(loc(e)))
    (e:ELoad) : ELoad(x(e), xtype(e), g(loc(e)))
    (e:EStore) : EStore(g(loc(e)), g(y(e)), ytype(e))
    (e:ELabel) : e
    (e:EDo) : EDo(x(e), xtype(e), g(/f(e)), g(ys(e)))
    (e:EDoC) : EDoC(x(e), xtype(e), g(/f(e)), g(ys(e)))
    (e:EDump) : EDump(g(ys(e)))
    (e:EInterpret) : EInterpret(x(e), g(y(e)))
    (e:EConv) : EConv(x(e), g(y(e)))
    (e:ECheck) : ECheck(g(y(e)), type(e))
    (e:EGoto) : e
    (e:EPrim) : EPrim(x(e), op(e), g(ys(e)))
    (e:EIf) : EIf(n1(e), n2(e), op(e), g(ys(e)))
    (e:EMatch) : EMatch(g(ys(e)), branches(e))
    (e:EDispatch) : EDispatch(g(ys(e)), branches(e))
    (e:ECheckSet) : ECheckSet(g(y(e)))
    (e:EBox) : EBox(x(e), g(y(e)))
    (e:EBoxGet) : EBoxGet(x(e), g(y(e)))
    (e:EBoxSet) : EBoxSet(g(y(e)), g(z(e)))
    (e:EReturn) : EReturn(g(y(e)))
;<COMMENT>
;============================================================
;====================== Utilities ===========================
;============================================================

public defn group-by<?T,?K,?V> (xkey:T -> ?K&Hashable&Equalable, xval:T -> ?V, xs:Seqable<?T>) :
  val table = HashTable<K,List<V>>(List())
  for x in xs do :
    update(table, cons{xval(x), _}, xkey(x))
  table

public defn group-by<?T,?K> (xkey:T -> ?K&Hashable&Equalable, xs:Seqable<?T>) :
  group-by(xkey, {_}, xs)

public defn select<?T> (xs:Tuple<?T>, mask:Tuple<True|False>) -> Tuple<T> :
  to-tuple(filter(xs, mask))