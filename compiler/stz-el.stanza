defpackage stz/el :
  import core
  import collections
  import stz/dl-ir
  import stz/el-ir
  import stz/ids
  import stz/built-ins with:
    prefix => VM-

;============================================================
;========================= Lowering =========================
;============================================================

public defn lower (packageio:PackageIO, epackage:EPackage) :
  println("===== PACKAGE IO =====")
  println(packageio)
  println("===== EPACKAGE =====")
  println(epackage)

  var cur-package:EPackage = epackage
  defn report (name:String) :
    println("===== %_ =====" % [name])
    println(cur-package)

  cur-package = map-methods(cur-package)
  report("Mapped Methods")

  val global-vt = GlobalVarTable(packageio, cur-package)

  cur-package = create-closures(global-vt, cur-package)
  report("Created Closures")

  cur-package = convert-mixes(global-vt, cur-package)
  report("Converted Mixes")

  cur-package = insert-guards(global-vt, cur-package)
  report("Inserted Guards")

  cur-package = box-mutables(global-vt, cur-package)
  report("Boxed Mutables")

  cur-package = lift-objects(global-vt, cur-package)
  report("Lifting Objects")

  cur-package = lift-closures(global-vt, cur-package)
  report("Lifting Closures")

  cur-package = lift-type-objects(cur-package)
  report("Reify Types")

;============================================================
;================== Consistency Check =======================
;============================================================

;============================================================
;================== Method TArg Mapping =====================
;============================================================

defn inverse-solve (input-xs:Tuple<Int>, targs:Tuple<EType>) -> [Tuple<Int>, Tuple<EType>] :
  ;Created targs
  val ys = map(fresh-id{}, targs)
  ;Initialize solved table
  val solved = IntTable<ETVar>()
  ;Precise Solutions
  for (t in targs, y in ys) do :
    match(t:ETVar) : set?(solved, n(t), ETVar{y})
  ;Approximate Solutions
  for (t in targs, y in ys) do :
    let loop (t:EType = t) :
      match(t) :
        (t:ETVar) : set?(solved, n(t), ETVar{y})
        (t:EOr) : do*(loop, t)
        (t) : false
  ;Return solutions
  val solns = map(get?{solved, _, ETop()}, input-xs)
  [ys, solns]

defn replace-tvars (f:EFn, xs:Tuple<Int>, ys:Tuple<EType>) :
  val table = to-inttable<EType>(xs,ys)
  defn loop (x:EType) :
    match(x) :
      (x:ETVar) : get?(table, n(x), ETop())
      (x) : map(loop, x)
  map(loop, f)

defn map-methods (e:EPackage) :
  defn loop (x:ELBigItem) :
    map{loop, _} $ match(x) :
      (m:EDefmethod) :
        val [targs*, tvals] = inverse-solve(targs(func(m)), targs(m))
        val func* = sub-targs(replace-tvars(func(m), targs(func(m)), tvals), targs*)
        EDefmethod(n(m), multi(m), [], func*, lostanza?(m))
      (m:EMethod) :
        val [targs*, tvals] = inverse-solve(targs(func(m)), targs(m))
        val func* = sub-targs(replace-tvars(func(m), targs(func(m)), tvals), targs*)
        EMethod(multi(m), [], thisn(m), func*)
      (x) :
        x
  map(loop, e)

;============================================================
;===================== Body Buffer ==========================
;============================================================

deftype BodyBuffer
defmulti emit (b:BodyBuffer, x:ELocal|ELocalType|ELocalFn|ELocalObj|EIns) -> False
defmulti to-body (b:BodyBuffer) -> EBody

defn BodyBuffer (body:EBody) :
  val new-locals = Vector<ELocal>()
  val new-localtypes = Vector<ELocalType>()
  val new-localfns = Vector<ELocalFn>()
  val new-localobjs = Vector<ELocalObj>()
  val new-ins = Vector<EIns>()
  new BodyBuffer :
    defmethod emit (this, x:ELocal|ELocalType|ELocalFn|ELocalObj|EIns) :
      val xs = match(x) :
        (x:ELocal) : new-locals
        (x:ELocalType) : new-localtypes
        (x:ELocalFn) : new-localfns
        (x:ELocalObj) : new-localobjs
        (x:EIns) : new-ins
      add(xs, x)
    defmethod to-body (this) :
      defn append?<?T> (xs:Tuple<?T>, ys:Vector<?T>) :
        if empty?(ys) : xs
        else : to-tuple(cat(xs,ys))
      val locals* = append?(locals(body), new-locals)
      val localtypes* = append?(localtypes(body), new-localtypes)
      val localfns* = append?(localfns(body), new-localfns)
      val localobjs* = append?(localobjs(body), new-localobjs)
      val ins* = to-tuple(new-ins)
      EBody(locals*, localtypes*, localfns*, localobjs*, ins*)

defn emit-all (b:BodyBuffer, xs:Seqable<ELocal|ELocalType|ELocalFn|ELocalObj|EIns>) :
  do(emit{b, _}, xs)

;============================================================
;=================== Closure Creation =======================
;============================================================
defn create-closures (gvt:VarTable, epackage:EPackage) -> EPackage :
  ;Create a trampoline function that calls the given immediate
  ;with known arity.
  defn trampoline-fn (f:EVar|ECurry|EMix, arity:Int, vt:VarTable) :
    defn times<?T> (n:Int, f:() -> ?T) :
      to-tuple(repeatedly(f,n))
    val ret = fresh-id()
    val args = arity * fresh-id
    val [a1, a2] = match(f) :
      (f:EVar|ECurry) : fn-types(vt, f)
      (f:EMix) : [arity * ETop, ETop()]
    val locals = [
      ELocal(ret, ETop(), false)]
    EFn([], args, arity * ETop, ETop(),
      EBody(locals, [], [], [], [
        ECheckedDo(EVarLoc(ret), a2, f, map(EVar,args), a1)
        EReturn(EVar(ret))]))

  ;Create a trampoline function that calls the given immediate
  ;with unknown (and potentially multiple) arities.
  defn trampoline-fn (f:EVar|ECurry|EMix, vt:VarTable) :
    defn num-args (e:EVar|ECurry) :
      arity{vt, _} $ match(e) :
        (e:EVar) : n(e)
        (e:ECurry) : n(x(e))
    match(f) :
      (f:EVar|ECurry) :
        trampoline-fn(f, num-args(f), vt)
      (f:EMix) :
        val funcs = to-tuple $
          for group in group-by(num-args, funcs(f)) seq :
            trampoline-fn{_, key(group), vt} $
              switch(length(value(group))) :
                1 : head(value(group))
                else : EMix(to-tuple(value(group)))
        EMultifn(funcs)

  ;Lift all first-class functions in body
  defn analyze-body (body:EBody, vt:VarTable) :
    ;New definitions
    val buffer = BodyBuffer(body)

    ;Lift a reference to a closure
    defn lift (x:EVar|ECurry|EMix) -> EVar :
      val v = fresh-id()
      emit(buffer, ELocalFn(v, trampoline-fn(x, vt)))
      emit(buffer, EInitClosures([EVarLoc(v)]))
      EVar(v)

    ;Analyze an immediate, lifting when necessary
    defn lift-imm (x:EImm) :
      match(x) :
        (x:EVar) : lift(x) when function?(vt,n(x)) else x
        (x:ECurry|EMix) : lift(x)
        (x) : x
    defn lift-imms (xs:Tuple<EImm>) :
      map(lift-imm, xs)

    ;Analyze all instructions
    for i in ins(body) do :
      emit{buffer, _} $ match(i) :
        (i:ECheckedDo) : ECheckedDo(x(i), xtype(i), f(i), lift-imms(ys(i)), ytypes(i))
        (i:EDo) : EDo(x(i), xtype(i), f(i), lift-imms(ys(i)))
        (i) : map(lift-imm, i)

    ;Return analyzed function
    to-body(buffer)

  ;Recursive Analysis
  defn analyze (x:ELBigItem, vt:VarTable) :
    match(map(analyze{_, vt},x)) :
      (x:EBody) : analyze-body(x, vt)
      (x) : x
  map-with-var-table({analyze(_, _) as ETExp}, gvt, epackage)


;============================================================
;===================== Mix Conversion =======================
;============================================================

public defn convert-mixes (gvt:VarTable, epackage:EPackage) :
  ;Analyze a given body
  defn analyze-body (body:EBody, vt:VarTable) :
    ;Create buffer
    val buffer = BodyBuffer(body)

    ;Split a call into a dispatch branch
    defn make-dispatch (Do:(EType, EImm, Tuple<EImm>, Tuple<EType>) -> EIns, f:EMix, ys:Tuple<EImm>) :
      ;Construct branches and blocks
      val branches = Vector<EBranch>()
      val blocks = Vector<Tuple<EIns>>()
      val refmask = map(reftype?, a1) where :
        val [a1, a2] = fn-types(vt, funcs(f)[0])
      for f in funcs(f) do :
        val [a1, a2] = fn-types(vt, f)
        val lbl = fresh-id()
        add(branches, EBranch(select(a1,refmask), lbl))
        add(blocks, [
          ELabel(lbl)
          Do(a2, f, ys, a1)])
      ;Yield branches
      emit(buffer, EDispatch(select(ys,refmask), to-tuple(branches)))
      val end-lbl = fresh-id()
      for b in blocks do :
        emit-all(buffer, b)
        emit(buffer, EGoto(end-lbl))
      emit(buffer, ELabel(end-lbl))

    ;Scan through instructions
    for i in ins(body) do :
      ;Construct Do call
      defn Do (xtype:EType, f:EImm, ys:Tuple<EImm>, ytypes:Tuple<EType>) :
        match(i) :
          (i:ECheckedDo) : ECheckedDo(x(i), xtype, f, ys, ytypes)
          (i:EDo) : EDo(x(i), xtype, f, ys)
      ;Dispatch-on
      defn make-dispatch? (f:EImm, ys:Tuple<EImm>) :
        match(f:EMix) : make-dispatch(Do, f, ys)
        else : emit(buffer, i)
      ;Analyze
      match(i) :
        (i:ECheckedDo) : make-dispatch?(f(i), ys(i))
        (i:EDo) : make-dispatch?(f(i), ys(i))
        (i) : emit(buffer, i)

    ;Yield new body
    to-body(buffer)

  ;Recursively analyze body
  defn analyze (x:ELBigItem, vt:VarTable) :
    match(map(analyze{_, vt}, x)) :
      (x:EBody) : analyze-body(x,vt)
      (x) : x
  map-with-var-table({analyze(_, _) as ETExp}gvt, epackage)    

;============================================================
;===================== Boundary Guards ======================
;============================================================

public defn insert-guards (gvt:VarTable, epackage:EPackage) :
  ;Insert guards for HiStanza body
  defn guard-histanza-body (body:EBody, prelude:Collection<EIns>, vt:VarTable) :
    ;Buffer for holding generated instructions
    val buffer = BodyBuffer(body)
    defn emit (i:EIns) : /emit(buffer,i)

    ;Buffer for holding label entrance guards
    val entry-blocks = IntTable<List<EIns>>(List())
    defn add-entry (b:Int, i:EIns) : update(entry-blocks, cons{i, _}, b)
    defn entry (b:Int) : reverse(entry-blocks[b])

    ;Add prelude
    do(emit, prelude)

    ;Check that all used variables have been set
    defn check-vars (x:EImm) :
      match(x) :
        (x:EVar) :
          if variable?(vt, n(x)) and (mutable?(vt, n(x)) or global?(vt, n(x))) :
            emit(ECheckSet(x))
        (x) : false

    ;Emit instructions for checks
    for i in ins(body) do :
      do*(check-vars, i)
      match(i) :
        (i:ECheckedDo) :
          for (y in ys(i), t in ytypes(i)) do :
            emit(ECheck(y,t))
          emit(EDo(x(i), xtype(i), f(i), ys(i)))
          emit(ECheck(EVar(n(x(i))), xtype(i)))
        (i:ESet|EInit) :
          match(y(i):EImm) :
            emit(ECheck(y(i) as EImm, type(vt, n(x(i)))))
          emit(i)
        (i:ELabel) :
          emit(i)
          do(emit, entry(n(i)))
        (i:EMatch|EDispatch) :
          for b in branches(i) do :
            for (t in types(b), y in ys(i)) do :
              add-entry(n(b), ECheck(y,t)) when has-tvar?(t)
          emit(remove-tvars(i))
        (i:ECheckLength) :
          emit(ECheck(y(i), EOf(VM-TUPLE-TYPE-ID)))
          emit(i)
        (i) :
          emit(i)

    ;Return new body
    to-body(buffer)

  ;Transform instructions for LoStanza body
  defn analyze-lostanza-body (body:EBody) :
    val ins* = for i in ins(body) map :
      match(i) :
        (i:EMatch|EDispatch) : remove-tvars(i)
        (i) : i
    sub-ins(body, ins*)

  ;General analysis for bodies
  defn guard-bodies<?T> (e:?T&ELBigItem, histanza?:True|False, vt:VarTable) :
    defn loop (e:ELBigItem) :
      match(e) :
        (e:EBody) : 
          if histanza? : guard-histanza-body(e, [], vt)
          else : analyze-lostanza-body(e)
        (e) : map(loop, e)
    loop(e) as T&ELBigItem

  ;Analysis for Methods
  defn guard-method (f:EFn, histanza?:True|False, vt:VarTable) -> EFn :
    val a1* = map(remove-tvars,a1(f))
    val body* =
      if histanza? :
        val prelude = Vector<EIns>()
        for (x in args(f), t in a1(f)) do :
          add(prelude, ECheck(EVar(x),t)) when has-tvar?(t)
        guard-histanza-body(body(f), prelude, vt)
      else :
        analyze-lostanza-body(body(f))
    EFn(targs(f), args(f), a1*, a2(f), body*)

  ;Overall driver
  defn analyze (e:ELBigItem, vt:VarTable) -> ELBigItem :
    match(map(analyze{_, vt},e)) :
      (e:EDefmethod) : sub-func(e, guard-method(func(e), not lostanza?(e), vt))
      (e:EMethod) : sub-func(e, guard-method(func(e), true, vt))
      (e:EDefn) : guard-bodies(e, not lostanza?(e), vt)
      (e:EExternFn) : guard-bodies(e, false, vt)
      (e:ELocalFn) : guard-bodies(e, true, vt)
      (e:EBlock) : guard-bodies(e, not lostanza?(e), vt)
      (e) : e
  map-with-var-table({analyze(_, _) as ETExp}, gvt, epackage)


;============================================================
;=================== Freevar Analysis =======================
;============================================================

defn analyze-freevars<?T> (el:ELBigItem&?T, vt:VarTable) -> T :
  defn analyze-usages (e:EFn) -> EFn :
    ;Gather all uses in the function
    val var-uses = IntSet()
    val tvar-uses = IntSet()

    defn loop (e:ELItem) :
      match(e) :
        (e:EVar|EVarLoc) :
          add(var-uses, n(e))
        (e:ETVar|ETVarLoc) :
          add(tvar-uses, n(e))
        (e:EFn) :
          val free = free(e)
          add-all(var-uses, vars(free))
          add-all(tvar-uses, tvars(free))
        (e) :
          do(loop, e)
    do(loop,e)

    ;Remove all locally defined quantities
    defn remove-all (xs:IntSet, ys:Seqable<Int>) : do(remove{xs, _}, ys)
    remove-all(tvar-uses, targs(e))
    remove-all(tvar-uses, seq(n, localtypes(body(e))))
    remove-all(var-uses, args(e))
    remove-all(var-uses, seq(n, locals(body(e))))
    remove-all(var-uses, seq(n, localfns(body(e))))

    ;Record free
    defn local? (x:Int) : not global?(vt,x)
    defn local? (xs:Seqable<Int>) : to-tuple(filter(local?,xs))
    sub-free(e, Free(local?(var-uses), to-tuple(tvar-uses)))

  ;Recursively analyze usages
  defn analyze (e:ELBigItem) :
    match(map(analyze, e)) :
      (e:EFn) : analyze-usages(e)
      (e) : e
  analyze(el) as ELBigItem&T

;============================================================
;===================== Mutable Boxing =======================
;============================================================

defn box-mutables (gvt:VarTable, epackage:EPackage) -> EPackage :
  val boxed = IntSet()
  defn box (e:ELBigItem, vt:VarTable) -> ELBigItem :
    match(e) :
      (e0:EBody) :
        ;Find all closed-over variables
        val closed-over = IntSet()
        defn add-to-closed (e:ELBigItem) :
          match(e:EFn) : add-all(closed-over, vars(free(e)))
          else : do*(add-to-closed, e)
        do*(add-to-closed, e0)

        ;Add all locally closed-over mutable items to boxed set
        for l in locals(e0) do :
          if mutable?(l) and closed-over[n(l)] :
            add(boxed, n(l))

        ;Recursively analyze sub-bodies
        val e = map(box{_, vt}, e0)

        ;Perform boxing
        val buffer = BodyBuffer(e)

        ;Convert a boxed var retrieval into a BoxGet instruction
        defn retrieve-var (e:EImm) :
          match(e:EVar) :
            if boxed[n(e)] :
              val x = fresh-id()
              emit(buffer, ELocal(x, type(vt, n(e)), false))
              emit(buffer, EBoxGet(EVarLoc(x), e))
              EVar(x)
            else : e
          else : e

        ;Convert instructions for operating with boxed variables
        for i in ins(e) do :
          match(map(retrieve-var, i)) :
            (i:EInit) :
              if boxed[n(x(i))] : emit(buffer,EBox(x(i), y(i)))
              else : emit(buffer,i)
            (i:ESet) :
              if boxed[n(x(i))] : emit(buffer,EBoxSet(EVar(n(x(i))), y(i)))
              else : emit(buffer,i)
            (i) :
              emit(buffer,i)

        ;Change local type
        defn change-to-box-type (e:ELocal) :
          if boxed[n(e)] : ELocal(n(e), EOf(VM-BOX-TYPE-ID), false)
          else : e

        ;Return new body
        sub-locals{_, map(change-to-box-type, locals(e))} $
        to-body(buffer)
      (e) :
        map(box{_, vt}, e)

  ;Perform freevar analysis and then boxing
  within (texp, vt) = map-with-var-table(gvt, epackage) :
    box(analyze-freevars(texp, vt), vt) as ETExp

;============================================================
;=================== Object Lifting =========================
;============================================================

defn lift-objects (gvt:VarTable, epackage:EPackage) -> EPackage :
  ;Buffer for new top level expressions
  val new-texps = Vector<ETExp>()

  ;Lift an instance method to the top level
  ;objfree contains the freevars stored in the object
  ;obj-n is the identifier of the EDefObject of the object declaration
  defn lift-method (obj-n:Int, m:EMethod, objfree:Free, vt:VarTable) :
    val fbody = body(func(m))
    val buffer = BodyBuffer(fbody)

    ;Track necessary renames
    val rename-table = IntTable<Int>()
    defn rename-var (v:Int) :
      val v* = fresh-id()
      rename-table[v] = v*
      v*

    ;Emit freevars for variables
    for v in vars(free(func(m))) do :
      val i = index-of(vars(objfree), v)
      match(i:Int) :
        val v* = rename-var(v)
        emit(buffer, ELocal(v*, type(vt,v), false))
        emit(buffer, EObjectGet(EVarLoc(v*), EVar(thisn(m)), i))
    ;Emit freetypes
    for v in tvars(free(func(m))) do :
      val i = index-of!(tvars(objfree), v)
      val v* = rename-var(v)
      emit(buffer, ELocalType(v*))
      emit(buffer, EObjectTGet(ETVarLoc(v*), EVar(thisn(m)), i))

    ;Emit renamed body
    for i in ins(fbody) do :
      emit(buffer, rename-vars+tvars(i, rename-table))

    ;Push new method to top level
    val f = func(m)
    val a1* = to-tuple $
      for (x in args(f), t in a1(f)) seq :
        EOf(obj-n) when x == thisn(m) else remove-tvars(t)
    val a2* = remove-tvars(a2(f))
    val f* = EFn(targs(f), args(f), a1*, a2*, to-body(buffer))
    add(new-texps, EDefmethod(fresh-id(), multi(m), [], f*, false))

  ;Sweep through the body and lift out declarations of local objects.
  defn lift-body (e:EBody, vt:VarTable) :
    ;For each object, which we will lift to obj-n:
    ;- calculate the freevars stored in the object
    ;- then generate the object declaration
    ;- then lift each instance method to the top level
    ;- then sweep through instructions and replace ENew with ENewObject

    ;Keep track of computed object freevars
    val objfree-table = IntTable<Free>()

    ;Lift each object
    for obj in localobjs(e) do :
      ;Compute object freevars
      val objfree = join-free(seq(free{func(_)}, methods(obj)))
      objfree-table[n(obj)] = objfree

      ;Generate object declaration
      add(new-texps, EDefObject(n(obj), type(obj), ntargs, nargs)) where :
        val ntargs = length(tvars(objfree))
        val nargs = length(vars(objfree))

      ;Lift instance methods
      do(lift-method{n(obj), _, objfree, vt}, methods(obj))

    ;Generate new instructions
    val ins* = for i in ins(e) map :
      match(i:ENew) :
        val objfree = objfree-table[n(i)]
        val ys = map(EVar, vars(objfree))
        val targs = map(ETVar, tvars(objfree))
        ENewObject(x(i), n(i), targs, ys)
      else : i

    ;Return new body
    sub-localobjs{_, []} $
    sub-ins(e, ins*)

  ;Recursively analyze each body
  defn analyze (e:ELBigItem, vt:VarTable) -> ELBigItem :
    match(map(analyze{_, vt}, e)) :
      (e:EBody) : lift-body(e, vt)
      (e) : e
  val epackage* = within (texp, vt) = map-with-var-table(gvt, epackage) :
    analyze(analyze-freevars(texp,vt), vt) as ETExp
  sub-exps(epackage*, to-tuple(cat(exps(epackage*), new-texps)))

;============================================================
;=================== Closure Lifting ========================
;============================================================

defn lift-closures (gvt:VarTable, epackage:EPackage) -> EPackage :
  ;Track new top level expressions
  val new-texps = Vector<ETExp>()

  ;Lift the given function with the computed free vars to the top-level.
  ;- Use closure as the identifier of the closure argument.
  ;- Write a recursive function to compute translated EFn.
  ;  - For every EFn:
  ;    - Retrieve the free variables from closure argument
  ;    - Retrieve the type variables from closure argument
  ;    - Rename all instructions, input types, and output types
  ;- Construct EDefClosure expression and add to top level
  defn lift-function (fid:Int, f:EFunction, fnfree:Free, vt:VarTable) :
    ;Closure argument
    val closure = fresh-id()

    ;Helper function for processing the body of an EFunction
    defn lift (e:ELBigItem) -> ELBigItem :
      match(e:EFn) :
        ;Track necessary renames
        val rename-table = IntTable<Int>()
        defn rename-var (v:Int) :
          val v* = fresh-id()
          rename-table[v] = v*
          v*

        ;Create buffer
        val buffer = BodyBuffer(body(e))

        ;Retrieve free variables from closure argument
        for v in vars(free(e)) do :
          val i = index-of(vars(fnfree), v)
          match(i:Int) :
            val v* = rename-var(v)
            emit(buffer, ELocal(v*, type(vt,v), false))
            emit(buffer, EClosureGet(EVarLoc(v*), EVar(closure), i))

        ;Retrieve type variables from closure argument
        for v in tvars(free(e)) do :
          val i = index-of!(tvars(fnfree), v)
          val v* = rename-var(v)
          emit(buffer, ELocalType(v*))
          emit(buffer, EClosureTGet(ETVarLoc(v*), EVar(closure), i))

        ;Emit renamed body
        for i in ins(body(e)) do :
          emit(buffer, rename-vars+tvars(i,rename-table))

        ;Return new function
        defn remove-nonlocal-tvars (t:EType) -> EType :
          match(t:ETVar) : ETop() when key?(rename-table,n(t)) else t
          else : map(remove-nonlocal-tvars, t)
        val a1* = map(remove-nonlocal-tvars, a1(e))
        val a2* = rename-vars+tvars(a2(e), rename-table)
        EFn(targs(e), args(e), a1*, a2*, to-body(buffer))
      else :
        map(lift, e)

    ;Construct EDefClosure and push to top level
    val ntargs = length(vars(fnfree))
    val nargs = length(vars(fnfree))
    val func* = lift(f) as EFunction
    add(new-texps, EDefClosure(fid, closure, ntargs, nargs, func*))

  ;Sweep through the body and lift out declarations of local functions
  ;- Lift each function to the top level
  ;- Sweep through instructions, and convert EInitClosures into ELetRec statements.
  ;  - Create each closure by looking up its freevars in free-table
  ;- Return new function
  ;  - The local functions are now empty, and moved over to local definitions
  ;  - Use the new instructions
  defn lift-body (e:EBody, vt:VarTable) :
    ;Track the freevars for each function
    val free-table = IntTable<Free>()

    ;Lift each function to the top level
    for f in localfns(e) do :
      ;Compute freevars
      val fnfree = match(func(f)) :
        (f:EFn) : free(f)
        (f:EMultifn) : join-free(seq(free, funcs(f)))
      free-table[n(f)] = fnfree
      ;Lift function
      lift-function(n(f), func(f), fnfree, vt)

    ;Generate new instructions
    val ins* = for i in ins(e) map :
      match(i) :
        (i:EInitClosures) :
          val closures = for x in xs(i) map :
            val free = free-table[n(x)]
            val targs = map(ETVar, tvars(free))
            val ys = map(EVar, vars(free))
            EClosure(n(x), targs, ys)
          ELetRec(xs(i), closures)
        (i) : i

    ;Return new function
    defn to-local (e:ELocalFn) : ELocal(n(e), EOf(VM-FN-TYPE-ID), false)
    val locals* = to-tuple(cat(locals(e), seq(to-local, localfns(e))))
    EBody(locals*, localtypes(e), [], localobjs(e), ins*)

  defn analyze (e:ELBigItem, vt:VarTable) -> ELBigItem :
    match(map(analyze{_, vt},e)) :
      (e:EBody) : lift-body(e,vt)
      (e) : e
  val epackage* = within (texp, vt) = map-with-var-table(gvt, epackage) :
    analyze(analyze-freevars(texp,vt), vt) as ETExp
  sub-exps(epackage*, to-tuple(cat(exps(epackage*), new-texps)))

;============================================================
;================= Lifting Type Objects =====================
;============================================================

defn lift-type-objects (epackage:EPackage) :
  ;Store lifted types
  val type-table = HashTable<EType,EDefTypeObject>()

  ;Lift a type to the top level
  defn lift-type (t:EType, nargs:Int) :
    if not key?(type-table, t) :
      val n = fresh-id()
      type-table[t] = EDefTypeObject(n, nargs, t)
    n(type-table[t])

  ;Reindex a type
  defn reindex (t:EType) -> [EType, Tuple<ETVar>] :  
    val table = IntTable<Int>()
    val tvars = Vector<Int>()
    val t* = let loop (t:EType = t) :
      match(t:ETVar) :
        if not key?(table, n(t)) :
          val i = length(tvars)
          table[n(t)] = i
          add(tvars, n(t))
        ETVar(table[n(t)])
      else : map(loop, t)
    [normalize(t*), to-tuple(seq(ETVar,tvars))]

  ;Lift all first-class types in body
  defn lift-body (e:EBody) :
    val buffer = BodyBuffer(e)

    ;Reify a type
    defn reify-type (t:EType) -> EType :
      match(t) :
        (t:ETVar) :
          t
        (t) :
          val [t*, tvars] = reindex(t)
          val n = lift-type(t*, length(tvars))
          val x = fresh-id()
          emit(buffer, ELocalType(x))
          emit(buffer, ETypeObject(ETVarLoc(x), n, tvars))
          ETVar(x)          
    defn reify-type (e:EImm) -> EImm :
      match(e:ECurry) : ECurry(x(e), map(reify-type,targs(e)))
      else : e
    defn reify-type (e:EClosure) :
      sub-targs(e, map(reify-type,targs(e)))

    ;Reify all type arguments in instructions
    for i in ins(e) do :
      emit{buffer, _} $ match(i) :
        (i:EDo) : sub-f(i, reify-type(f(i)))
        (i:ELetRec) : sub-ys(i, map(reify-type,ys(i)))
        (i:ENewObject) : sub-targs(i, map(reify-type, targs(i)))
        (i) : i

    ;Return new body
    to-body(buffer)

  ;Recursively lift all bodies
  defn analyze (e:ELBigItem) -> ELBigItem :
    match(map(analyze,e)) :
      (e:EBody) : lift-body(e)
      (e) : e
  map(analyze, epackage)

;============================================================
;====================== Type Table ==========================
;============================================================

deftype DTypeTable
defmulti to-etype (t:DTypeTable, d:DType, targs:Tuple<EType>) -> EType

defn DTypeTable (io:PackageIO) :
  val type-ids = HashTable<TypeId,Int>()
  for e in cat(imports(io), exports(io)) do :
    match(rec(e):TypeRec|StructRec) :
      type-ids[id(rec(e)) as TypeId] = n(e)
  defn to-etype (d:DType, targs:Tuple<EType>) :
    defn conv (f:False) : false
    defn conv (ds:Tuple<DType>) : map(conv, ds)
    defn conv (d:DType) :
      match(d) :
        (d:DByte) : EByte()
        (d:DInt) : EInt()
        (d:DLong) : ELong()
        (d:DFloat) : EFloat()
        (d:DDouble) : EDouble()
        (d:DUnknown) : EUnknown()
        (d:DPtrT) : EPtrT(conv(type(d)))
        (d:DFnT) : EFnT(conv(a(d)), conv(r(d)), conv(b(d)))
        (d:DStructT) : EStructT(type-ids[id(d)])
        (d:DOf) : EOf(type-ids[id(d)])
        (d:DTVar) : targs[index(d)]
        (d:DAnd) : reduce(EAnd, seq(conv, types(d)))
        (d:DOr) : reduce(EOr, seq(conv, types(d)))
        (d:DTop) : ETop()
        (d:DBot) : EBot()
    conv(d)

  new DTypeTable :
    defmethod to-etype (this, d:DType, targs:Tuple<EType>) :
      to-etype(d, targs)

;============================================================
;======================== VarTable ==========================
;============================================================

;For representing entries to declared functions
deftype FnEntry
defstruct EFnEntry <: FnEntry :
  targs: Tuple<Int>
  a1: Tuple<EType>
  a2: EType
defstruct DFnEntry <: FnEntry :
  ntargs: Int
  a1: Tuple<DType>
  a2: DType
defstruct EMultifnEntry <: FnEntry :
  funcs: Tuple<EFnEntry>

;For representing entries to declared variables
defstruct VarEntry :
  mutable?: True|False
  type: EType|DType

deftype VarTable

;General queries
defmulti function? (vt:VarTable, n:Int) -> True|False
defmulti variable? (vt:VarTable, n:Int) -> True|False
defmulti global? (vt:VarTable, n:Int) -> True|False

;Queries for variables
defmulti mutable? (vt:VarTable, n:Int) -> True|False
defmulti type (vt:VarTable, n:Int) -> EType

;Queries for functions
defmulti arity (vt:VarTable, n:Int) -> Int
defmulti fn-types (vt:VarTable, f:EVar|ECurry) -> [Tuple<EType>, EType]

;Private manipulators
defmulti add (vt:VarTable, global?:True|False, n:Int, e:VarEntry|FnEntry) -> False
defmulti copy (dst:VarTable, src:VarTable) -> False
defmulti type-table (vt:VarTable) -> DTypeTable

defn VarTable (type-table:DTypeTable) :
  ;Track all entries for definitions
  val table = IntTable<VarEntry|FnEntry>()
  val global-set = IntSet()

  ;Retrieve the argument and return types of a function
  defn fn-types (f:EVar|ECurry) :
    val [n, targs] = match(f) :
      (f:EVar) : [n(f), []]
      (f:ECurry) : [n(x(f)), targs(f)]

    match(table[n]) :
      (e:DFnEntry) :
        fatal("Incorrect type arity.") when ntargs(e) != length(targs)
        val a1* = for t in a1(e) map :
          to-etype(type-table, t, targs)
        val a2* = to-etype(type-table, a2(e), targs)
        [a1*, a2*]
      (e:EFnEntry) :
        fatal("Incorrect type arity.") when length(/targs(e)) != length(targs)
        val table = to-inttable<EType>(/targs(e), targs)
        val a1* = map(sub-tvars{_, table}, a1(e))
        val a2* = sub-tvars(a2(e), table)
        [a1*, a2*]
      (e:EMultifnEntry) :
        fatal("Unexpected multifn.")

  ;Return the VarTable
  new VarTable :
    defmethod function? (this, n:Int) :
      table[n] is FnEntry
    defmethod variable? (this, n:Int) :
      table[n] is VarEntry
    defmethod global? (this, n:Int) :
      global-set[n]
    defmethod mutable? (this, n:Int) :
      mutable?(table[n] as VarEntry)
    defmethod type (this, n:Int) :
      type(table[n] as VarEntry) as EType
    defmethod arity (this, n:Int) :
      match(table[n]) :
        (e:DFnEntry) : ntargs(e)
        (e:EFnEntry) : length(targs(e))
        (e:EMultifnEntry) : fatal("Unexpected multifn.")
    defmethod fn-types (this, f:EVar|ECurry) :
      fn-types(f)
    defmethod add (this, global?:True|False, n:Int, e:VarEntry|FnEntry) :
      val e* = match(e) :
        (e:VarEntry) :
          match(type(e)) :
            (t:DType) : VarEntry(mutable?(e), to-etype(type-table, t, []))
            (t:EType) : e
        (e) : e
      table[n] = e*
      add(global-set, n) when global?
      false
    defmethod copy (dst:VarTable, this) :
      for e in table do :
        add(dst, global-set[key(e)], key(e), value(e))
    defmethod type-table (this) :
      type-table

defn GlobalVarTable (io:PackageIO, epackage:EPackage) -> VarTable :
  ;Initialize vartable
  val tt = DTypeTable(io)
  val vt = VarTable(tt)

  ;Initialize entries
  for import in imports(io) do :
    match(rec(import)) :
      (r:FnRec|MultiRec|ExternFnRec) :
        val id = id(r) as FnId
        add(vt, true, n(import), DFnEntry(ntargs(id), a1(id), a2(r)))
      (r:ValRec) :
        add(vt, true, n(import), VarEntry(mutable?(r), type(r)))
      (r:ExternRec) :
        add(vt, true, n(import), VarEntry(true, type(r)))
      (r) : false
  for e in exps(epackage) do :
    match(e) :
      (e:EDefn) :
        add(vt, true, n(e), FnEntry(func(e)))
      (e:EDefmulti) :
        add(vt, true, n(e), EFnEntry(targs(e), a1(e), a2(e)))
      (e:EExternFn) :
        add(vt, true, n(e), FnEntry(func(e)))
      (e:EDef) :
        add(vt, true, n(e), VarEntry(mutable?(e), type(e)))
      (e:EExtern) :
        add(vt, true, n(e), VarEntry(true, type(e)))
      (e) : false

  ;Return populated vartable
  vt

defn LocalVarTable (gvt:VarTable, e:ELBigItem) -> VarTable :
  ;Initialize vartable
  val vt = VarTable(type-table(gvt))
  copy(vt, gvt)

  ;Initialize entries
  let loop (e:ELItem = e) :
    match(e) :
      (e:EFn) :
        for (x in args(e), t in a1(e)) do :
          add(vt, false, x, VarEntry(false, t))
      (e:ELocalFn) : add(vt, false, n(e), FnEntry(func(e)))
      (e:ELocal) : add(vt, false, n(e), VarEntry(mutable?(e), type(e)))
      (e) : false
    do(loop, e)

  ;Return the populated table
  vt

defn FnEntry (e:EFunction) :
  match(e) :
    (e:EFn) : EFnEntry(targs(e), a1(e), a2(e))
    (e:EMultifn) : EMultifnEntry(map({FnEntry(_) as EFnEntry}, funcs(e)))

;============================================================
;====================== Utilities ===========================
;============================================================

;Join the sequence of Free structures.
defn join-free (fs:Seqable<Free>) :
  Free(
    to-tuple(unique(seq-cat(vars, fs))),
    to-tuple(unique(seq-cat(tvars, fs))))

;Compute a local var table for each top level definition
defn map-with-var-table (f:(ETExp, VarTable) -> ETExp, gvt:VarTable, epackage:EPackage) :
  val exps* = for e in exps(epackage) map :
    f(e, LocalVarTable(gvt, e))
  sub-exps(epackage, exps*)

;Rename all variables and type variables
defn rename-vars+tvars<?T> (e:ELItem&?T, table:IntTable<Int>) -> T :
  defn rename (e:ELItem) :
    defn f (x:Int) : get?(table, x, x)
    match(map(rename,e)) :
      (e:EVar) : EVar(f(n(e)))
      (e:EVarLoc) : EVarLoc(f(n(e)))
      (e:ETVar) : ETVar(f(n(e)))
      (e:ETVarLoc) : ETVarLoc(f(n(e)))
      (e) : e
  rename(e) as ELItem&T

;Substitute tvars for types
defn sub-tvars (t:EType, table:IntTable<EType>) :
  let loop (t:EType = t) :
    match(t:ETVar) : get?(table, n(t), t)
    else : map(loop, t)

;Type variable removal
defn remove-tvars<?T> (e:ELItem&?T) :
  defn loop (e:ELItem) -> ELItem :
    match(e) :
      (e:ETVar) : ETop()
      (e:ELItem) : map(loop, e)
  loop(e) as ELItem&T

;Check whether type has type variable
defn has-tvar? (t:EType) :
  var tvar? = false
  let loop (t:EType = t) :
    match(t:ETVar) : tvar? = true
    else : do*(loop, t)
  tvar?

public defn group-by<?T,?K,?V> (xkey:T -> ?K&Hashable&Equalable, xval:T -> ?V, xs:Seqable<?T>) :
  val table = HashTable<K,List<V>>(List())
  for x in xs do :
    update(table, cons{xval(x), _}, xkey(x))
  table

public defn group-by<?T,?K> (xkey:T -> ?K&Hashable&Equalable, xs:Seqable<?T>) :
  group-by(xkey, {_}, xs)

public defn select<?T> (xs:Tuple<?T>, mask:Tuple<True|False>) -> Tuple<T> :
  to-tuple(filter(xs, mask))