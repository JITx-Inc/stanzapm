defpackage stz/macro-master :
  import core
  import collections
  import core/dynamic-library
  import stz/fastio-runtime
  import stz/plugin-interface
  import stz/sexp-serializer
  import stz/sexp-checker
  import stz/params
  import stz/verbose

;============================================================
;========================= API ==============================
;============================================================

;Represents a loaded macro plugin.
public deftype MacroPlugin

;Expand the given s-expressions.
public defmulti macroexpand (p:MacroPlugin, form, overlays:List<Symbol>) -> ?

;List the supported syntax packages.
public defmulti syntax-packages (p:MacroPlugin) -> Tuple<Symbol>

;Return the file that the plugin was originally loaded from.
public defmulti filename (p:MacroPlugin) -> String

;============================================================
;==================== Loading a Plugin ======================
;============================================================

;Load a macro plugin from a file.
;- expected-packages: If given, then we check to ensure that the loaded
;  macro contains a superset of the expected packages.
public defn load-macro-plugin (filename:String,
                               expected-packages:Maybe<Tuple<Symbol>>) -> MacroPlugin :
  ;Report macro plugin.
  vprintln("Load macro plugin %~." % [filename])
  
  ;Load the macro dynamic library.
  val lib = load-macro-dylib(filename)

  ;Create the interface for communicating with it.
  val interface = PluginInterface(SExpIO())

  ;Retrieve the packages supported by the macro plugin.
  val supported-packages:Tuple<Symbol> = call-entry(
    interface, lib, "list_syntax_packages", false)

  ;Initialize the compiler flags.
  call-entry(interface, lib, "add_compiler_flags", compiler-flags())

  ;Check that the plugin supports the expected packages.
  if not empty?(expected-packages) :
    val missing = difference(value!(expected-packages), supported-packages)
    if not empty?(missing) :
      throw(UnexpectedPackagesInPlugin(filename, missing))

  ;Create the plugin
  new MacroPlugin :
    defmethod macroexpand (this, form, overlays:List<Symbol>) -> ? :
      check-valid-sexp(form)
      call-entry(interface, lib, "macroexpand", [form, overlays])
    defmethod syntax-packages (this) -> Tuple<Symbol> :
      supported-packages
    defmethod filename (this) :
      filename

;Helper: Return all items in 'xs' that does not exist in 'ys'.
defn difference (xs:Seqable<Symbol>, ys:Seqable<Symbol>) -> Tuple<Symbol> :
  val ys-set = to-hashset<Symbol>(ys)
  to-tuple $ for x in xs filter : not ys-set[x]

;============================================================
;================== Already Loaded Set ======================
;============================================================

;Each entry, PATH => LIB, means that the resolved path PATH
;has already been loaded and we retrieved and initialized
;library LIB.
val LOADED-LIBRARIES = HashTable<String,DynamicLibrary>()

;Load and initialize the given dynamic library.
defn load-macro-dylib (filename:String) -> DynamicLibrary :
  try :
    ;Resolve the full path first.
    val path = resolve-path!(ensure-slash(filename))

    ;Test whether the library has already been loaded.
    match(get?(LOADED-LIBRARIES, path)) :
      ;Case: If the library has already been loaded, then
      ;just return it directly.
      (dylib:DynamicLibrary) :
        dylib
      ;Case: The library hasn't been loaded, so load and
      ;initialize it.
      (f:False) :
        ;Load the library.
        val dylib = dynamic-library-open(path)
        ;Ensure it is a macro plugin by running a simple
        ;handshake function.
        test-validity(dylib)
        ;Initialize the macro.
        call-main(dylib)
        ;And store it into the table.
        LOADED-LIBRARIES[path] = dylib
        dylib        
  catch (e:Exception) :
    throw(ErrorLoadingMacroPlugin(filename, e))

;============================================================
;===================== Ensure Slash =========================
;============================================================

;dlopen treats filenames that contain no slashes separately. If
;a raw name like "gzip" is provided, dlopen will begin a
;sophisticated system-wide search procedure to look for a
;compatible library named "gzip". Instead, we want to support
;only file paths (absolute or relative), so "gzip" should be
;preprocessed into "./gzip". 

defn ensure-slash (filename:String) -> String :
  val has-slash? =
    #if-defined(PLATFORM-WINDOWS) :
      contains?(filename, '/') or contains?(filename, '\\')
    #else :
      contains?(filename, '/')
  if has-slash? : filename
  else : string-join(["./", filename])

;============================================================
;==================== Sanity Handshake ======================
;============================================================

;Test validity of the loaded library.
defn test-validity (lib:DynamicLibrary) -> False :
  val result =
    try :
      val sym = dynamic-library-symbol(lib, "handshake")
      call-handshake(sym)
    catch (e) :
      throw(InvalidMacroPlugin(name(lib)))

  if result != 0xcafebabe :
    throw(InvalidMacroPlugin(name(lib)))

;Call the given handshake function.
lostanza defn call-handshake (sym:ref<DynamicSymbol>) -> ref<Int> :
  val f = sym.address as ptr<(() -> int)>
  val result = call-c [f]()
  return new Int{result}

;============================================================
;======================= Errors =============================
;============================================================

;Abstract type for all macro plugin related errors.
public deftype MacroPluginError <: Exception

;Occurs when the call to dlopen fails.
public defstruct ErrorLoadingMacroPlugin <: MacroPluginError :
  filename: String
  error: Exception

defmethod print (o:OutputStream, e:ErrorLoadingMacroPlugin) :
  print(o, "Failed to load macro plugin from %~:\n%_" % [
    filename(e), Indented(error(e))])

;Occurs when the macro fails to satisfy the sanity
;handshake.
public defstruct InvalidMacroPlugin <: MacroPluginError :
  filename:String

defmethod print (o:OutputStream, e:InvalidMacroPlugin) :
  print(o, "File %~ is not a valid macro plugin." % [filename(e)])

;Occurs when the macro plugin does not support the expected syntax
;packages.
public defstruct UnexpectedPackagesInPlugin <: MacroPluginError :
  filename:String
  missing:Tuple<Symbol>

defmethod print (o:OutputStream, e:UnexpectedPackagesInPlugin) :
  print(o, "The macro plugin %~ is missing syntax packages. It is stated to contain the \
            %_ syntax packages but does not." % [filename(e), quotes(missing(e))])

;Helper: Add quotes and commas around names.
defn quotes (ss:Seqable<Symbol>) -> ? :
  val quoted = for s in ss seq : "'%~'" % [s]
  "%," % [quoted]