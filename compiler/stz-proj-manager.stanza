#use-added-syntax(stz-serializer-lang)
defpackage stz/proj-manager :
  import core
  import collections
  import stz/pkg
  import stz/proj
  import stz/serializer
  import stz/utils  


;<doc>=======================================================
;================= Project Manager Constructor ==============
;============================================================

### Fundamental State ###

saved-pkg-records: Vector<PkgRecord>

This records the saved details of all packages saved out to disk. When
compilation is finished, we use these saved details to update the
auxiliary file.

### Looking for the source file of a package ###

Input: The name of the package

Output: The source file containing the package

Algorithm:

Return the path to the .stanza file.

### Looking for a package ###

Input: The name of the package

Output: The path to the either the .pkg or the .stanza file containing
the package, or false if it cannot be found. The path should be to the
most up-to-date form of the file.

Algorithm:

If we can determine the path to the .stanza file:
  If we can find the .pkg file as well:
    Return the path to the .pkg file if the auxtable tells us that it
    is up-to-date, otherwise return the path to the .stanza file.    
  If we cannot find the .pkg file:
    Just return the path to the .stanza file.
If we cannot determine the path to the .stanza file:
  Return the path to the .pkg file if it can be found, otherwise
  return false.

### Checking whether a package path is up to date ###

Input:

The name of the package.
The path to the source file.
The path to the package file.

Output: 

True or false depending on whether it was up to date.

Algorithm:

Return false if there is no AuxFile, as there are no records. 

Create a proper PkgRecord entry, and then determine whether it exists
in the AuxFile records.

### Saving a Package ###

Input:

The Pkg object corresponding to the package.
The source file it was compiled from.
The timestamp of the source file.

Algorithm:

Use the directory specified in the BuildParams to find the directory
where the pkg should be saved.

After the pkg is saved, record its package record, so that the new Aux
entries may be written out.

### Collecting Build Parameters ###

Input:

The names of the compiled packages.

Output:

The files to pass to the C compiler.
The flags to pass to the C compiler.

;============================================================
;=======================================================<doc>

public deftype ProjManager
public defmulti source-file? (l:ProjManager, name:Symbol) -> String|False
public defmulti find-package (l:ProjManager, name:Symbol) -> String|False
public defmulti save-package (l:ProjManager, pkg:Pkg, src-file:String, src-timestamp:Long) -> False
public defmulti updated-aux-file (l:ProjManager) -> AuxFile
public defmulti dependencies (l:ProjManager, packages:Seqable<Symbol>) -> ProjDependencies

public defn ProjManager (proj:ProjFile,
                         auxfile:AuxFile|False,
                         params:ProjParams) :
  ;State
  val saved-pkg-records = Vector<PkgRecord>()
 
  ;Build source file table
  val source-file-table = to-hashtable<Symbol,String> $
    for s in filter-by<DefinedInStmt>(stmts(proj)) seq :
      package(s) => filename(s)

  ;Build dependency table
  val dependency-table = to-hashtable<Symbol,ProjDependencies> $
    for s in filter-by<RequiresStmt>(stmts(proj)) seq :
      package(s) => ProjDependencies(ccfiles(s), ccflags(s))

  ;Find a package
  defn find-package (name:Symbol) :
    val pkg-path = find-pkg(name, optimize?(params))    
    if key?(source-file-table, name) :
      val src-path = source-file-table[name]
      if pkg-path is String and up-to-date?(name, src-path, pkg-path as String) :
        pkg-path
      else : 
        src-path
    else :
      pkg-path

  ;Is a path up-to-date?
  defn up-to-date? (name:Symbol, src:String, pkg:String) :
    match(auxfile:AuxFile) :
      val pkg-filename = resolve-path(pkg) as String
      val src-filename = resolve-path(src) as String
      val pkg-timestamp = time-modified(pkg-filename)
      val src-timestamp = time-modified(src-filename)
      val rec = PkgRecord(name,
                          pkg-filename, pkg-timestamp,
                          src-filename, src-timestamp,
                          flags(params), optimize?(params))
      contains?(filter-by<PkgRecord>(records(auxfile)), rec)

  ;Saving a package
  defn save-package (pkg:Pkg, src-filename:String, src-timestamp:Long) :
    val dir = pkg-dir(params) as String
    val pkg-filename = resolve-path(/save-package(dir, pkg)) as String
    val pkg-timestamp = time-modified(pkg-filename)
    val rec = PkgRecord(name(pkg),
                        pkg-filename, pkg-timestamp,
                        src-filename, src-timestamp,
                        flags(params), optimize?(params))
    add(saved-pkg-records, rec)                    

  ;Retrieving the collection of dependencies
  defn dependencies (packages:Seqable<Symbol>) :
    val ccfiles = Vector<String>()
    val ccflags = Vector<String>()
    for name in packages do :
      val ds = get?(dependency-table, name)
      match(ds:ProjDependencies) :
        add-all(ccfiles, /ccfiles(ds))
        add-all(ccflags, /ccflags(ds))
    remove-duplicates!(ccfiles)
    remove-duplicates!(ccflags)
    ProjDependencies(to-tuple(ccfiles), to-tuple(ccflags))

  ;Return new project manager
  new ProjManager :
    defmethod find-package (this, name:Symbol) -> String|False :
      find-package(name)
    defmethod source-file? (this, name:Symbol) -> String|False :
      get?(source-file-table, name)
    defmethod save-package (this, pkg:Pkg, src-filename:String, src-timestamp:Long) :
      save-package(pkg, src-filename, src-timestamp)
    defmethod updated-aux-file (this) :
      update-aux-file(auxfile, saved-pkg-records)
    defmethod dependencies (this, packages:Seqable<Symbol>) :
      dependencies(packages)

;============================================================
;================ Project Configuration =====================
;============================================================

public defstruct ProjParams :
  flags: Tuple<Symbol>
  optimize?: True|False
  pkg-dir: String|False

public defstruct ProjDependencies :
  ccfiles: Tuple<String>
  ccflags: Tuple<String>

;============================================================
;==================== Auxiliary Records =====================
;============================================================

defstruct AuxFile :
  records: Tuple<AuxRecord>

deftype AuxRecord

defstruct PkgRecord <: AuxRecord & Hashable & Equalable :
  package: Symbol
  filename: String
  timestamp: Long
  source: String
  source-timestamp: Long
  flags: Tuple<Symbol>
  optimize?: True|False
with:
  constructor => #PkgRecord

defn PkgRecord (package:Symbol, filename:String, timestamp:Long,
                source:String, source-timestamp:Long,
                flags:Tuple<Symbol>, optimize?:True|False) :
  #PkgRecord(package, filename, timestamp,
             source, source-timestamp,
             qsort(flags), optimize?)

;------------------------------------------------------------
;------------------ Hashing and Equality --------------------
;------------------------------------------------------------

defn key (r:PkgRecord) :
  [package(r), filename(r), timestamp(r),
   source(r), source-timestamp(r), flags(r), optimize?(r)]

defmethod equal? (a:PkgRecord, b:PkgRecord) : key(a) == key(b)
defmethod hash (r:PkgRecord) : hash $ key(r)

;============================================================
;=================== Updating ===============================
;============================================================

defn update-aux-file (file:AuxFile|False, records:Collection<AuxRecord>) :
  match(file:AuxFile) :
    val records* = to-tuple(cat(/records(file), records))
    AuxFile(records*)
  else :
    AuxFile(to-tuple(records))

;============================================================
;==================== Printing ==============================
;============================================================

defmethod print (o:OutputStream, f:AuxFile) :
  print(o, "auxfile :")
  val o2 = IndentedStream(o)
  do(lnprint{o2, _}, records(f))

defmethod print (o:OutputStream, r:PkgRecord) :
  print(o, "package %~ at %~ (%_) defined-in %~ (%_) with flags (%@) using optimize %_" % [
    package(r), filename(r), timestamp(r), source(r), source-timestamp(r), flags(r), optimize?(r)])

;============================================================
;=================== Aux Serializer =========================
;============================================================

public defn write-aux-file (name:String, auxfile:AuxFile) :
  val f = FileOutputStream(name)
  try : serialize(f, auxfile)
  finally : close(f)

public defn read-aux-file (name:String) -> AuxFile :
  val f = FileInputStream(name)
  try : deserialize-auxfile(f)
  finally : close(f)

public defn read-aux-file? (name:String) -> AuxFile|False :
  read-aux-file(name) when file-exists?(name)

defserializer (out:FileOutputStream, in:FileInputStream) :

  ;----------------------------------------------------------
  ;--------------------- Records ----------------------------
  ;----------------------------------------------------------
  defunion auxfile (AuxFile) :
    AuxFile: (records:tuple(auxrecord))

  defunion auxrecord (AuxRecord) :
    PkgRecord: (package:symbol, filename:string, timestamp:long, source:string,
                source-timestamp:long, flags:tuple(symbol), optimize?:bool)

  ;----------------------------------------------------------
  ;-------------------- Combinators -------------------------
  ;----------------------------------------------------------
  
  reader defn read-tuple<?T> (f: () -> ?T) :
    val n = read-int()
    to-tuple(repeatedly(f, n))

  writer defn write-tuple<?T> (f: T -> False, xs:Tuple<?T>) :
    write-int(length(xs))
    do(f, xs)

  ;----------------------------------------------------------
  ;----------------------- Atoms ----------------------------
  ;----------------------------------------------------------
  defatom bool (x:True|False) :
    writer :
      match(x) :
        (x:True) : put(out, 1Y)
        (x:False) : put(out, 0Y)
    reader :
      switch(get-byte(in)) :
        1Y : true
        0Y : false
        else : throw(DeserializeException())
  
  defatom int (x:Int) :
    writer :
      put(out, x)
    reader :
      match(get-int(in)) :
        (x:Int) : x
        (x:False) : throw(DeserializeException())

  defatom long (x:Long) :
    writer :
      put(out, x)
    reader :
      match(get-long(in)) :
        (x:Long) : x
        (x:False) : throw(DeserializeException())

  defatom string (x:String) :
    writer :
      write-int(length(x))
      print(out, x)
    reader :
      val n = read-int()
      String(repeatedly(read-char, n))

  defatom symbol (x:Symbol) :
    writer :
      write-string(to-string(x))
    reader :
      to-symbol(read-string())

  defatom char (x:Char) :
    writer :
      print(out, x)
    reader :
      match(get-char(in)) :
        (x:Char) : x
        (x:False) : throw(DeserializeException())