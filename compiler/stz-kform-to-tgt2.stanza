defpackage stz/kform-to-tgt2 :
  import core
  import collections
  import stz/kl2-ir
  import stz/pl-ir
  import stz/tgt-ir
  import stz/tgt-utils
  import stz/tl-ir with :
    prefix(CExp, CLSExp) => TL
  import stz/ids
  import stz/khier
  import stz/primitives
  import stz/utils
  import stz/dec-table2

;============================================================
;================= Expression Compilation ===================
;============================================================

;======================================
;===== Compiled Expression System =====
;======================================
;Minimum implementation: set, ignore, types
;Custom return behaviour: implement return

deftype CExp
defmulti set (ns:List<Int>, c:CExp) -> False
defmulti ignore (c:CExp) -> False
defmulti types (c:CExp) -> List<TGType>
defmulti return (c:CExp, tail?:True|False) -> False
defmulti imms (c:CExp) -> List<TGImm>

;Default implementation of imms defined in terms of set
defmethod imms (c:CExp) :
  val ts = types(c)
  val ns = map(fresh-id{}, ts)
  do(emit{TGDef(_, _)}, ns, ts)
  set(ns, c)
  map(TGVar, ns)

;Default implementation of return in terms of imms
defmethod return (c:CExp, tail?:True|False) :
  emit(TGReturn(imms(c)))

;Convenience functions
defn imm (c:CExp) :
  val xs = imms(c)
  fatal("Not a single immediate.") when length(xs) != 1
  head(xs)

defn set (n:Int, c:CExp) :
  set(List(n), c)

;======================
;===== Immediates =====
;======================
;Minimum implementation: imms, ignore, types
deftype CImm <: CExp

defmethod set (ns:List<Int>, c:CImm) :
  for (n in ns, x in imms(c)) do :
    emit(TGSet(TGVar(n), x))

;======================
;===== Ignorables =====
;======================
;Implements: ignore

deftype Ignorable
defmethod ignore (c:CExp&Ignorable) : false

;===========================================
;===== Compiled Body Expression System =====
;===========================================
;Minimum implementation: body

;Compile the environment and then return the compiled body
deftype CBody <: CExp
defmulti body (c:CBody) -> CExp 

defmethod set (ns:List<Int>, c:CBody) : set(ns, body(c))
defmethod ignore (c:CBody) : ignore(body(c))
defmethod return (c:CBody, tail?:True|False) : return(body(c), tail?)
defmethod types (c:CBody) : types(body(c))
defmethod imms (c:CBody) : imms(body(c))

;=============================================
;===== Compiled Bodies Expression System =====
;=============================================
;Minimum implementation: compile, types

deftype CBodies <: CExp
defmulti compile (c:CBodies, kont: CExp -> False, end?:True|False) -> False

defmethod set (ns:List<Int>, c:CBodies) : compile(c, set{ns, _}, false)
defmethod ignore (c:CBodies) : compile(c, ignore, false)
defmethod return (c:CBodies, tail?:True|False) : compile(c, return{_, tail?}, true)

;====================================
;===== Compiled Location System =====
;====================================
deftype CLoc
defstruct PtrLoc <: CLoc :
  base: CExp
  offset: Int
defstruct VarLoc <: CLoc :
  n: Int
  index: Int
defstruct ExpLoc <: CLoc :
  base: CExp
  index: Int

;====================
;===== Compiler =====
;====================

defn Compiler (dec-table:DecTable) :
  defn cexp (e:KExp) -> CExp :
    match(e) :
      (e:KLet) : (n:Int, value:KExp, body:KExp)
      (e:KLetVar) : (n:Int, type:KType, value:False|KExp, body:KExp)
      (e:KLetRec) : (ns:List<Int>, values:List<KExp>, body:KExp)
      (e:KVar) : (n:Int)
      (e:KSet) : (exp:KExp, type:KType, value:KExp)
      (e:KNew) : (type:KType, name:String, methods:List<KExp>, info:False|FileInfo)
      (e:KTuple) : (exps:List<KExp>, info:False|FileInfo)
      (e:KTupleGet) : (exp:KExp, index:Int)
      (e:KEnsureLength) : (exp:KExp, length:Int, info:False|FileInfo)
      (e:KObject) : (n:Int, args:List<KExp>, info:False|FileInfo)
      (e:KArray) : (n:Int, length:KExp, args:List<KExp>, info:False|FileInfo)
      (e:KStruct) : (n:Int, args:List<KExp>)
      (e:KPtr) : (loc:KExp)
      (e:KDo) : (func:KExp, args:List<KExp>, type:KType, info:False|FileInfo)
      (e:KDoC) : (func:KExp, args:List<KExp>, varargs:List<KExp>, type:KType)
      (e:KLSLiteral) : (value:?)
      (e:KLiteral) : (value:?)
      (e:KMix) : (exps:List<KExp>)
      (e:KCurry) : (n:Int, targs:List<KType>)
      (e:KInterpret) : (exp:KExp, type:KType)
      (e:KCheck) : (exp:KExp, type:KType, option:Int, info:False|FileInfo)
      (e:KConv) : (exp:KExp, type:KType)
      (e:KAndExp) : (a:KExp, b:KExp)
      (e:KOrExp) : (a:KExp, b:KExp)
      (e:KPrim) : (op:LSPrimitive|Primitive, args:List<KExp>)
      (e:KSizeof) : (type:KType)
      (e:KTagof) : (n:Int)
      (e:KMatch) : (args:List<KExp>, branches:List<KExp>, info:False|FileInfo)    
      (e:KBranch) : (args:List<Int>, types:List<KType>, body:KExp)
      (e:KLabels) : (blocks:List<KExp>)
      (e:KBlock) : (n:Int, args:List<Int>, types:List<KType>, body:KExp)
      (e:KIf) : (pred:KExp, conseq:KExp, alt:KExp)
      (e:KSeq) : (a:KExp, b:KExp)
      (e:KGoto) : (n:Int, args:List<KExp>)
      (e:KReturn) : (exp:KExp)
      (e:KDeref) : (exp:KExp)
      (e:KDeptr) : (exp:KExp)
      (e:KField) : (exp:KExp, n:Int)
      (e:KSlot) : (exp:KExp, index:KExp, type:KType)
      (e:KFn) : (tail?:True|False, stack-properties:StackProperties, targs:List<Int>,
          a1:List<KType>, a2:KType, args:List<Int>, body:KExp, info:False|FileInfo, stats:False|KFnStat)
      (e:KMultifn) : (funcs:List<KExp>)
      (e:KMethod) : (multi:Int, thisn:Int, value:KExp)

      ;Working Expressions
      (e:KDispatch) : (args:List<KExp>, branches:List<KExp>, info:False|FileInfo)
      (e:KEnsureSet) : (exp:KExp, info:False|FileInfo)
      (e:KNewObject) : (n:Int, targs:List<KType>, args:List<KExp>, info:False|FileInfo)
      (e:KObjectGet) : (object:KExp, index:Int)
      (e:KObjectTGet) : (object:KExp, index:Int)    
      (e:KLetType) : (n:Int, value:KExp, body:KExp)
      (e:KBox) : (exp:False|KExp)
      (e:KBoxGet) : (exp:KExp)
      (e:KBoxSet) : (exp:KExp, value:KExp)
      (e:KClosure) : (n:Int, targs:List<KType>, args:List<KExp>, info:False|FileInfo)
      (e:KTagPrim) : (n:Int, exp:KExp)
      (e:KDetagPrim) : (n:Int, exp:KExp)
