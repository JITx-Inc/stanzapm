defpackage stz/stitcher :
  import core
  import collections
  import stz/asm-ir
  import stz/codegen
  import stz/dl-ir
  import stz/vm-ir
  import stz/utils
  import stz/padder

;<DOC>=======================================================
;===================== Documentation ========================
;============================================================

Input:
  Functions compiled into ASM IR.  
Output:
  Pure ASM IR

Constructs that are removed:
  TagImm
  StackMap
  LinkId
  Match
  Dispatch
  MethodDispatch

Removal strategies for each construct:
  TagImm:
    Becomes integer immediates.
    Requires each class to have an integer tag assigned to it.
    If it is a marker, then becomes (tag << 3) + marker-ref-bits.
    If it is not a marker, then becomes tag.
  StackMap:
    Becomes an integer immediate.
    Requires every unique stackmap to have an integer id assigned to it.
    Output the id.
  LinkId:
    The linkids can refer to one of the following:
      CodeId:
        Becomes a Mem immediate referencing the starting label of the function.
        Requires all functions to have a unique label assigned to it.
      ExternId:
        Becomes an ExMem immediate referencing the external label of the variable.
      ExternDefnId:
        Becomes an ExMem immediate referencing the external label of the function.
      DataId:
        Becomes a Mem immediate referencing the label of the data packet.
      GlobalId:
        Becomes a Mem immediate referencing the global constant pool table, with
        the appropriate offset. 
      ConstId:
        Becomes a Mem immediate referencing the global constant pool table, with
        the appropriate offset.
        Requires constants to be interned and assigned indices. 
  Match, Dispatch:
    Requires the class hierarchy to be indexed.
    Convert the branches into a trie and then emit the instructions
    for performing the branching.
  MethodDispatch:
    Requires the class hierarchy to be indexed.
    Requires the method branches for each multi to be collected.
    Convert the branches into a trie and then emit the instructions
    for performing the branching.

Implementation of Global Table:
Input:
  Sequence of VMGlobals:
    defstruct VMGlobal :
      id: Int
      size: Int
      roots: Tuple<Int>
Output:
  For each global:
    Compute an offset.
  Compute the reference mask.
  Compute the number of words in the mask.

;============================================================
;=======================================================<DOC>

;============================================================
;=================== StitcherEmitter ========================
;============================================================

public deftype Stitcher
public defmulti emit-tables (s:Stitcher, emitter:CodeEmitter) -> False
public defmulti emitter (s:Stitcher, package:Symbol, emitter:CodeEmitter) -> CodeEmitter

;============================================================
;=============== Create the Stitcher Tables =================
;============================================================

deftype PackageIds
defmulti resolve (ids:PackageIds, x:LinkId) -> Imm
defmulti global-id (ids:PackageIds, lid:Int) -> Int

public defn Stitcher (vmpackages:Seqable<VMPackage>, stubs:AsmStubs) :
  ;Records
  val global-records = Vector<Rec>()
  val global-props = Vector<GProps|False>()
  val id-indices = HashTable<RecId,Int>()
  val package-ids = HashTable<Symbol,PackageIds>()

  ;Add a new global record
  defn add-global-record (r:Rec) -> Int :
    add(global-records, r)
    add(global-props, false)
    val global-id = length(global-records)
    id-indices[id(r)] = global-id
    global-id

  ;Retrieve the global id for a given RecId
  defn get-global-id (id:RecId) :
    id-indices[id]

  ;Create a PackageIds struct
  defn PackageIds (local-ids:IntTable<Int>) :
    new PackageIds :
      defmethod global-id (this, lid:Int) :
        local-ids[lid]
      defmethod resolve (this, x:LinkId) :
        val props = global-props[local-ids[id(x)]]
        match(props) :
          (p:CodeProps) :
            Mem(lbl(p), 0)
          (p:ExternProps) :
            ExMem(exlbl(p), 0)
          (p:ExternDefnProps) :
            ExMem(exlbl(p), 0)
          (p:DataProps) :
            Mem(lbl(p), 0)
          (p:ConstProps) :
            Mem(const-table(stubs), index(p) * 8)

  ;Initialize record tables
  defn initialize-record-tables () :
    ;Accumulate initializers to run after we populate
    ;exported records.
    val initializers = Vector<(() -> ?)>()
    defn initialize (f:() -> ?) :
      add(initializers, f)      

    ;Initialize package ids
    for packageio in seq(packageio, vmpackages) do :
      val local-ids = IntTable<Int>()
      for e in exports(packageio) do :
        local-ids[n(e)] = add-global-record(rec(e))
      within initialize() :
        for i in imports(packageio) do :
          local-ids[n(i)] = get-global-id(id(rec(i)))
      package-ids[package(packageio)] = PackageIds(local-ids)
        
    ;Run initializers
    for init in initializers do :
      init()

  ;Initialize global tables
  
  ;Global table
  var total-global-size:Int
  val global-roots = Vector<Int>()
  defn initialize-global-table () :
    for p in vmpackages do :
      val pkgids = package-ids[package(p)]
      defn global-alignment (g:VMGlobal) :
        if size(g) >= 8 : 8
        else : size(g)
      val [padded-globals, _] = pad(global-alignment, size, globals(p), 8)
      val offset-counter = Counter(0)
      for g in padded-globals do :
        match(g) :
          (g:Padding) :
            next(offset-counter, size(g))
          (g:VMGlobal) :
            val offset = next(offset-counter, size(g))
            val gid = global-id(pkgids, id(g))
            global-props[gid] = GlobalProps(offset)
            for r in roots(g) do :
              fatal("Unaligned global reference") when offset % 8 != 0
              add(global-roots, offset / 8 + r)
      total-global-size = value(offset-counter)

  defn initialize-const-table () :
    println("Intern and compute const indices")

  ;Initialize record tables
  initialize-record-tables()
  initialize-global-table()
  initialize-const-table()

  ;Return new Stitcher
  new Stitcher
  
deftype GProps
defstruct CodeProps <: GProps :
  lbl:Int
defstruct ExternProps <: GProps :
  exlbl:Symbol
defstruct ExternDefnProps <: GProps :
  exlbl:Symbol
defstruct GlobalProps <: GProps :
  offset: Int
defstruct DataProps <: GProps :
  lbl:Int
defstruct ConstProps <: GProps :
  index:Int
