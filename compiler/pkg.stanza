;See License.txt for details about licensing

defpackage stz/pkg :
  import core
  import core/sha256
  import collections
  import stz/algorithms
  import stz/params
  import stz/utils
  import stz/typeset
  import stz/asm-ir with :
    prefix(AddOp, SubOp, MulOp, DivOp, ModOp, AndOp, OrOp, XorOp, ShlOp,
           ShrOp, AshrOp, EqOp, NeOp, LtOp, GtOp, LeOp, GeOp, UleOp,
           UltOp, UgtOp, UgeOp, NotOp, NegOp, DivModOp, BitSetOp, BitNotSetOp, LowestZeroBitCountOp,
           TestBitOp, TestAndSetBitOp, TestAndClearBitOp, SetBitOp, ClearBitOp,
           TypeofOp, XchgIns, SetIns, ConvertIns, InterpretIns, UnaOp, BinOp, VoidBinOp,
           DualOp, Load, Store, Call, Return, Goto, Break, Label, LinkLabel,
           ExLabel, Match, Dispatch, MethodDispatch, DefData, DefText, DefDirectives, DefExportLabel, DefByte,
           DefInt, DefLong, DefFloat, DefDouble, DefString, DefBytes, DefSpace, DefLabel, Comment) => asm-
  import stz/visibility
  import stz/dl-ir
  import stz/basic-ops
  import stz/vm-ir
  import stz/el-ir
  import core/parsed-path
  import core/stack-trace
  import stz/pkg-ir
  import stz/timing-log-api
  import stz/fastio-errors
  import stz/pkg-errors
  import stz/pkg-serializer
  import stz/dir-utils
  import stz/package-stamps

;============================================================
;==================== Timers ================================
;============================================================

val READ-PACKAGE = TimerLabel("Read Package")

;============================================================
;=================== Package Saving =========================
;============================================================

;Save the given Pkg into the given directory.
;Returns the path that the file was saved as.
public defn save-package (dir:String, p:Pkg) -> String :
  val filename = pkg-filename(name(p), StandardFilename(p is FastPkg))
  save-package(p, dir, filename)

;Save the given Pkg to the pkg cache with the given caching parameters.
public defn save-package-to-cache (params:CacheParams, p:Pkg) -> String :
  ;Calculate the filename mode from the given Pkg structure.
  val mode = CacheFilename(p is FastPkg, flags(params), repl?(params), debug?(params))
  ;Compute the filename.
  val filename = pkg-filename(name(p), mode)
  save-package(p, dir(params), filename)

;Helper: Serialize the Pkg to dir/filename, and return the
;final path. Throw a PackageWriteException if something goes wrong.
defn save-package (p:Pkg, dir:String, filename:String) -> String :
  val path = to-string(relative-to-dir(parse-path(dir), filename))
  ensure-directory-exists(dir)
  try : serialize-pkg(path, p)
  catch (e:IOException|FastIOError) : throw(PackageWriteException(path))
  path

;============================================================
;================== Package Loading =========================
;============================================================

;Load the .pkg file from the given filename with the
;given properties. 
public defn load-package (filename:String,
                          expected-name:Symbol|False,
                          optimized?:True|False,
                          include-asm?:True|False) -> Pkg :
  ;Sanity check
  if optimized? and not include-asm? :
    fatal("Invalid option: Optimized .pkg files always include asm instructions.")

  ;Log the event duration.
  val event-name = to-string("Read Package: file = %_, expected-name = %_, optimized? = %_" % [
    filename, expected-name, optimized?])
  within log-time(READ-PACKAGE, event-name) :
  
    ;Load in the package
    val pkg =
      try :
        if include-asm? :
          deserialize-pkg(filename)
        else :
          deserialize-repl-pkg(filename)
      catch (e:WrongPkgVersion) :
        throw(sub-filename(e, filename))
      catch (e:FastIOError|IOException) :
        throw(PackageReadException(filename))

    ;Ensure that name and optimization levels match expected.
    match(expected-name:Symbol) :
      ensure-expected-name!(pkg, filename, expected-name)
    ensure-expected-optimization!(pkg, filename, optimized?)
    
    ;Return the pkg
    pkg

;Helper: Throw an exception if name of the 'pkg' does not match
;the given expected name.
defn ensure-expected-name! (pkg:Pkg, filename:String, name:Symbol) :
  if /name(pkg) != name :
    throw(WrongPackageNameException(filename, name, /name(pkg)))

;Helper: Throw an exception if the pkg does not match the
;expected optimization level.
defn ensure-expected-optimization! (pkg:Pkg, filename:String, optimized?:True|False) :
  val pkg-optimized? = pkg is FastPkg
  if pkg-optimized? != optimized? :
    throw(WrongPackageOptimization(name(pkg), filename, pkg-optimized?, optimized?))  

;============================================================
;===================== Pkg Search ===========================
;============================================================

;Forcibly find the path to the given .pkg file.
;If the pkg-cache is enabled, then its parameters must be provided.
public defn find-pkg! (name:Symbol,
                       optimized?:True|False --
                       cache-params:CacheParams|False = false) -> PkgFile :
  val pkg-file = find-pkg(name, optimized?)
  match(pkg-file:PkgFile) : pkg-file
  else : throw(NoPackageException(name))

;Find the path to the given .pkg file.
;If the pkg-cache is enabled, then its parameters must be provided.
public defn find-pkg (name:Symbol,
                      optimized?:True|False --
                      cache-params:CacheParams|False = false) -> PkgFile|False :

  label<PkgFile|False> return :
  
    ;Immediately return 'path' if a file exists at that path.
    defn check-file (path:String, FileType:String -> PkgFile) -> False :
      return(FileType(path)) when file-exists?(path)

    ;Search for the package mangled with the given mode in the given
    ;directory and return immediately if it is in that directory.
    defn check-dir (dir:String, mode:FilenameMode, FileType:String -> PkgFile) -> False :
      val filename = pkg-filename(name, mode)
      val path = to-string(relative-to-dir(parse-path(dir), filename))
      check-file(path, FileType)

    ;If the pkg cache is enabled, then first look inside there.
    match(cache-params:CacheParams) :
    
      ;First check under the given cache mode.
      val mode = CacheFilename(optimized?, flags(cache-params), repl?(cache-params), debug?(cache-params))
      check-dir(dir(cache-params), mode, PkgCache)

      ;Then specifically if it is for the REPL, additionally check the
      ;non-repl version since it can also be used.
      if repl?(cache-params) :
        val non-repl-mode = CacheFilename(optimized?, flags(cache-params), false, debug?(cache-params))
        check-dir(dir(cache-params), non-repl-mode, PkgCache)
      
    ;Then check the normal folders.
    val std-mode = StandardFilename(optimized?)
    do(check-dir{_, std-mode, PkgDir}, STANZA-PKG-DIRS)
    check-dir(system-filepath(StanzaPkgsDir), std-mode, PkgDir)

;============================================================
;======================= Cache Params =======================
;============================================================

;If we are using the pkg cache, then we must supply
;the parameters for it.
;- flags: The active compilation flags.
;- dir: The directory of the pkg cache.
public defstruct CacheParams:
  flags:Tuple<Symbol>
  dir:String
  repl?:True|False
  debug?:True|False

;============================================================
;===================== Pkg FileNames ========================
;============================================================

;This section controls the on-disk filename for the output
;.pkg files. There are multiple modes because depending on
;the type of cache we are using the filename changes.

;Represents the mode to use for calculating the name
;of the .pkg file.
public deftype FilenameMode

;Returns true if the .pkg is stored in optimized mode.
public defmulti optimized? (mode:FilenameMode) -> True|False

;Standard .pkg filenaming. Does not go through the cache.
public defstruct StandardFilename <: FilenameMode :
  optimized?:True|False with: (as-method => true)

;Hashed filenaming for use with the cache.
;- flags: The active compilation flags.
;- repl?: True if this is a .pkg for use only in the REPL. 
public defstruct CacheFilename <: FilenameMode :
  optimized?:True|False with: (as-method => true)
  flags:Tuple<Symbol>
  repl?:True|False
  debug?:True|False
with:
  printer => true
  constructor => #CacheFilename

;Normalizing constructor: Keep the compilation flags sorted.
public defn CacheFilename (optimized?:True|False,
                           flags:Tuple<Symbol>,
                           repl?:True|False,
                           debug?:True|False) -> CacheFilename :
  CacheFilename(optimized?, qsort(to-string, flags), repl?, debug?)

;Return the on-disk name of the .pkg file.
public defn pkg-filename (name:Symbol,
                          mode:FilenameMode) -> String :
  match(mode) :
    (mode:StandardFilename) :
      val extension = ".fpkg" when optimized?(mode) else ".pkg"
      mangle-as-filename(name, suffix = extension)      
    (mode:CacheFilename) :
      val extension = ".fpkg" when optimized?(mode) else ".pkg"
      val hashstring = hash-string(mode)
      val suffix = to-string("_%_%_" % [hashstring, extension])
      mangle-as-filename(name, suffix = suffix)

;------------------------------------------------------------
;---------- Hashing the CacheFilename Parameters ------------
;------------------------------------------------------------

;Compute the hash string to use under the given cache parameters.
defn hash-string (mode:CacheFilename) -> String :
  val buffer = StringBuffer()
  for flag in flags(mode) do :
    print(buffer, "(%_)" % [flag])
  if repl?(mode) :
    print(buffer, "[REPL]")
  if debug?(mode) :
    print(buffer, "[DEBUG]")
  buffer $> to-bytearray
         $> sha256-hash
         $> to-hex
