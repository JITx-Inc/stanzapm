defpackage stz/proj :
  import core
  import collections
  import reader

;============================================================
;================== Stanza Project File =====================
;============================================================

public defstruct ProjFile :
  stmts: Tuple<ProjStmt>
with: (printer => true)

public deftype ProjStmt

public defstruct DefinedInStmt <: ProjStmt :
  package: Symbol
  filename: String
with: (printer => true)

public defstruct RequiresStmt <: ProjStmt :
  package: Symbol
  ccfiles: Tuple<String>
  ccflags: Tuple<String>
with: (printer => true)

public defstruct ImportWhenStmt <: ProjStmt :
  package: Symbol
  dependencies: Tuple<Symbol>
with: (printer => true)

public defstruct VMBindingsStmt <: ProjStmt :
  filename: String
  inputs: Tuple<String|Symbol>
with: (printer => true)

public defstruct BuildStmt <: ProjStmt :
  name: Symbol
  inputs: Tuple<String|Symbol>
  pkg: Maybe<String>
  output: Maybe<String>
  assembly: Maybe<String>
  platform: Maybe<Symbol>
  ccfiles: Tuple<String>
  ccflags: Tuple<String>
  flags: Tuple<String>
  extend: True|False
  optimize: True|False
with: (printer => true)

;============================================================
;==================== Staged AST ============================
;============================================================
public defstruct ProjFileS0 :
  path: String
  stmts: Tuple<ProjStmt>
with:
  printer => true

public defmulti info (s:ProjStmt) -> FileInfo|False

public defstruct IncludeStmtS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  path: String
with: (printer => true)

public defstruct IncludedStmtsS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  path: String
  stmts: Tuple<ProjStmt>
with: (printer => true)

public defstruct DefinedInStmtS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  package: Symbol
  filename: String
with: (printer => true)

public defstruct RequiresStmtS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  package: Symbol
  ccfiles: Maybe<ProjValue>
  ccflags: Maybe<ProjValue>
with: (printer => true)

public defstruct ImportWhenStmtS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  package: Symbol
  dependencies: Tuple<Symbol>
with: (printer => true)

public defstruct VMBindingsStmtS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  filename: String
  inputs: Tuple<String|Symbol>
with: (printer => true)

public defstruct BuildStmtS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  name: Symbol
  inputs: ProjValue
  pkg: Maybe<ProjValue>
  output: Maybe<ProjValue>
  assembly: Maybe<ProjValue>
  platform: Maybe<ProjValue>
  ccfiles: Maybe<ProjValue>
  ccflags: Maybe<ProjValue>
  flags: Maybe<ProjValue>
  extend: True|False
  optimize: True|False
with: (printer => true)

;------------------------------------------------------------
;--------------------- Values -------------------------------
;------------------------------------------------------------

deftype ProjValue
defmulti info (s:ProjValue) -> FileInfo|False

defstruct AtomValue <: ProjValue :
  info: FileInfo|False with: (as-method => true)
  value: String|Symbol
with: (printer => true)
defstruct ProjValues <: ProjValue :
  info: FileInfo|False with: (as-method => true)
  values: Tuple<ProjValue>
with: (printer => true)
defstruct CondPlatform <: ProjValue :
  info: FileInfo|False with: (as-method => true)
  values: Tuple<KeyValue<Symbol,ProjValue>>
with: (printer => true)

;============================================================
;======================= Reader =============================
;============================================================
defn read-raw-proj-file (filename:String) :
  val forms = read-file(filename)
  val stmts = parse-syntax[stanza-projfile / #projstmt! ...](forms)
  ProjFileS0(filename, to-tuple(stmts))

;============================================================
;================= Project File Syntax ======================
;============================================================

defsyntax stanza-projfile :

  ;----------------------------------------------------------
  ;------------------- Main Productions ---------------------
  ;----------------------------------------------------------
  defproduction projstmt : ProjStmt
  defproduction projvalue: ProjValue

  defrule projstmt = (include ?path:#string!) :
    IncludeStmtS0(closest-info(), path)

  defrule projstmt = (package ?package:#symbol! defined-in ?filename:#string!) :
    DefinedInStmtS0(closest-info(), package, filename)

  defrule projstmt = (package ?package:#symbol! requires #:! (?rs:#require! ...)) :
    RequiresStmtS0(closest-info(), package, entry?(rs, `ccfiles), entry?(rs, `ccflags))

  defrule projstmt = (import ?package:#symbol! when-imported (?deps:#symbol! ...)) :
    ImportWhenStmtS0(closest-info(), package, to-tuple(deps))

  defrule projstmt = (vmbindings ?filename:#string! generated-from #:! (?inputs:#symbol-or-string! ...)) :
    VMBindingsStmtS0(closest-info(), filename, to-tuple(inputs))

  defrule projstmt = (?extend?:#build-tag ?name:#symbol! #:! (?bs:#build-option! ...)) :
    within add-proj-file-info(closest-info()) :
      BuildStmtS0(closest-info(),
                name,
                entry!(bs, `inputs),
                entry?(bs, `pkg),
                entry?(bs, `o)
                entry?(bs, `s)
                entry?(bs, `platform)
                entry?(bs, `ccfiles)
                entry?(bs, `ccflags)
                entry?(bs, `flags)
                extend?
                entry?(bs, `optimize, false))

  defproduction build-tag: True|False
  defrule build-tag = (build) : false
  defrule build-tag = (extend) : true

  defrule projvalue = (on-platform #:! (?es:#platform-entry! ...)) :
    CondPlatform(closest-info(), to-tuple(es))
  defproduction platform-entry! : KeyValue<Symbol,ProjValue>
  defrule platform-entry! = (?platform:#symbol! #:! ?v:#projvalue!) : platform => v
  
  defrule projvalue = ((?v0:#projvalue ?vs:#projvalue! ...)) :
    if empty?(vs) : v0
    else : ProjValues(closest-info(), to-tuple(cons(v0,vs)))

  defrule projvalue = (?v:#symbol-or-string) :
    AtomValue(closest-info(), v)

  ;----------------------------------------------------------
  ;----------------- Require Statement Entries --------------
  ;----------------------------------------------------------
  defproduction require! : KeyValue<Symbol,ProjValue>
  defrule require! = (ccfiles #:! ?v:#projvalue!) : `ccfiles => v
  defrule require! = (ccflags #:! ?v:#projvalue!) : `ccflags => v
  fail-if require! = () : ProjFileError(closest-info(), "Expected a requirement entry here.")

  ;----------------------------------------------------------
  ;----------------- Build Option Entries -------------------
  ;----------------------------------------------------------
  defproduction build-option! : KeyValue<Symbol,?>
  defrule build-option! = (inputs #:! ?v:#projvalue!) : `inputs => v
  defrule build-option! = (pkg #:! ?v:#projvalue!) : `pkg => v
  defrule build-option! = (o #:! ?v:#projvalue!) : `o => v
  defrule build-option! = (s #:! ?v:#projvalue!) : `s => v
  defrule build-option! = (platform #:! ?v:#projvalue!) : `platform => v
  defrule build-option! = (ccfiles #:! ?v:#projvalue!) : `ccfiles => v
  defrule build-option! = (ccflags #:! ?v:#projvalue!) : `ccflags => v
  defrule build-option! = (flags #:! ?v:#projvalue!) : `flags => v
  defrule build-option! = (optimize) : `optimize => true

  ;----------------------------------------------------------
  ;--------------------- Error Productions ------------------
  ;----------------------------------------------------------
  public defproduction projstmt! : ProjStmt  
  defproduction projvalue! : ProjValue

  defrule projstmt! = (?x:#projstmt) : x
  fail-if projstmt! = () : ProjFileError(closest-info(), "Expected a Stanza project statement here.")
  defrule projvalue! = (?x:#projvalue) : x
  fail-if projvalue! = () : ProjFileError(closest-info(), "Not a valid value.")

  defproduction :! : False
  defrule :! = (:) : false
  fail-if :! = () : ProjFileError(closest-info(), "Expected a colon here.")

  ;----------------------------------------------------------
  ;---------------------- Basics ----------------------------
  ;----------------------------------------------------------

  defn ut (x) : unwrap-token(x)
  
  public defproduction symbol: Symbol
  public defproduction string: String
  public defproduction char: Char
  public defproduction byte: Byte
  public defproduction int: Int
  public defproduction long: Long
  public defproduction float: Float
  public defproduction double: Double
  public defproduction symbol-or-string : Symbol|String

  public defproduction symbol!: Symbol
  public defproduction string!: String
  public defproduction char!: Char
  public defproduction byte!: Byte
  public defproduction int!: Int
  public defproduction long!: Long
  public defproduction float!: Float
  public defproduction double!: Double
  public defproduction symbol-or-string! : Symbol|String

  defrule symbol = (?x) when ut(x) is Symbol : ut(x)
  defrule string = (?x) when ut(x) is String : ut(x)
  defrule char = (?x) when ut(x) is Char : ut(x)
  defrule byte = (?x) when ut(x) is Byte : ut(x)
  defrule int = (?x) when ut(x) is Int : ut(x)
  defrule long = (?x) when ut(x) is Long : ut(x)
  defrule float = (?x) when ut(x) is Float : ut(x)
  defrule double = (?x) when ut(x) is Double : ut(x)
  defrule symbol-or-string = (?x) when ut(x) is Symbol|String : ut(x)

  defrule symbol! = (?x:#symbol) : x
  fail-if symbol! = () : ProjFileError(closest-info(), "Expected a symbol here.")
  defrule string! = (?x:#string) : x
  fail-if string! = () : ProjFileError(closest-info(), "Expected a string here.")
  defrule char! = (?x:#char) : x
  fail-if char! = () : ProjFileError(closest-info(), "Expected a char here.")
  defrule byte! = (?x:#byte) : x
  fail-if byte! = () : ProjFileError(closest-info(), "Expected a byte here.")
  defrule int! = (?x:#int) : x
  fail-if int! = () : ProjFileError(closest-info(), "Expected a int here.")
  defrule long! = (?x:#long) : x
  fail-if long! = () : ProjFileError(closest-info(), "Expected a long here.")
  defrule float! = (?x:#float) : x
  fail-if float! = () : ProjFileError(closest-info(), "Expected a float here.")
  defrule double! = (?x:#double) : x
  fail-if double! = () : ProjFileError(closest-info(), "Expected a double here.")
  defrule symbol-or-string! = (?x:#symbol-or-string) : x
  fail-if symbol-or-string! = () : ProjFileError(closest-info(), "Expected a symbol or string here.")

;============================================================
;===================== KeyValue Utilities ===================
;============================================================

defn entry?<?T> (es:Seqable<KeyValue<Symbol,?T>>, name:Symbol) :
  for e in es first :  
    One(value(e)) when key(e) == name else None()

defn entry?<?T> (es:Seqable<KeyValue<Symbol,?T>>, name:Symbol, default:?T) :
  val v = entry?(es, name)
  value?(v, default)  

defn entry!<?T> (es:Seqable<KeyValue<Symbol,?T>>, name:Symbol) :
  val v = entry?(es, name)
  if empty?(v) :
    throw(ProjFileError(false, to-string("No %_ entry given." % [name])))
  value!(v)

;============================================================
;============ Check Statements Under Platform ===============
;============================================================

;[TODO]

;============================================================
;================== Traverse Includes =======================
;============================================================

defn traverse-includes (f:ProjFileS0) :
  defn process (s:ProjStmt, parent-paths:List<IncludePath>) :
    match(s:IncludeStmtS0) :
      val parent-path = head(parent-paths)
      val full-path = include-path $ 
        if relative-path?(path(s)) : replace-path-head(path(parent-path), path(s))
        else : path(s)
      if not exists?(full-path) :
        fatal("File %_ doesn't exist." % [path(full-path)])
      else if included?(parent-paths, full-path) :
        fatal("Cyclic include of %_." % [/full-path(full-path)])
      else :
        val parent-paths* = cons(full-path, parent-paths)
        process(read-raw-proj-file(path(full-path)), parent-paths*, info(s))
    else :
      s
  defn process (f:ProjFileS0, parent-paths:List<IncludePath>, info:FileInfo|False) :
    val stmts* = map(process{_, parent-paths}, stmts(f))
    IncludedStmtsS0(info, path(f), stmts*)

  ;Launch!
  val path* = include-path(path(f))
  fatal("Could not resolve path.") when not exists?(path*)
  val stmts* = map(process{_, List(path*)}, stmts(f))
  ProjFileS0(path(f), stmts*)

defstruct IncludePath :
  path: String
  full-path: String|False

defn include-path (path:String) :
  IncludePath(path, resolve-path(path))

defn exists? (p:IncludePath) :
  full-path(p) is String

defn included? (paths:List<IncludePath>, p:IncludePath) :
  for p1 in paths any? :
    full-path(p1) == full-path(p)

defn absolute-path? (path:String) :
  prefix?(path, "/")

defn relative-path? (path:String) :
  not absolute-path?(path)

defn replace-path-head (path:String, head:String) :
  val i = last-index-of-char(path, '/')
  match(i:Int) : string-join $ [path[0 through i], head]
  else : head

;============================================================
;============ Normalize Statements Under Platform ===========
;============================================================

defn normalize (f:ProjFileS0, current-platform:Symbol) :
  defn norm (s:ProjStmt) :
    match(s) :
      (s:IncludedStmtsS0) :
        val stmts* = map(norm, stmts(s))
        IncludedStmtsS0(info(s), path(s), stmts*)
      (s:DefinedInStmtS0) :
        DefinedInStmt(package(s), filename(s))
      (s:RequiresStmtS0) :
        RequiresStmt(package(s),
                     tuple?(strings{norm(_)}, ccfiles(s)),
                     tuple?(strings{norm(_)}, ccflags(s)))
      (s:ImportWhenStmtS0) :
        ImportWhenStmt(package(s), dependencies(s))
      (s:VMBindingsStmtS0) :
        VMBindingsStmt(filename(s), inputs(s))
      (s:BuildStmtS0) :
        BuildStmt(name(s),
                  strings-or-symbols(norm(inputs(s))),
                  maybe?(string{norm(_)}, pkg(s)),
                  maybe?(string{norm(_)}, output(s)),
                  maybe?(string{norm(_)}, assembly(s)),
                  maybe?(symbol{norm(_)}, platform(s)),
                  tuple?(strings{norm(_)}, ccfiles(s)),
                  tuple?(strings{norm(_)}, ccflags(s)),
                  tuple?(strings{norm(_)}, flags(s)),
                  extend(s),
                  optimize(s))
  defn norm (v:ProjValue) :
    match(v) :
      (v:AtomValue) :
        v
      (v:ProjValues) :
        ProjValues(info(v), map(norm, values(v)))
      (v:CondPlatform) :
        val v* = for e in values(v) first :
          if key(e) == current-platform or key(e) == `else :
            One(norm(value(e)))
          else : None()
        value!(v*)
        
  ;Remove ProjValues nested within ProjValues
  defn flatten (v:ProjValue) -> ProjValue :
    match(v) :
      (v:AtomValue) :
        v
      (v:ProjValues) :
        val accum = Vector<AtomValue>()
        let loop (v:ProjValue = v) :
          match(v) :
            (v:AtomValue) : add(accum,v)
            (v:ProjValues) : do(loop, values(v))
        ProjValues(info(v), to-tuple(accum))

  ;Convert to primitive types
  defn strings (v:ProjValue) -> Tuple<String> :
    match(flatten(v)) :
      (v:AtomValue) : [string(v)]
      (v:ProjValues) : map(string, values(v))
  defn strings-or-symbols (v:ProjValue) -> Tuple<String|Symbol> :
    match(flatten(v)) :
      (v:AtomValue) : [value(v)]
      (v:ProjValues) : map(value{_ as AtomValue}, values(v))
  defn string (v:ProjValue) -> String :
    value(v as AtomValue) as String
  defn symbol (v:ProjValue) -> Symbol :
    value(v as AtomValue) as Symbol
    
  ;Launch!
  ProjFileS0(path(f), map(norm,stmts(f)))

;============================================================
;=============== Flatten Relative Paths =====================
;============================================================
defn flatten-relative-paths (f:ProjFileS0) :
  val accum = Vector<ProjStmt>()
  defn emit (s:ProjStmt) : add(accum,s)
  defn process (s:ProjStmt, parent-path:String) :
    defn flatten-path (s:String) :
      if absolute-path?(s) : s
      else : replace-path-head(parent-path, s)
    defn flatten-path (s:Symbol) :
      s
    match(s) :
      (s:IncludedStmtsS0) :
        do(process{_, path(s)}, stmts(s))
      (s:DefinedInStmt) :
        emit $ DefinedInStmt(package(s), flatten-path(filename(s)))
      (s:RequiresStmt) :
        emit $ RequiresStmt(package(s),
                            map(flatten-path,ccfiles(s)),
                            map(flatten-path,ccflags(s)))
      (s:ImportWhenStmt) :
        emit $ s
      (s:VMBindingsStmt) :
        emit $ VMBindingsStmt(flatten-path(filename(s)),
                              map(flatten-path, inputs(s)))
      (s:BuildStmt) :
        emit $ BuildStmt(
          name(s)
          map(flatten-path,inputs(s))
          maybe?(flatten-path,pkg(s))
          maybe?(flatten-path,output(s))
          maybe?(flatten-path,assembly(s))
          platform(s)
          map(flatten-path,ccfiles(s))
          map(flatten-path,ccflags(s))
          flags(s)
          extend(s)
          optimize(s))
  do(process{_, path(f)}, stmts(f))
  ProjFile(to-tuple(accum))

;============================================================
;======================= Errors =============================
;============================================================

public defstruct ProjFileError <: Exception :
  info: FileInfo|False
  msg: String
defmethod print (o:OutputStream, e:ProjFileError) :
  val info-str = "" when info(e) is False
            else "%_: " % [info(e)]
  print(o, "%_%_" % [info-str, msg(e)])

defn add-proj-file-info<?T> (f:() -> ?T, info:FileInfo|False) :
  try :
    f()
  catch (e:ProjFileError) :
    throw(ProjFileError(info, msg(e)))

;============================================================
;======================== Utilities =========================
;============================================================

defn maybe?<?T,?S> (f:T -> ?S, x:Maybe<?T>) -> Maybe<S> :
  if empty?(x) : None()
  else : One(f(value!(x)))

defn tuple?<?T,?S> (f:T -> Tuple<?S>, x:Maybe<?T>) -> Tuple<S> :
  if empty?(x) : []
  else : f(value!(x))

;============================================================
;======================= Scratch ============================
;============================================================

defn main () :
  println $
;  flatten-relative-paths $
;  normalize{_, `os-x} $
  traverse-includes $
  read-raw-proj-file("scratch/stanza.proj")

main()