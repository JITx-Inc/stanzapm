defpackage test-alloc :
  import core
  import collections
  import stz/vm-ir
  import stz/backend
  import stz/reg-alloc
  import stz/vm-normalize
  import stz/codegen
  import stz/asm-ir
  import stz/asm-emitter

public defn allocate-pkg (filename:String) :
  val vmp = read-vm-package(filename)
  val vmp2 = normalize(vmp, X64Backend())
  for f in funcs(vmp2) do :
    println("Allocating function %_" % [id(f)])
    allocate-registers(func(f), X64Backend())

public defn normalize-pkg (filename:String) :
  val vmp = read-vm-package(filename)
  val vmp* = normalize(vmp, X64Backend())
  println(vmp*)

public defn test-emit (filename:String) :
  val file = FileOutputStream(filename)
  val backend = X64Backend()
  with-output-file(file, fn () :
    val emitter = new CodeEmitter :
      defmethod emit (this, i:Ins) :
        emit(i, backend)
    compile-entry-function(emitter))
    