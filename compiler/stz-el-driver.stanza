defpackage stz/el-driver :
  import core
  import collections
  import stz/el-ir  
  import stz/el-to-vm
  import stz/vm-ir
  import stz/dl-ir
  import stz/loaded-ids
  import stz/dl

defstruct EUnit :
  packageio: PackageIO
  epackage: EPackage

defsyntax el-driver :
  import epackage from el-ir
  import packageio from dl-ir
  
  defproduction eunit : EUnit
  defrule eunit = (?io:#packageio, ?ep:#epackage) : EUnit(io, ep)
  
  public defproduction stage : Tuple<EUnit>
  defrule stage = (load : (?units:#eunit ...)) : to-tuple(units)
  
defn main () :
  val filename = command-line-arguments()[1]
  val forms = reader/read-file(filename)
  val stages = parse-syntax[el-driver / #stage ...](forms)

  val denv = DEnv()
  val ids = LoadedIds()

  for stage in stages do :
    match(load(denv, map(packageio, stage))) :
      (lr:LoadSuccess) :
        println("Packages %, can be loaded." % [seq(name{epackage(_)}, stage)])
        for unit in stage do :
          val pkg-ids = LoadedPackageIds(ids, packageio(unit), epackage(unit))
          println(pkg-ids)
      (lr:LoadErrors) :
        println("Packages %, cannot be loaded." % [seq(name{epackage(_)}, stage)])
        do(println, errors(lr))  

main()