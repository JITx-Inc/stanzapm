defpackage stz/sep-ir :
  import core
  import collections

;                    Package
;                    =======
defstruct DefPackage :
  name: Symbol
  version: Long
  imports: List<Import>
  fns: List<DefFn>
  methods: List<DefMethod>
  multis: List<DefMulti>
  globals: List<DefGlobal>
  types: List<DefType>
  structs: List<DefStruct>
  hierarchy: List<SubtypeRelation>
  info-table: InfoTable

;                    Imports
;                    =======

defstruct Import :
  name: Symbol
  version: Long
  import: List<Int>
  local: List<Int>

;                    Definitions
;                    ===========

defstruct DefFn :
  n: Int
  ins: Vector<Ins>

defstruct DefMethod :
  n: Int
  multi: Int
  types: List<Type>
  ins: Vector<Ins>

defstruct DefMulti :
  n: Int
  arity: Int
  bad-arity: Int
  no-method: Int

defstruct DefGlobal :
  n: Int
  types: List<PrimType>

defstruct DefType :
  n: Int

defstruct DefStruct :
  n: Int
  fields: List<PrimType>
  rfield: List<PrimType>

defstruct SubtypeRelation :
  n: Int
  parent: Int

defstruct InfoTable :
  entries: Vector<KeyValue<Int,FileInfo>>

;                   Instructions
;                   ============
public deftype Ins
public defstruct XchgIns <: Ins :
  x: Loc
  y: Loc
public defstruct SetIns <: Ins :
  type: PrimType
  x: Loc
  y: Imm
public defstruct ConvertIns <: Ins :
  xtype: PrimType
  x: Loc
  ytype: PrimType
  y: Imm
public defstruct ReinterpretIns <: Ins :
  xtype: PrimType
  x: Loc
  ytype: PrimType
  y: Imm
public defstruct UnaOp <: Ins :
  type: PrimType
  x: Loc
  op: Op
  y: Imm
public defstruct BinOp <: Ins :
  type: PrimType
  x: Loc
  op: Op
  y: Imm
  z: Imm
public defstruct DualOp <: Ins :
  type: PrimType
  x1: Loc
  x2: Loc
  op: Op
  y: Imm
  z: Imm
public defstruct Load <: Ins :
  type: PrimType
  x: Loc
  y: Imm
  offset: Int
public defstruct Store <: Ins :
  type: PrimType
  x: Imm
  y: Imm
  offset: Int
public defstruct Call <: Ins :
  x: Imm
public defstruct Return <: Ins
public defstruct Goto <: Ins :
  x: Imm
public defstruct Branch <: Ins :
  type: PrimType
  x: Imm
  op: Op
  y: Imm
  z: Imm   
public defstruct Match <: Ins :
  x1: Loc
  x2: Loc
  args: List<Imm>
  branches: List<MatchBranch>
public defstruct Dispatch <: Ins :
  x1: Loc
  x2: Loc
  args: List<Imm>
  branches: List<MatchBranch>
defstruct MatchBranch <: Ins :
  types: List<Type>
  target: Imm
public defstruct Label <: Ins :
  n: Int
public defstruct ExLabel <: Ins :
  name: Symbol

;                  Primitive Types
;                  ===============

public deftype PrimType <: Equalable
public deftype IntegerType <: PrimType
public deftype RealType <: PrimType
public defstruct ByteType <: IntegerType
public defstruct IntType <: IntegerType
public defstruct LongType <: IntegerType
public defstruct FloatType <: RealType
public defstruct DoubleType <: RealType
public defstruct RefType <: IntegerType