defpackage stz/defs-db :
  import core
  import collections
  import stz/namemap
  import stz/compiler
  import stz/front-end
  import stz/visibility
  import stz/il-ir
  import stz/pkg
  import stz/dl-ir
  import stz/algorithms
  import stz/proj-manager
  import stz/defs-db-serializer

;find all public definitions in ipackage
defn public-definitions (ipackage:IPackage) -> Seq<IExp> :
  generate<IExp> :
    defn loop (e:IExp) :
      defn* loop-public (e:IExp, public?:True|False) :
        match(e) :
          (e:IBegin) :
            do(loop-public{_, public?}, exps(e))
          (e:IDefn|IDef|IDefChild|IDefType|IDefVar|IDefmulti|IDefmethod|ILSDefn|ILSDefType|ILSDefmethod|IDoc) :
            yield(e)
          (e:IVisibility) :
            loop-public(exp(e), visibility(e) is Public)
          (e) :
            false
      match(e) :
        (e:IBegin) :
          do(loop, exps(e))
        (e:IDoc) :
          yield(e)
        (e:IDefmethod|ILSDefmethod) :
          yield(e)
        (e:IVisibility) :
          loop-public(exp(e), visibility(e) is Public)
        (e) :
          false
    for e in exps(ipackage) do :
      loop(e)

defn lookup (nm:NameMap, e:IExp) :
  match(e) :
    (e:VarN) : name(nm[n(e)])
    (e) : e

defn add-def (e:IExp, nm:NameMap, info:False|FileInfo, defs:HashTable<String,List<FileInfo>>) :
  match(info:FileInfo) :
    match(lookup(nm, e)) :
      (sym:Symbol) :
        val name = to-string(sym)
        defs[name] = cons(info, defs[name])
      (o) : false

defn collect-definition (e:IExp, nm:NameMap, defs:HashTable<String,List<FileInfo>>) :
  match(e) :
    (e:ILSDefType|IDef|IDefVar|ILSDefn|IDefn|IDefmulti) :
      add-def(name(e), nm, info(e), defs)
    (e:IDefType) :
      add-def(class(e), nm, info(e), defs)
    (e:ILSDefmethod|IDefmethod) :
      add-def(multi(e), nm, info(e), defs)
    (e) :
      false

public defn gen-defs-db (defs-db:String, nm:NameMap, i-all-ipackages:Seqable<IPackage>) :
  val all-ipackages = to-tuple $ i-all-ipackages
  val defs = HashTable<String,List<FileInfo>>(List())
  for ipackage in all-ipackages do :
    val definitions = to-tuple $ public-definitions(ipackage)
    for d in definitions do :
      collect-definition(d, nm, defs)
  ; for def in defs do :
  ;   println(key(def))
  ;   for info in value(def) do :
  ;     println("  %_" % [info])
  val o = FileOutputStream $ defs-db
  serialize(o, defs)
  close(o)
  val i = FileInputStream(defs-db)
  val d = deserialize(i)
  println("READ DB %_" % [length(d)])
  close(i)

public defn defs-db (settings:BuildSettings, filename:String) :
  val dep-result = dependencies(settings, true)
  gen-defs-db(filename, namemap(dep-result), filter-by<IPackage>(packages(dep-result)))

