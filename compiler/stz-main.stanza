;See License.txt for details about licensing.

defpackage stz/main :
   import core
   import parser
   import collections
   import reader
   import stz/compiler
   import stz/arg-parser
   import stz/params
   import stz/backend
   import stz/build
   
   ;Macro Packages
   import stz/ast-lang
   import stz/reader-lang
   import stz/ast-printer-lang
   import stz/check-lang
   import stz/renamer-lang
   import stz/resolver-lang
   import stz/serializer-lang

;============================================================
;====================== Version =============================
;============================================================

val ABOUT-MSG =
\<MSG>
             L.B.Stanza Programming Language

                    Version %_

Copyright (c) 2016, Patrick Shaobai Li, The Regents of the
University of California. All Rights Reserved.
<MSG>

defn print-version () :
   val version = string-join(STANZA-VERSION, ".")
   println(ABOUT-MSG % [version])

;============================================================
;================== Config File Parsing =====================
;============================================================
defsyntax stanza-config :
   defn ut (x) : unwrap-token(x)

   defn PE (info:False|FileInfo, msg) :
      match(info) :
         (info:FileInfo) : Exception("%_: %_" % [info, msg])
         (info:False) : Exception(msg)

   defproduction sym: Symbol
   defrule sym = (?x) when ut(x) is Symbol : ut(x)
   
   defproduction string: String
   defrule string = (?x) when ut(x) is String : ut(x)

   defproduction string!: String
   defrule string! = (?s:#string) : s
   fail-if string! = () : PE(closest-info(), "Expected a string here.")

   defproduction platform!: Symbol
   defrule platform! = (?x:#sym) :
      try : to-platform(x)
      catch (e:Exception) : throw(PE(closest-info(), e))
   fail-if platform! = () :
      PE(closest-info(), "Expected a platform here.")

   public defproduction entry: False
   defrule entry = (install-dir = ?path:#string!) :
      STANZA-INSTALL-DIR = path
   defrule entry = (platform = ?p:#platform!) :
      OUTPUT-PLATFORM = p
   defrule entry = (pkg-dirs = (?paths:#string ...)) :
      STANZA-PKG-DIRS = append(paths, STANZA-PKG-DIRS)
   defrule entry = (fast-pkg-dirs = (?paths:#string ...)) :
      STANZA-FAST-PKG-DIRS = append(paths, STANZA-FAST-PKG-DIRS)
   fail-if entry = () :
      PE(closest-info(), "Invalid configuration rule.")

defn to-platform (p:Symbol) :
  if not contains?([`os-x, `linux, `windows], p) :
    throw $ Exception("%_ is not a supported platform." % [p])
  p   

defn to-platform (p:String) :
  to-platform(to-symbol(p))

defn read-config-file () :
   ;Extract parameters from config file
   label<False> break :
      defn extract-from-file (filename:String) :
         if file-exists?(filename) :
            val forms = read-file(filename)
            parse-syntax[stanza-config / #entry ...](forms)
            break(false)

      defn extract-from-env (name:String) :
         match(get-env(name)) :
            (path:String) : extract-from-file(norm-path("%_/.stanza" % [path]))
            (path:False) : false

      extract-from-file(".stanza")
      extract-from-env("STANZA_CONFIG")
      extract-from-env("HOME")
      throw(Exception("Could not locate .stanza configuration file."))

   ;Verify parameters
   val license-file = norm-path("%_/License.txt" % [STANZA-INSTALL-DIR])
   if not file-exists?(license-file) :
      throw $ Exception(STANZA-LICENSE-MSG % [STANZA-INSTALL-DIR, license-file])

val STANZA-LICENSE-MSG = "Stanza install directory is set to %_, but could not locate license file at %_."   

;============================================================
;================== Compilation =============================
;============================================================
public defstruct BuildJob :
  filenames: List<String>
  assembly: Maybe<String>
  output: Maybe<String>
  platform: Maybe<Symbol>
  ccfiles: List<String>
  ccflags: Maybe<String>
  flags: List<Symbol>
  pkg: Maybe<String>
  optimize?: True|False
  verbose?: True|False
  
defn stanza-file (path:String) :
  norm-path(path % [STANZA-INSTALL-DIR])
      
defn call-cc (asmfile:String, outfile:String, ccfiles:List<String>, ccflags:False|String) :
  ;Get list of all files and flags
  val all-files = cat-all $ [
   [asmfile,
    stanza-file("%_/runtime/driver.c")]
    ccfiles]
  val all-flags = match(ccflags) :
    (ccflags:False) : ["-lm"]
    (ccflags:String) : ["-lm" ccflags]
  val cc-name = switch flag-defined? :
    `PLATFORM-WINDOWS : "gcc"
    `PLATFORM-LINUX : "cc"
    `PLATFORM-OS-X : "cc"
  val platform-flags = switch flag-defined? :
    `PLATFORM-WINDOWS : ["-D PLATFORM_WINDOWS"]
    `PLATFORM-LINUX : ["-D PLATFORM_LINUX"]
    `PLATFORM-OS-X : ["-D PLATFORM_OS_X"]
     
  ;Create command
  defn escape (x) : "\"%_\"" % [x]
  val cmd = to-string $
    "%_ -std=gnu99 %* -o %_ %* %*" % [
      cc-name,
      join(seq(escape, all-files), " "),
      escape(outfile),
      join(all-flags, " "),
      join(platform-flags, " ")]
  if flag-defined?(`VERBOSE) :
    println(cmd)

  ;Call system compiler
  call-system(cmd)

public defn compile (job:BuildJob) :
  ;Set up configuration
  read-config-file()

  ;Verify input files
  if empty?(filenames(job)) :
    throw $ Exception("No input files given.")
  if empty?(assembly(job)) and empty?(output(job)) and empty?(pkg(job)) :
    throw $ Exception("Stanza compile command requires either at least one of the following flags: -s, -o, or -pkg.")

  ;Flag settings   
  add-flag(`OPTIMIZE) when optimize?(job)
  add-flag(`VERBOSE) when verbose?(job)

  ;Pkg path
  val pkg-dir = if empty?(pkg(job)) : "."
                else : value!(pkg(job))
  if optimize?(job) :
    STANZA-FAST-PKG-DIRS = cons(pkg-dir, STANZA-FAST-PKG-DIRS)
  else :
    STANZA-PKG-DIRS = cons(pkg-dir, STANZA-PKG-DIRS)
    
  ;Flags
  do(add-flag, flags(job))
  
  ;Platform override
  if not empty?(platform(job)) :
    OUTPUT-PLATFORM = to-platform(value!(platform(job)))

  ;Platform flag settings
  add-flag $ switch(OUTPUT-PLATFORM) :
    `os-x : `PLATFORM-OS-X
    `linux : `PLATFORM-LINUX
    `windows : `PLATFORM-WINDOWS

  ;Compute filename of output file, and whether it is temporary
  val [asmfile, temporary?] =
    if not empty?(assembly(job)) :
      [value!(assembly(job)), false]
    else if not empty?(output(job)) :
      [to-string("%_.s" % [gensym("tmp")]), true]
    else :
      [false, false]

  ;Compile to assembly
  val backend = switch flag-defined? :
    `PLATFORM-WINDOWS : W64Backend()
    `PLATFORM-LINUX : L64Backend()
    `PLATFORM-OS-X : X64Backend()
  compile(filenames(job), asmfile, value?(pkg(job)), backend)

  ;Call C compiler
  if not empty?(output(job)) :
    call-cc(asmfile as String, value!(output(job)),
            ccfiles(job), value?(ccflags(job)))

  ;Delete assembly file
  if temporary? :
    delete-file(asmfile as String)  

defn compile (parsed:ParseResult) :
  ;Verify input files
  if length(multiple?(parsed, "pkg", List())) > 1 :
    throw $ Exception("Multiple pkg output directories given.")

  ;Retrievers
  defn maybe-single? (name:String) :
    match(flag?(parsed, name)) :
      (f:False) : None()
      (f:String) : One(f)
  defn list? (name:String) -> List<String> :
    multiple?(parsed, name, List())

  val pkg-dir = match(flag?(parsed, "pkg")) :
    (f:False) : None()
    (f:List<String>) :
      if empty?(f) : One(".")
      else : One(head(f))

  val platform = match(flag?(parsed, "platform")) :
    (f:False) : None()
    (f:String) : One(to-symbol(f))

  ;Build job
  compile $ BuildJob(
    args(parsed),
    maybe-single?("s"),
    maybe-single?("o"),
    platform
    list?("ccfiles")
    maybe-single?("ccflags")
    map(to-symbol,list?("flags"))
    pkg-dir,
    has-flag?(parsed, "optimize")
    has-flag?(parsed, "verbose"))

;============================================================
;====================== Check ===============================
;============================================================

defn check (parsed:ParseResult) :
   ;Set up configuration
   read-config-file()

   ;Verify input files
   if empty?(args(parsed)) :
      throw $ Exception("No input files given.")
      
   ;Flag settings
   if has-flag?(parsed, "optimize") :
      add-flag(`OPTIMIZE)
   for flag in multiple?(parsed, "flags", List()) do :
      add-flag(to-symbol(flag))

   ;Pkg Directories
   val pkg-dir = let :
     val dirs = multiple?(parsed, "pkg", List())
     if empty?(dirs) : "."
     else : head(dirs)

   ;Pkg Directories
   if flag-defined?(`OPTIMIZE) :
      STANZA-FAST-PKG-DIRS = cons(pkg-dir, STANZA-FAST-PKG-DIRS)
   else :
      STANZA-PKG-DIRS = cons(pkg-dir, STANZA-PKG-DIRS)

   ;Check Files
   check(args(parsed))

;============================================================
;=================== Installation ===========================
;============================================================

defn install (parsed:ParseResult) :
   ;Get Stanza platform
   val platform = to-platform(single(parsed, "platform"))
   
   ;Get installation directory
   val install-dir = match(resolve-path("License.txt")) :
      (path:String) :
         val stz-suffix = norm-path("/License.txt")
         if suffix?(path, stz-suffix) :
            val n = length(stz-suffix)
            path[0 to (length(path) - n)]               
         else :  
            throw $ Exception("Could not determine Stanza installation directory.")
      (path:False) :
         throw $ Exception("Could not determine Stanza installation directory.")
         
   defn open-config-file () :
      if has-flag?(parsed, "path") :
         val path = single(parsed, "path")
         val filepath = norm-path("%_/.stanza" % [path])
         with-output-file(FileOutputStream(filepath), write-config-file)
         match(resolve-path(filepath)) :
            (fullpath:String) :
               val suffix = norm-path("/.stanza")
               if suffix?(fullpath, suffix) :
                  val n = length(suffix)
                  val dir = fullpath[0 to (length(fullpath) - n)]
                  println("Stanza installation finished. Created %_ file." % [fullpath])                  
                  println("Remember to add %_ to your STANZA_CONFIG environment variable." % [dir])                  
               else :
                  throw $ Exception("Stanza installation failed. Could not create %_ file." % [filepath])
            (fullpath:False) :
               throw $ Exception("Stanza installation failed. Could not create %_ file." % [filepath])
      else :
         match(get-env("HOME")) :
            (home:String) :
               val filepath = norm-path("%_/.stanza" % [home])
               with-output-file(FileOutputStream(filepath), write-config-file)
            (home:False) :
               throw $ Exception("Could not locate user's home directory.")
               
   defn write-config-file () :
      println("install-dir = %~" % [install-dir])
      println("platform = %~" % [platform])

   ;Driver
   open-config-file()

;============================================================
;===================== Build ================================
;============================================================

defn build (parsed:ParseResult) :
  ;Verification
  if length(args(parsed)) > 1 :
    throw $ Exception("Multiple build projects given.")
  build $
    if empty?(args(parsed)) : `main
    else : to-symbol(head(args(parsed)))

defn init (parsed:ParseResult) :
  if not empty?(args(parsed)) :
    throw(Exception("Command init does not take arguments."))
  init()

defn clean (parsed:ParseResult) :
  if not empty?(args(parsed)) :
    throw(Exception("Command clean does not take arguments."))
  clean()

;============================================================
;================== Main Interface ==========================
;============================================================

defn main () :
   val compile-comm = Command("compile", [
                         SingleFlag("s", true),
                         SingleFlag("o", true),
                         SingleFlag("platform", true)
                         MultipleFlag("pkg", true)
                         MultipleFlag("ccfiles", true)
                         MultipleFlag("flags", true)
                         GreedyFlag("ccflags", true)
                         MarkerFlag("optimize")
                         MarkerFlag("verbose")])
   val check-comm = Command("check", [
                       MultipleFlag("flags", true)
                       MultipleFlag("pkg", true)
                       MarkerFlag("optimize")])
   val install-comm = Command("install", [
                         SingleFlag("platform"),
                         SingleFlag("path", true)])
   val version-comm = Command("version", [])
   val build-comm = Command("build", [])
   val init-comm = Command("init", [])
   val clean-comm = Command("clean", [])
   
   val comms = [compile-comm, check-comm, install-comm, version-comm, build-comm,
                init-comm, clean-comm]
   try :      
      val parsed = parse-args(comms, compile-comm, command-line-arguments()[1 to false])
      switch {command(parsed) == _} :
         "compile" : compile(parsed)
         "check" : check(parsed)
         "install" : install(parsed)
         "version" : print-version()
         "build" : build(parsed)
         "init" : init(parsed)
         "clean" : clean(parsed)
      ;Return success
      exit(0)
   catch (e:NoMatchException) :
      do(println, causes(e))
      exit(-1)
   catch (e:Exception) :
      println(e)
      ;Return failure
      exit(-1)

main()
