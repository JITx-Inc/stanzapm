;See License.txt for details about licensing.

defpackage stz/main :
   import core
   import parser
   import collections
   import reader
   import stz/compiler
   import stz/arg-parser
   import stz/params
   import stz/backend
   import stz/build
   import stz/config
   
   ;Macro Packages
   import stz/ast-lang
   import stz/reader-lang
   import stz/ast-printer-lang
   import stz/check-lang
   import stz/renamer-lang
   import stz/resolver-lang
   import stz/serializer-lang

;============================================================
;====================== Version =============================
;============================================================

val ABOUT-MSG =
\<MSG>
             L.B.Stanza Programming Language

                    Version %_

Copyright (c) 2016, Patrick Shaobai Li, The Regents of the
University of California. All Rights Reserved.
<MSG>

defn print-version () :
   val version = string-join(STANZA-VERSION, ".")
   println(ABOUT-MSG % [version])

public val VERSION-COMMAND =
  Command("version", [], print-version{})

;============================================================
;================== Compilation =============================
;============================================================
public defstruct BuildJob :
  filenames: List<String>
  assembly: Maybe<String>
  output: Maybe<String>
  platform: Maybe<Symbol>
  ccfiles: List<String>
  ccflags: Maybe<String>
  flags: List<Symbol>
  pkg: Maybe<String>
  optimize?: True|False
  verbose?: True|False
  
defn stanza-file (path:String) :
  norm-path(path % [STANZA-INSTALL-DIR])
      
defn call-cc (asmfile:String, outfile:String, ccfiles:List<String>, ccflag-string:False|String) :
  ;Flatten a tree of arguments
  defn flatten (x) :
    generate<String> :
      let loop (x = x) :
        match(x) :
          (x:String) : yield(x)
          (x:Seqable) : do(loop, x)

  ;Parse ccflag-string
  val ccflags =
    attempt : tokenize-shell-command(ccflag-string as? String)
    else : []

  ;Get list of all files and flags
  val cc-name = switch flag-defined? :
    `PLATFORM-WINDOWS : "gcc"
    `PLATFORM-LINUX : "cc"
    `PLATFORM-OS-X : "cc"
  val platform = switch flag-defined? :
    `PLATFORM-WINDOWS : "PLATFORM_WINDOWS"
    `PLATFORM-LINUX : "PLATFORM_LINUX"
    `PLATFORM-OS-X : "PLATFORM_OS_X"
     
  ;Create command
  val cmd-args = [
    cc-name
    "-std=gnu99"
    asmfile
    stanza-file("%_/runtime/driver.c")
    ccfiles
    "-o" outfile
    "-lm" ccflags
    "-D" platform]
  
  ;Call system compiler
  call-system(cc-name, flatten(cmd-args))

public defn compile (job:BuildJob) :
  ;Set up configuration
  read-config-file()

  ;Verify input files
  if empty?(filenames(job)) :
    throw $ Exception("No input files given.")
  if empty?(assembly(job)) and empty?(output(job)) and empty?(pkg(job)) :
    throw $ Exception("Stanza compile command requires either at least one of the following flags: -s, -o, or -pkg.")

  ;Flag settings   
  add-flag(`OPTIMIZE) when optimize?(job)
  add-flag(`VERBOSE) when verbose?(job)

  ;Pkg path
  val pkg-dir = if empty?(pkg(job)) : "."
                else : value!(pkg(job))
  if optimize?(job) :
    STANZA-FAST-PKG-DIRS = cons(pkg-dir, STANZA-FAST-PKG-DIRS)
  else :
    STANZA-PKG-DIRS = cons(pkg-dir, STANZA-PKG-DIRS)
    
  ;Flags
  do(add-flag, flags(job))
  
  ;Platform override
  if not empty?(platform(job)) :
    val p = value!(platform(job))
    ensure-supported-platform(p)
    OUTPUT-PLATFORM = p

  ;Platform flag settings
  add-flag $ switch(OUTPUT-PLATFORM) :
    `os-x : `PLATFORM-OS-X
    `linux : `PLATFORM-LINUX
    `windows : `PLATFORM-WINDOWS

  ;Compute filename of output file, and whether it is temporary
  val [asmfile, temporary?] =
    if not empty?(assembly(job)) :
      [value!(assembly(job)), false]
    else if not empty?(output(job)) :
      [to-string("%_.s" % [gensym("tmp")]), true]
    else :
      [false, false]

  ;Compile to assembly
  val backend = switch flag-defined? :
    `PLATFORM-WINDOWS : W64Backend()
    `PLATFORM-LINUX : L64Backend()
    `PLATFORM-OS-X : X64Backend()
  compile(filenames(job), asmfile, value?(pkg(job)), backend)

  ;Call C compiler
  if not empty?(output(job)) :
    call-cc(asmfile as String, value!(output(job)),
            ccfiles(job), value?(ccflags(job)))

  ;Delete assembly file
  if temporary? :
    delete-file(asmfile as String)  

defn compile (parsed:ParseResult) :
  ;Verify input files
  if length(multiple?(parsed, "pkg", List())) > 1 :
    throw $ Exception("Multiple pkg output directories given.")

  ;Retrievers
  defn maybe-single? (name:String) :
    match(flag?(parsed, name)) :
      (f:False) : None()
      (f:String) : One(f)
  defn list? (name:String) -> List<String> :
    multiple?(parsed, name, List())

  val pkg-dir = match(flag?(parsed, "pkg")) :
    (f:False) : None()
    (f:List<String>) :
      if empty?(f) : One(".")
      else : One(head(f))

  val platform = match(flag?(parsed, "platform")) :
    (f:False) : None()
    (f:String) : One(to-symbol(f))

  ;Build job
  compile $ BuildJob(
    args(parsed),
    maybe-single?("s"),
    maybe-single?("o"),
    platform
    list?("ccfiles")
    maybe-single?("ccflags")
    map(to-symbol,list?("flags"))
    pkg-dir,
    has-flag?(parsed, "optimize")
    has-flag?(parsed, "verbose"))

public val COMPILE-COMMAND =
  Command("compile",
   [SingleFlag("s", true),
    SingleFlag("o", true),
    SingleFlag("platform", true)
    MultipleFlag("pkg", true)
    MultipleFlag("ccfiles", true)
    MultipleFlag("flags", true)
    GreedyFlag("ccflags", true)
    MarkerFlag("optimize")
    MarkerFlag("verbose")]
    compile)

;============================================================
;====================== Check ===============================
;============================================================

defn check (parsed:ParseResult) :
   ;Set up configuration
   read-config-file()

   ;Verify input files
   if empty?(args(parsed)) :
      throw $ Exception("No input files given.")
      
   ;Flag settings
   if has-flag?(parsed, "optimize") :
      add-flag(`OPTIMIZE)
   for flag in multiple?(parsed, "flags", List()) do :
      add-flag(to-symbol(flag))

   ;Pkg Directories
   val pkg-dir = let :
     val dirs = multiple?(parsed, "pkg", List())
     if empty?(dirs) : "."
     else : head(dirs)

   ;Pkg Directories
   if flag-defined?(`OPTIMIZE) :
      STANZA-FAST-PKG-DIRS = cons(pkg-dir, STANZA-FAST-PKG-DIRS)
   else :
      STANZA-PKG-DIRS = cons(pkg-dir, STANZA-PKG-DIRS)

   ;Check Files
   check(args(parsed))

public val CHECK-COMMAND = 
  Command("check", 
   [MultipleFlag("flags", true)
    MultipleFlag("pkg", true)
    MarkerFlag("optimize")]
    check)

;============================================================
;=================== Installation ===========================
;============================================================

defn install (parsed:ParseResult) :
   ;Get Stanza platform
   val platform = to-symbol(single(parsed, "platform"))
   ensure-supported-platform(platform)
   
   ;Get installation directory
   val install-dir = match(resolve-path("License.txt")) :
      (path:String) :
         val stz-suffix = norm-path("/License.txt")
         if suffix?(path, stz-suffix) :
            val n = length(stz-suffix)
            path[0 to (length(path) - n)]               
         else :  
            throw $ Exception("Could not determine Stanza installation directory.")
      (path:False) :
         throw $ Exception("Could not determine Stanza installation directory.")
         
   defn open-config-file () :
      if has-flag?(parsed, "path") :
         val path = single(parsed, "path")
         val filepath = norm-path("%_/.stanza" % [path])
         with-output-file(FileOutputStream(filepath), write-config-file)
         match(resolve-path(filepath)) :
            (fullpath:String) :
               val suffix = norm-path("/.stanza")
               if suffix?(fullpath, suffix) :
                  val n = length(suffix)
                  val dir = fullpath[0 to (length(fullpath) - n)]
                  println("Stanza installation finished. Created %_ file." % [fullpath])                  
                  println("Remember to add %_ to your STANZA_CONFIG environment variable." % [dir])                  
               else :
                  throw $ Exception("Stanza installation failed. Could not create %_ file." % [filepath])
            (fullpath:False) :
               throw $ Exception("Stanza installation failed. Could not create %_ file." % [filepath])
      else :
         match(get-env("HOME")) :
            (home:String) :
               val filepath = norm-path("%_/.stanza" % [home])
               with-output-file(FileOutputStream(filepath), write-config-file)
            (home:False) :
               throw $ Exception("Could not locate user's home directory.")
               
   defn write-config-file () :
      println("install-dir = %~" % [install-dir])
      println("platform = %~" % [platform])

   ;Driver
   open-config-file()

public val INSTALL-COMMAND =
  Command("install", 
   [SingleFlag("platform"),
    SingleFlag("path", true)]
    install)

;============================================================
;===================== Build ================================
;============================================================

defn build (parsed:ParseResult) :
  ;Verification
  if length(args(parsed)) > 1 :
    throw $ Exception("Multiple build projects given.")
  build $
    if empty?(args(parsed)) : `main
    else : to-symbol(head(args(parsed)))

defn init (parsed:ParseResult) :
  if not empty?(args(parsed)) :
    throw(Exception("Command init does not take arguments."))
  init()

defn clean (parsed:ParseResult) :
  if not empty?(args(parsed)) :
    throw(Exception("Command clean does not take arguments."))
  clean()

public val BUILD-COMMAND = Command("build", [], build)
public val INIT-COMMAND = Command("init", [], init)
public val CLEAN-COMMAND = Command("clean", [], clean)

;============================================================
;===================== Path =================================
;============================================================

defn show-path (parsed:ParseResult) :
  ;Verification
  if not empty?(args(parsed)) :
    throw $ Exception("The stanza path command does not take any arguments.")
  read-config-file()
  println(STANZA-INSTALL-DIR)

public val PATH-COMMAND = Command("path", [], show-path)

;============================================================
;================== Standard Commands =======================
;============================================================

public val STANZA-COMMANDS = [
  COMPILE-COMMAND
  CHECK-COMMAND
  INSTALL-COMMAND
  VERSION-COMMAND
  BUILD-COMMAND
  INIT-COMMAND
  CLEAN-COMMAND
  PATH-COMMAND]

;============================================================
;================== Main Interface ==========================
;============================================================

defn print-exceptions (e:Exception) :
  match(e) :
    (e:NoMatchException) : do(println, causes(e))
    (e) : println(e)

public defn stanza-main (args:Seqable<String>) :
  try :
    parse-args(STANZA-COMMANDS, COMPILE-COMMAND, args)
  catch (e:Exception) :
    print-exceptions(e)
    exit(-1)

public defn stanza-main () :
  initialize-process-launcher()
  stanza-main(command-line-arguments()[1 to false])