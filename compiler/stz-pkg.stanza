;See License.txt for details about licensing

defpackage stz/pkg :
  import core
  import collections
  import stz/asm-ir with :
    prefix(ByteT,IntT,LongT,FloatT,DoubleT) => ASM
  import stz/kl-ir
  import stz/tgt-ir
  import stz/pl-ir
  import stz/serializer
  import stz/tl-ir
  import stz/algorithms
  import stz/params

#use-added-syntax(stz-serializer-lang)

;============================================================
;=================== Package Pools ==========================
;============================================================

public deftype PkgPool
defmulti add (p:PkgPool, pkg:TGPackage) -> False
public defmulti pkgs (p:PkgPool) -> List<TGPackage>
public defmulti loaded? (p:PkgPool, name:Symbol) -> True|False
public defmulti get (p:PkgPool, name:Symbol) -> TGPackage

public defn PkgPool () :
  val pkgs = HashTable<Symbol,TGPackage>()
  new PkgPool :
    defmethod pkgs (this) :
      to-list(values(pkgs))
    defmethod add (this, pkg:TGPackage) :
      if key?(pkgs, name(pkg)) :
        throw(PackageLoadedException(name(pkg)))
      pkgs[name(pkg)] = pkg
    defmethod loaded? (this, name:Symbol) :
      key?(pkgs, name)
    defmethod get (this, name:Symbol) :
      pkgs[name]

public defn load (p:PkgPool, filename:String) :
  val f = FileInputStream(filename)
  try :
    val pkg = deserialize-package(f)
    add(p, pkg)
    pkg
  catch (e:DeserializeException) :
    throw(PackageReadException(filename))
  finally :
    close(f)

public defn load (p:PkgPool, name:Symbol) :
  load(p, pkg-filename(name))

;TODO: CHANGE THIS!
public defn save-package (filename:String, p:TGPackage) :
  val f = FileOutputStream(filename)
  try : serialize(f, p)
  finally : close(f)

;============================================================
;===================== Exceptions ===========================
;============================================================

public deftype PkgException <: Exception

;An error when attempting to read a package with a given filename.
public defstruct PackageReadException <: PkgException :
   filename: String
defmethod print (o:OutputStream, e:PackageReadException) :
   print(o, "An occurred when reading package from %_." % [filename(e)])

;An error when attempting to write a package with a given filename.
public defstruct PackageWriteException <: PkgException :
   filename: String
defmethod print (o:OutputStream, e:PackageWriteException) :
   print(o, "An occurred when writing package to %_." % [filename(e)])

;An error when the loaded package already exists.
public defstruct PackageLoadedException <: PkgException :
   name:Symbol
defmethod print (o:OutputStream, e:PackageLoadedException) :
   print(o, "Package %_ has already been loaded." % [name(e)])

;An error when no package with the given name is found.
public defstruct NoPackageException <: PkgException :
   name: Symbol
defmethod print (o:OutputStream, e:NoPackageException) :
   print(o, "Could not locate package %_." % [name(e)])

;============================================================
;==================== Name Mangling =========================
;============================================================

val VALID-FILENAME-CHARS = BitArray(256, false)
set-all(VALID-FILENAME-CHARS, to-int('0') through to-int('9'), true)
set-all(VALID-FILENAME-CHARS, to-int('a') through to-int('z'), true)
set-all(VALID-FILENAME-CHARS, to-int('A') through to-int('Z'), true)
VALID-FILENAME-CHARS[to-int('-')] = true
VALID-FILENAME-CHARS[to-int('.')] = true

val HEX-CHARS = ['0' '1' '2' '3' '4' '5' '6' '7' '8' '9' 'A' 'B' 'C' 'D' 'E' 'F']
defn to-hex (c:Char) -> String :
   val i = to-int(c)
   val c1 = HEX-CHARS[i & 0xF]
   val c2 = HEX-CHARS[(i >> 4) & 0xF]
   String([c2, c1])

defn mangle-pkg-filename (name:Symbol) :
   val buffer = StringBuffer()
   for c in to-string(name) do :
      if VALID-FILENAME-CHARS[to-int(c)] :
         add(buffer, c)
      else if c == '/' :
         add(buffer, '$')
      else :
         print(buffer, "_%_" % [to-hex(c)])
   print(buffer, ".pkg")
   to-string(buffer)

;============================================================
;===================== Pkg Search ===========================
;============================================================

defn pkg-filename (name:Symbol) :
   val mangled = mangle-pkg-filename(name)
   label<String> return :
      ;Check functions
      defn check (filename:String) : return(filename) when file-exists?(filename)
      defn check-dir (dir:String) : check(norm-path("%_/%_" % [dir, mangled]))
      defn check-dirs (dirs:Seqable<String>) : do(check-dir, dirs)
      ;Check optimized folders first
      if flag-defined?(`OPTIMIZE) :
         check-dirs(STANZA-FAST-PKG-DIRS)
         check-dir(append(STANZA-INSTALL-DIR "/fast-pkgs"))
      ;Check normal folders
      check-dirs(STANZA-PKG-DIRS)
      check-dir(append(STANZA-INSTALL-DIR "/pkgs"))
      ;No package found
      throw(NoPackageException(name))

;============================================================
;=============== Variable Length Integer ====================
;============================================================

;Variable-Length Integer
;  0 <= x < 250 :             [x]
;  250 <= x < 506 :           [250 | x - 250]
;  506 <= x < 762 :           [251 | x - 506]
;  762 <= x < 1018 :          [252 | x - 762]
;  â€“32768 <= x < 32768 :      [253 | b1 , b0]
;  -8388608 <= x < 8388608 :  [254 | b2 , b1 , b0]
;  otherwise :                [255 | b3 , b2 , b1, b0]

defn to-var-int (x:Int, Y: Byte -> False) :
  defn B0 (x:Int) : Y(to-byte(x))
  defn B1 (x:Int) : Y(to-byte(x >> 8))
  defn B2 (x:Int) : Y(to-byte(x >> 16))
  defn B3 (x:Int) : Y(to-byte(x >> 24))
  if x >= 0 :
    if x < 250 : B0(x)
    else if x < 506 : (Y(250Y), B0(x - 250))
    else if x < 762 : (Y(251Y), B0(x - 506))
    else if x < 1018 : (Y(252Y), B0(x - 762))
    else if x < 32768 : (Y(253Y), B1(x), B0(x))
    else if x < 8388608 : (Y(254Y), B2(x), B1(x), B0(x))
    else : (Y(255Y), B3(x), B2(x), B1(x), B0(x))
  else :
    if x >= -32768 : (Y(253Y), B1(x), B0(x))
    else if x >= -8388608 : (Y(254Y), B2(x), B1(x), B0(x))
    else : (Y(255Y), B3(x), B2(x), B1(x), B0(x))

defn from-var-int (N: () -> Byte) -> Int :
  defn B0 () : to-int(N())
  defn B1 () : B0() << 8
  defn B2 () : B0() << 16
  defn S1 () : (B0() << 24) >>> 16
  defn S2 () : (B0() << 24) >>> 8
  defn S3 () : (B0() << 24)

  val x = N()
  switch(x) :
    255Y : S3() | B2() | B1() | B0()
    254Y : S2() | B1() | B0()
    253Y : S1() | B0()
    252Y : B0() + 762
    251Y : B0() + 506
    250Y : B0() + 250
    else : to-int(x)

;============================================================
;=================== Serializer =============================
;============================================================

defserializer (out:FileOutputStream, in:FileInputStream) :
  ;=================
  ;==== Overall ====
  ;=================
  defunion package (TGPackage) :
    TGPackage: (name:symbol, ids:pkg-ids, entry:int, decls:vector(decl))

  ;=====================
  ;==== Package Ids ====
  ;=====================
  defunion pkg-ids (PkgIds) :
    PkgIds: (declarations:list(declare), imports:list(import-package))    
  defunion declare (Declare) :
    Declare: (n:int, id:id, info:info)
  defunion import-package (ImportPackage) :
    ImportPackage: (package:symbol, imports:list(import))
  defunion import (Import) :
    Import: (n:int, id:id)

  defunion id (Id) :
    ValId: (name:symbol, type:type, visibility:vis)
    VarId: (name:symbol, type:type, visibility:vis)
    FnId: (name:symbol, tail?:bool, targs:list(int), cargs:list(int),
           a1:list(type), a2:type, visibility:vis)
    MultiId: (name:symbol, tail?:bool, targs:list(int), cargs:list(int),
              a1:list(type), a2:type, visibility:vis)
    TypeId: (name:symbol, args:list(int), parent:opt<Type>(type),
             children:list(child), visibility:vis)
    TArgId: (name:symbol)
    LSValId: (name:symbol, type:lstype, visibility:vis)
    LSVarId: (name:symbol, type:lstype, visibility:vis)
    LSFnId: (name:symbol, tail?:bool, targs:list(int), cargs:list(int),
             a1:list(lstype), a2:lstype, visibility:vis)
    LSTypeId: (name:symbol, args:list(int), parent:opt<Type>(type),
               fields:list(field), visibility:vis)
    FieldId: (name:symbol)
    LSExternFnId: (name:symbol, lbl:symbol, a1:list(lstype), a2:lstype, visibility:vis)
    LSExternId: (name:symbol, lbl:symbol, type:lstype, visibility:vis)

  defunion vis (Visibility) :
    Private: ()
    Protected: ()
    Public: ()

  defunion child (ChildDec) :
    ChildDec: (n:int, args:list(int), parent:type)

  defunion field (FieldDec) :
    FieldDec: (n:int, type:lstype)

  ;===============
  ;==== Types ====
  ;===============
  defunion type (Type) :
    TMixed: (types:list(type as TArrow))
    TPoly : (targs:list(int), cargs:list(int), func:type as TArrow)
    TCap : (n:int)
    TOf : (n:int, type:type)
    TTuple : (types:list(type))
    TOr : (a:type, b:type)
    TAnd : (a:type, b:type)
    TVar : (n:int)
    TArrow : (a:type, b:type)
    TGradual : ()
    TBot : ()
    TUVar : (n:int)
  
  defunion lstype (LSType) :
    ByteT: ()
    IntT: ()
    LongT: ()
    FloatT: ()
    DoubleT: ()
    UnknownT: ()
    RestT: (type:lstype)
    PtrT: (type:lstype)
    RefT: (type:type)
    FnT: (a:list(lstype), r:opt<LSType>(lstype), b:lstype)
    StructT: (n:int, type:type)

  ;======================
  ;==== Declarations ====
  ;======================
  defunion decl (TGDecl) :
    TGDefASM: (n:lit as Int|Symbol, ins:vector(ins))
    TGDefmulti: (n:int, tarity:int, arity:int)
    TGDefmethod: (multi:int, tags:list(ktag), code:int)
    TGDefConst: (n:int, value:lit)
    TGDefObject: (n:int, parent:opt<KTag>(ktag), 
                  size:int, types:list(tgtype), offsets:list(int),
                  rsize:int, rtypes:list(tgtype), roffsets:list(int))
    TGDefGlobal: (n:int, size:int, alignment:int, types:list(tgtype), offsets:list(int))

  ;=================
  ;==== TGTypes ====
  ;=================
  defunion tgtype (TGType) :
    TGByteT: ()
    TGIntT: ()
    TGLongT: ()
    TGRefT: ()
    TGFloatT: ()
    TGDoubleT: ()

  ;======================
  ;==== Instructions ====
  ;======================
  defunion ins (Ins) :
    ;Function instructions
    XchgIns: (x:loc, y:loc)
    SetIns: (type:asm-type, x:loc, y:imm)
    ConvertIns: (xtype:asm-type, x:loc, ytype:asm-type, y:imm)
    InterpretIns: (xtype:asm-type, x:loc, ytype:asm-type, y:imm)
    UnaOp: (type:asm-type, x:loc, op:op, y:imm)
    BinOp: (type:asm-type, x:loc, op:op, y:imm, z:imm)
    DualOp: (type:asm-type, x1:loc, x2:loc, op:op, y:imm, z:imm)
    Load: (type:asm-type, x:loc, y:imm, offset:int)
    Store: (type:asm-type, x:imm, y:imm, offset:int)
    Call: (x:imm)
    Return: ()
    Goto: (x:imm)
    Break: (type:asm-type, x:imm, op:op, y:imm, z:imm)
    Label: (n:int)
    ExLabel: (name:symbol)
    Match: (xs:list(imm), branches:list(branch))
    Dispatch: (xs:list(imm), branches:list(branch))

    ;Data instructions
    DefData: ()
    DefText: ()
    DefByte: (value:byte)
    DefInt: (value:int)
    DefLong: (value:long)
    DefFloat: (value:float)
    DefDouble: (value:double)
    DefString: (value:string)
    DefSpace: (size:int)
    DefLabel: (n:int)

  defunion branch (Branch) :
    Branch: (tags:list(ktag), n:int)

  ;==================
  ;==== KForm IR ====
  ;==================
  defunion ktag (KTag) :
    KOf: (n:int)
    KTVar: (n:int)
    KAnd: (a:ktag, b:ktag)
    KOr: (a:ktag, b:ktag)
    KTop: ()
    KBot: ()

  ;====================
  ;==== Immediates ====
  ;====================
  defunion imm (Imm) :
    IntImm: (value:lit as Byte|Int|Long)
    TagImm: (n:int, marker?:bool)
    Mem: (n:int, offset:int)
    ExMem: (lbl:symbol, offset:int)
    RegSP: ()
    Reg: (n:int)
    FReg: (n:int)

  defatom loc (x:Loc) :
    writer :
      write-imm(x)
    reader :
      match(read-imm()) :
        (x:Loc) : x
        (x) : throw(DeserializeException())

  ;========================
  ;==== Assembly Types ====
  ;========================
  defunion asm-type (ASMType) :
    ASMByteT: ()
    ASMIntT: ()
    ASMLongT: ()
    ASMFloatT: ()
    ASMDoubleT: ()

  ;==================
  ;==== Literals ====
  ;==================
  defatom lit (x:?) :
    writer :
      match(x) :
        (x:Char) :
          write-byte(0Y)
          write-char(x)
        (x:Byte) :
          write-byte(1Y)
          write-byte(x)
        (x:Int) :
          write-byte(2Y)
          write-int(x)
        (x:Long) :
          write-byte(3Y)
          write-long(x)
        (x:Float) :
          write-byte(4Y)
          write-float(x)
        (x:Double) :
          write-byte(5Y)
          write-double(x)
        (x:String) :
          write-byte(6Y)
          write-string(x)
        (x:Symbol) :
          write-byte(7Y)
          write-symbol(x)
        (x:List) :
          write-byte(8Y)
          write-list(write-lit, x)
        (x:True) :          
          write-byte(9Y)
        (x:False) :
          write-byte(10Y)
        (x:TGTypeObject) :
          write-byte(11Y)
          write-int(n(x))
    reader :
      switch(read-byte()) :
        0Y : read-char()
        1Y : read-byte()
        2Y : read-int()
        3Y : read-long()
        4Y : read-float()
        5Y : read-double()
        6Y : read-string()
        7Y : read-symbol()
        8Y : read-list(read-lit)
        9Y : true
        10Y : false
        11Y : TGTypeObject(read-int())
        else : throw(DeserializeException())

  ;====================
  ;==== Operations ====
  ;====================
  defunion op (Op) :
    AddOp: ()
    SubOp: ()
    MulOp: ()
    DivOp: ()
    ModOp: ()
    AndOp: ()
    OrOp: ()
    XorOp: ()
    ShlOp: ()
    ShrOp: ()
    AshrOp: ()
    EqOp: ()
    NeOp: ()
    LtOp: ()
    GtOp: ()
    LeOp: ()
    GeOp: ()
    UleOp: ()
    UltOp: ()
    UgtOp: ()
    UgeOp: ()
    NotOp: ()
    NegOp: ()
    DivModOp: ()
    BitSetOp: ()
    BitNotSetOp: ()

  ;=====================
  ;==== Combinators ====
  ;=====================
  reader defn read-vector<?T> (f: () -> ?T) :
    val n = read-int()
    to-vector<T>(repeatedly(f, n))

  writer defn write-vector<?T> (f: T -> False, xs:Vector<?T>) :
    write-int(length(xs))
    do(f, xs)

  reader defn read-list<?T> (f: () -> ?T) :
    val n = read-int()
    to-list(repeatedly(f, n))

  writer defn write-list<?T> (f: T -> False, xs:List<?T>) :
    write-int(length(xs))
    do(f, xs)

  reader defn read-opt<T> (f: () -> T) :
    val n = read-byte()
    f() when n == 1Y

  writer defn write-opt<T> (f: T -> False, x:T|False) :
    match(x) :
      (x:False) :
        write-byte(0Y)
      (x:T) :
        write-byte(1Y)
        f(x)

  ;===============
  ;==== Atoms ====
  ;===============
  defunion info (FileInfo) :
    FileInfo: (filename:string, line:int, column:int)
         
  defatom bool (x:True|False) :
    writer :
      match(x) :
        (x:True) : put(out, 1Y)
        (x:False) : put(out, 0Y)
    reader :
      switch(get-byte(in)) :
        1Y : true
        0Y : false
        else : throw(DeserializeException())

  defatom int (x:Int) :
    writer :
      to-var-int(x, put{out, _})
    reader :
      from-var-int(read-byte)

  defatom long (x:Long) :
    writer :
      put(out, x)
    reader :
      match(get-long(in)) :
        (x:Long) : x
        (x:False) : throw(DeserializeException())

  defatom float (x:Float) :
    writer :
      put(out, x)
    reader :
      match(get-float(in)) :
        (x:Float) : x
        (x:False) : throw(DeserializeException())

  defatom double (x:Double) :
    writer :
      put(out, x)
    reader :
      match(get-double(in)) :
        (x:Double) : x
        (x:False) : throw(DeserializeException())

  defatom byte (x:Byte) :
    writer :
      put(out, x)
    reader :
      match(get-byte(in)) :
        (x:Byte) : x
        (x:False) : throw(DeserializeException())

  defatom char (x:Char) :
    writer :
      print(out, x)
    reader :
      match(get-char(in)) :
        (x:Char) : x
        (x:False) : throw(DeserializeException())

  defatom string (x:String) :
    writer :
      write-int(length(x))
      print(out, x)
    reader :
      val n = read-int()
      String(repeatedly(read-char, n))

  defatom symbol (x:Symbol) :
    writer :
      write-string(to-string(x))
    reader :
      to-symbol(read-string())
