;See License.txt for details about licensing
#use-added-syntax(stz-serializer-lang)

defpackage stz/pkg :
  import core
  import collections
  ;import stz/asm-ir with :
  ;  prefix(ByteT,IntT,LongT,FloatT,DoubleT) => ASM
  ;import stz/kl-ir
  ;import stz/tgt-ir
  ;import stz/pl-ir

  ;import stz/tl-ir
  ;import stz/primitives

  import stz/algorithms
  import stz/params
  import stz/serializer
  import stz/utils
  import stz/typeset
  import stz/asm-ir with :
    prefix(AddOp, SubOp, MulOp, DivOp, ModOp, AndOp, OrOp, XorOp, ShlOp,
           ShrOp, AshrOp, EqOp, NeOp, LtOp, GtOp, LeOp, GeOp, UleOp,
           UltOp, UgtOp, UgeOp, NotOp, NegOp, DivModOp, BitSetOp, BitNotSetOp,
           TypeofOp, XchgIns, SetIns, ConvertIns, InterpretIns, UnaOp, BinOp,
           DualOp, Load, Store, Call, Return, Goto, Break, Label, LinkLabel,
           ExLabel, Match, Dispatch, MethodDispatch, DefData, DefText, DefByte,
           DefInt, DefLong, DefFloat, DefDouble, DefString, DefBytes, DefSpace, DefLabel) => asm-
  import stz/visibility
  import stz/dl-ir
  import stz/basic-ops
  import stz/vm-ir



;============================================================
;=================== Package Pools ==========================
;============================================================

public defn find-and-load-package (name:Symbol) :
  val filename = pkg-filename(name)
  [filename, load-package(filename)]

public defn load-package (filename:String) -> Pkg :
  val f = FileInputStream(filename)
  try : deserialize-pkg(f)
  catch (e:DeserializeException) : throw(PackageReadException(filename))
  finally : close(f)

public defn save-package (dir:String, p:Pkg) :
  val filename = norm-path("%_/%_.pkg" % [dir, mangle-as-filename(name(p))])
  val f = FileOutputStream(filename)
  try : serialize(f, p)
  catch (e:SerializeException) : throw(PackageWriteException(filename))
  finally : close(f)

;============================================================
;===================== Exceptions ===========================
;============================================================

public deftype PkgException <: Exception

;An error when attempting to read a package with a given filename.
public defstruct PackageReadException <: PkgException :
   filename: String
defmethod print (o:OutputStream, e:PackageReadException) :
   print(o, "An occurred when reading package from %_." % [filename(e)])

;An error when attempting to write a package with a given filename.
public defstruct PackageWriteException <: PkgException :
   filename: String
defmethod print (o:OutputStream, e:PackageWriteException) :
   print(o, "An occurred when writing package to %_." % [filename(e)])

;An error when the loaded package already exists.
public defstruct PackageLoadedException <: PkgException :
   name:Symbol
defmethod print (o:OutputStream, e:PackageLoadedException) :
   print(o, "Package %_ has already been loaded." % [name(e)])

;An error when no package with the given name is found.
public defstruct NoPackageException <: PkgException :
   name: Symbol
defmethod print (o:OutputStream, e:NoPackageException) :
   print(o, "Could not locate package %_." % [name(e)])

;============================================================
;===================== Pkg Search ===========================
;============================================================

defn pkg-filename (name:Symbol) :
  val mangled = mangle-as-filename(name)
  label<String> return :
    ;Check functions
    defn check-file (filename:String) : return(filename) when file-exists?(filename)
    defn check-dir (dir:String) : check-file(norm-path("%_/%_.pkg" % [dir, mangled]))
    defn check-dirs (dirs:Seqable<String>) : do(check-dir, dirs)
    ;Check optimized folders first
    if flag-defined?(`OPTIMIZE) :
       check-dirs(STANZA-FAST-PKG-DIRS)
       check-dir(append(STANZA-INSTALL-DIR "/fast-pkgs"))
    ;Check normal folders
    check-dirs(STANZA-PKG-DIRS)
    check-dir(append(STANZA-INSTALL-DIR "/pkgs"))
    ;No package found
    throw(NoPackageException(name))

;============================================================
;=============== Variable Length Integer ====================
;============================================================

;Variable-Length Integer
;  0 <= x < 250 :             [x]
;  250 <= x < 506 :           [250 | x - 250]
;  506 <= x < 762 :           [251 | x - 506]
;  762 <= x < 1018 :          [252 | x - 762]
;  â€“32768 <= x < 32768 :      [253 | b1 , b0]
;  -8388608 <= x < 8388608 :  [254 | b2 , b1 , b0]
;  otherwise :                [255 | b3 , b2 , b1, b0]

defn to-var-int (x:Int, Y: Byte -> False) :
  defn B0 (x:Int) : Y(to-byte(x))
  defn B1 (x:Int) : Y(to-byte(x >> 8))
  defn B2 (x:Int) : Y(to-byte(x >> 16))
  defn B3 (x:Int) : Y(to-byte(x >> 24))
  if x >= 0 :
    if x < 250 : B0(x)
    else if x < 506 : (Y(250Y), B0(x - 250))
    else if x < 762 : (Y(251Y), B0(x - 506))
    else if x < 1018 : (Y(252Y), B0(x - 762))
    else if x < 32768 : (Y(253Y), B1(x), B0(x))
    else if x < 8388608 : (Y(254Y), B2(x), B1(x), B0(x))
    else : (Y(255Y), B3(x), B2(x), B1(x), B0(x))
  else :
    if x >= -32768 : (Y(253Y), B1(x), B0(x))
    else if x >= -8388608 : (Y(254Y), B2(x), B1(x), B0(x))
    else : (Y(255Y), B3(x), B2(x), B1(x), B0(x))

defn from-var-int (N: () -> Byte) -> Int :
  defn B0 () : to-int(N())
  defn B1 () : B0() << 8
  defn B2 () : B0() << 16
  defn S1 () : (B0() << 24) >>> 16
  defn S2 () : (B0() << 24) >>> 8
  defn S3 () : (B0() << 24)

  val x = N()
  switch(x) :
    255Y : S3() | B2() | B1() | B0()
    254Y : S2() | B1() | B0()
    253Y : S1() | B0()
    252Y : B0() + 762
    251Y : B0() + 506
    250Y : B0() + 250
    else : to-int(x)

;============================================================
;=================== Pkg Definitions ========================
;============================================================

public deftype Pkg
public defstruct StdPkg <: Pkg :
  vmp: VMPackage
  asm: Tuple<Ins>

defn name (pkg:Pkg) :
  package(packageio(vmp(pkg as StdPkg)))

;============================================================
;=================== Serializer =============================
;============================================================

defserializer (out:FileOutputStream, in:FileInputStream) :

  ;=============
  ;==== Pkg ====
  ;=============
  defunion pkg (Pkg) :
    StdPkg: (vmp:vmpackage, asm:tuple(ins))

  ;=================
  ;==== Overall ====
  ;=================
  ;defunion package (TGPackage|KPackage) :
  ;  TGPackage: (name:symbol, ids:pkg-ids, entry:int, decls:vector(decl))
  ;  KPackage: (name:symbol, ids:pkg-ids, exps:list(ktexp))
  ;
  ;;=====================
  ;;==== Package Ids ====
  ;;=====================
  ;defunion pkg-ids (PkgIds) :
  ;  PkgIds: (version:tuple(int), platform:symbol, declarations:list(declare), imports:list(import-package))
  ;defunion declare (Declare) :
  ;  Declare: (n:int, id:id, info:opt<FileInfo>(info))
  ;defunion import-package (ImportPackage) :
  ;  ImportPackage: (package:symbol, imports:list(import))
  ;defunion import (Import) :
  ;  Import: (n:int, id:id)
  ;
  ;defunion id (Id) :
  ;  ValId: (name:symbol, type:type, visibility:vis)
  ;  VarId: (name:symbol, type:type, visibility:vis)
  ;  FnId: (name:symbol, tail?:bool, targs:list(int), cargs:list(int),
  ;         a1:list(type), a2:type, visibility:vis)
  ;  MultiId: (name:symbol, tail?:bool, targs:list(int), cargs:list(int),
  ;            a1:list(type), a2:type, visibility:vis)
  ;  TypeId: (name:symbol, args:list(int), parent:opt<Type>(type),
  ;           children:list(child), visibility:vis)
  ;  TArgId: (name:symbol)
  ;  LSValId: (name:symbol, type:lstype, visibility:vis)
  ;  LSVarId: (name:symbol, type:lstype, visibility:vis)
  ;  LSFnId: (name:symbol, tail?:bool, targs:list(int), cargs:list(int),
  ;           a1:list(lstype), a2:lstype, visibility:vis)
  ;  LSTypeId: (name:symbol, args:list(int), parent:opt<Type>(type),
  ;             fields:list(field), visibility:vis)
  ;  FieldId: (name:symbol)
  ;  LSExternFnId: (name:symbol, lbl:symbol, a1:list(lstype), a2:lstype, visibility:vis)
  ;  LSExternId: (name:symbol, lbl:symbol, type:lstype, visibility:vis)
  ;
  ;defunion vis (Visibility) :
  ;  Private: ()
  ;  Protected: ()
  ;  Public: ()
  ;
  ;defunion child (ChildDec) :
  ;  ChildDec: (n:int, args:list(int), parent:type)
  ;
  ;defunion field (FieldDec) :
  ;  FieldDec: (n:int, name:symbol, type:lstype)

  ;===============
  ;==== Types ====
  ;===============
  ;defunion type (Type) :
  ;  TMixed: (types:list(type as TArrow))
  ;  TPoly : (targs:list(int), cargs:list(int), func:type as TArrow)
  ;  TCap : (n:int)
  ;  TOf : (n:int, type:type)
  ;  TTuple : (types:list(type))
  ;  TOr : (a:type, b:type)
  ;  TAnd : (a:type, b:type)
  ;  TVar : (n:int)
  ;  TArrow : (a:type, b:type)
  ;  TGradual : ()
  ;  TBot : ()
  ;  TUVar : (n:int)
  ;
  ;defunion lstype (LSType) :
  ;  ByteT: ()
  ;  IntT: ()
  ;  LongT: ()
  ;  FloatT: ()
  ;  DoubleT: ()
  ;  UnknownT: ()
  ;  RestT: (type:lstype)
  ;  PtrT: (type:lstype)
  ;  RefT: (type:type)
  ;  FnT: (a:list(lstype), r:opt<LSType>(lstype), b:lstype)
  ;  StructT: (n:int, type:type)
  ;
  ;;======================
  ;;==== Declarations ====
  ;;======================
  ;defunion decl (TGDecl) :
  ;  TGDefASM: (n:lit as Int|Symbol, ins:vector(ins))
  ;  TGDefmulti: (n:int, tarity:int, arity:int, info:opt<FileInfo>(info))
  ;  TGDefmethod: (multi:int, tags:list(ktype), code:int)
  ;  TGDefConst: (n:int, value:lit)
  ;  TGDefObject: (n:int, name:string, parent:opt<KType>(ktype),
  ;                size:int, types:list(tgtype), offsets:list(int),
  ;                rsize:int, rtypes:list(tgtype), roffsets:list(int))
  ;  TGDefGlobal: (n:int, size:int, alignment:int, types:list(tgtype), offsets:list(int))
  ;
  ;;=================
  ;;==== TGTypes ====
  ;;=================
  ;defunion tgtype (TGType) :
  ;  TGByteT: ()
  ;  TGIntT: ()
  ;  TGLongT: ()
  ;  TGRefT: ()
  ;  TGFloatT: ()
  ;  TGDoubleT: ()

  ;======================
  ;==== Instructions ====
  ;======================
  ;defunion ins (Ins) :
  ;  ;Function instructions
  ;  XchgIns: (x:loc, y:loc)
  ;  SetIns: (type:asm-type, x:loc, y:imm)
  ;  ConvertIns: (xtype:asm-type, x:loc, ytype:asm-type, y:imm)
  ;  InterpretIns: (xtype:asm-type, x:loc, ytype:asm-type, y:imm)
  ;  UnaOp: (type:asm-type, x:loc, op:op, y:imm)
  ;  BinOp: (type:asm-type, x:loc, op:op, y:imm, z:imm)
  ;  DualOp: (type:asm-type, x1:loc, x2:loc, op:op, y:imm, z:imm)
  ;  Load: (type:asm-type, x:loc, y:imm, offset:int)
  ;  Store: (type:asm-type, x:imm, y:imm, offset:int)
  ;  Call: (x:imm)
  ;  Return: ()
  ;  Goto: (x:imm)
  ;  Break: (type:asm-type, x:imm, op:op, y:imm, z:imm)
  ;  Label: (n:int, info:opt<FileInfo>(info))
  ;  ExLabel: (name:symbol)
  ;  Match: (xs:list(imm), branches:list(branch), no-branch:int)
  ;  Dispatch: (xs:list(imm), branches:list(branch), no-branch:int, amb-branch:int)
  ;
  ;  ;Data instructions
  ;  DefData: ()
  ;  DefText: ()
  ;  DefByte: (value:byte)
  ;  DefInt: (value:int)
  ;  DefLong: (value:long)
  ;  DefFloat: (value:float)
  ;  DefDouble: (value:double)
  ;  DefString: (value:string)
  ;  DefSpace: (size:int)
  ;  DefLabel: (n:int)
  ;
  ;defunion branch (Branch) :
  ;  Branch: (tags:list(ktype), n:int)
  ;
  ;;==================
  ;;==== KForm IR ====
  ;;==================
  ;defunion ktype (KType) :
  ;  KByteT: ()
  ;  KIntT: ()
  ;  KLongT: ()
  ;  KFloatT: ()
  ;  KDoubleT: ()
  ;  KUnknownT: ()
  ;  KPtrT: (type:ktype)
  ;  KFnT: (a:list(ktype), r:opt<KType>(ktype), b:ktype)
  ;  KStructT : (n:int)
  ;
  ;  KOf: (n:int)
  ;  KTVar: (n:int)
  ;  KAnd: (a:ktype, b:ktype)
  ;  KOr: (a:ktype, b:ktype)
  ;  KTop: ()
  ;  KBot: ()
  ;
  ;defunion kfield (KStructField) :
  ;  KStructField: (n:int, type:ktype)
  ;
  ;defunion kchild (KChild) :
  ;  KChild: (n:int, parent:ktype)
  ;
  ;defunion kfnprops (KFnProperties) :
  ;  KFnProperties: (show-optimization?:bool)
  ;
  ;defunion stackprops (StackProperties) :
  ;  NewStack: ()
  ;  LastStack: ()
  ;  CheckStack: ()
  ;
  ;defunion ktexp (KTExp) :
  ;  KDef*: (n:int, type:ktype, value:kexp, info:opt<FileInfo>(info))
  ;  KDefVar*: (n:int, type:ktype, value:opt<KExp>(kexp), info:opt<FileInfo>(info))
  ;  KDefmethod*: (props:kfnprops, multi:int, targs:list(ktype), value:kexp)
  ;  KDef: (n:int, type:ktype, value:kexp)
  ;  KDefVar: (n:int, type:ktype, value:opt<KExp>(kexp))
  ;  KDefn: (props:kfnprops, private?:bool, n:int, value:kexp)
  ;  KDefmulti: (private?:bool, n:int, tail?:bool, targs:list(int), a1:list(ktype),
  ;              a2:ktype, info:opt<FileInfo>(info))
  ;  KDefmethod: (props:kfnprops, n:int, multi:int, value:kexp)
  ;  KDefType: (n:int, name:string, parent:opt<KType>(ktype), children:list(kchild))
  ;  KDefStruct: (n:int, name:string, parent:opt<KType>(ktype), fields:list(kfield),
  ;               rfield:opt<KStructField>(kfield))
  ;  KExternFn: (props:kfnprops, n:int, lbl:symbol, value:kexp)
  ;  KExtern: (n:int, lbl:symbol, type:ktype)
  ;  KInit: (exp:kexp)
  ;
  ;defunion kexp (KExp) :
  ;  KFn*: (tail?:bool, targs:list(int), a1:list(ktype), a2:ktype, args:list(int), body:kexp, info:opt<FileInfo>(info))
  ;  KDo*: (func:kexp, args:list(kexp), a1:list(ktype), a2:ktype, info:opt<FileInfo>(info))
  ;  KVar*: (n:int, info:opt<FileInfo>(info))
  ;  KLet*: (n:int, type:ktype, value:kexp, body:kexp, info:opt<FileInfo>(info))
  ;  KLetVar*: (n:int, type:ktype, value:opt<KExp>(kexp), body:kexp, info:opt<FileInfo>(info))
  ;
  ;  KSet*: (loc:kloc, type:ktype, value:kexp, info:opt<FileInfo>(info))
  ;  KMethod*: (props:kfnprops, multi:int, targs:list(ktype), thisn:int, value:kexp)
  ;  KBranch*: (args:list(int), types:list(ktype), body:kexp, info:opt<FileInfo>(info))
  ;  KLet: (n:int, value:kexp, body:kexp)
  ;  KLetVar: (n:int, type:ktype, value:opt<KExp>(kexp), body:kexp)
  ;  KLetRec: (ns:list(int), values:list(kexp), body:kexp)
  ;  KVar: (n:int)
  ;  KSet: (loc:kloc, type:ktype, value:kexp)
  ;  KNew: (type:ktype, name:string, methods:list(kexp), info:opt<FileInfo>(info))
  ;  KTuple: (exps:list(kexp), info:opt<FileInfo>(info))
  ;  KTupleGet: (exp:kexp, index:int)
  ;  KEnsureLength: (exp:kexp, length:int, info:opt<FileInfo>(info))
  ;  KObject: (n:int, args:list(kexp), info:opt<FileInfo>(info))
  ;  KArray: (n:int, args:list(kexp), info:opt<FileInfo>(info))
  ;  KStruct: (n:int, args:list(kexp))
  ;  KPtr: (loc:kloc)
  ;  KRead: (loc:kloc, type:ktype)
  ;  KDo: (func:kexp, args:list(kexp), type:ktype, info:opt<FileInfo>(info))
  ;  KDoC: (func:kexp, args:list(kexp), varargs:list(kexp), type:ktype)
  ;  KLSLiteral: (value:lit)
  ;  KLiteral: (value:lit)
  ;  KMix: (exps:list(kexp))
  ;  KCurry: (n:int, targs:list(ktype))
  ;  KInterpret: (exp:kexp, type:ktype)
  ;  KCheck: (exp:kexp, type:ktype, option:int, info:opt<FileInfo>(info))
  ;  KConv: (exp:kexp, type:ktype)
  ;  KAndExp: (a:kexp, b:kexp)
  ;  KOrExp: (a:kexp, b:kexp)
  ;  KPrim: (op:primitive, args:list(kexp), type:ktype)
  ;  KSizeof: (type:ktype)
  ;  KTagof: (n:int)
  ;  KMatch: (args:list(kexp), branches:list(kexp), info:opt<FileInfo>(info))
  ;  KBranch: (args:list(int), types:list(ktype), body:kexp)
  ;  KLabels: (blocks:list(kexp))
  ;  KBlock: (n:int, targs:list(int), args:list(int), types:list(ktype), body:kexp)
  ;  KIf: (pred:kexp, conseq:kexp, alt:kexp)
  ;  KSeq: (a:kexp, b:kexp)
  ;  KGoto: (n:int, targs:list(ktype), args:list(kexp))
  ;  KReturn: (exp:kexp)
  ;  KFn: (tail?:bool, stack-properties:stackprops, targs:list(int),
  ;        a1:list(ktype), a2:ktype, args:list(int), body:kexp, info:opt<FileInfo>(info))
  ;  KMultifn: (funcs:list(kexp))
  ;  KMethod: (props:kfnprops, multi:int, thisn:int, value:kexp)
  ;
  ;defunion kloc (KLoc) :
  ;  KValue: (exp:kexp)
  ;  KDeref: (exp:kexp)
  ;  KDeptr: (exp:kexp)
  ;  KField: (exp:kloc, n:int)
  ;  KSlot: (exp:kloc, type:ktype, index:kexp)
  ;  KVarLoc: (n:int)
  ;
  ;defatom primitive (x:Primitive|LSPrimitive) :
  ;  writer :
  ;    write-bool(x is Primitive)
  ;    put(out, prim-code(x))
  ;  reader :
  ;    if read-bool() : primitive!(read-byte())
  ;    else : ls-primitive!(read-byte())
  ;


  ;==================
  ;==== Literals ====
  ;==================
  defatom lit (x:?) :
    writer :
      match(x) :
        (x:Char) :
          write-byte(0Y)
          write-char(x)
        (x:Byte) :
          write-byte(1Y)
          write-byte(x)
        (x:Int) :
          write-byte(2Y)
          write-int(x)
        (x:Long) :
          write-byte(3Y)
          write-long(x)
        (x:Float) :
          write-byte(4Y)
          write-float(x)
        (x:Double) :
          write-byte(5Y)
          write-double(x)
        (x:String) :
          write-byte(6Y)
          write-string(x)
        (x:Symbol) :
          write-byte(7Y)
          write-symbol(x)
        (x:List) :
          write-byte(8Y)
          write-list(write-lit, x)
        (x:True) :
          write-byte(9Y)
        (x:False) :
          write-byte(10Y)
        (x:VMTypeObject) :
          write-byte(11Y)
          write-vmimm(id(x))
        (x:VMClosure) :
          write-byte(12Y)
          write-vmimm(id(x))
        (x:VMInternedConst) :
          write-byte(13Y)
          write-vmimm(id(x))
    reader :
      defn read-codeid () :
        match(read-vmimm()) :
          (x:CodeId) : x
          (x) : throw(DeserializeException())
      defn read-constid () :
        match(read-vmimm()) :
          (x:ConstId) : x
          (x) : throw(DeserializeException())

      switch(read-byte()) :
        0Y : read-char()
        1Y : read-byte()
        2Y : read-int()
        3Y : read-long()
        4Y : read-float()
        5Y : read-double()
        6Y : read-string()
        7Y : read-symbol()
        8Y : read-list(read-lit)
        9Y : true
        10Y : false
        11Y : VMTypeObject(read-codeid())
        12Y : VMClosure(read-codeid())
        13Y : VMInternedConst(read-constid())
        else : throw(DeserializeException())

  ;===================
  ;==== PackageIO ====
  ;===================
  defunion packageio (PackageIO) :
    PackageIO: (package:symbol, imported-packages:tuple(symbol), imports:tuple(dimport), exports:tuple(dexport))

  defunion dexport (Export) :
    Export: (n:int, visibility:visibility, rec:drec, info:opt<FileInfo>(info))

  defunion dimport (Import) :
    Import: (n:int, rec:drec, transient?:bool)

  defunion visibility (Visibility) :
    Private: ()
    Protected: ()
    Public: ()

  ;================
  ;==== DTypes ====
  ;================
  defunion dtype (DType) :
    DByte: ()
    DInt: ()
    DLong: ()
    DFloat: ()
    DDouble: ()
    DUnknown: ()
    DPtrT: (type:dtype)
    DFnT: (a:tuple(dtype), r:opt<DType>(dtype), b:dtype)
    DStructT: (id:drecid as TypeId, targs:tuple(dtype))
    DOf: (id:drecid as TypeId, targs:tuple(dtype))
    DTVar: (index:int)
    DCap: (tvar:dtype as DTVar)
    DAnd: (types:tuple(dtype))
    DOr: (types:tuple(dtype))
    DTop: ()
    DBot: ()
    DTuple: (types:tuple(dtype))
    DArrow: (a1:tuple(dtype), a2:dtype)

  ;==================
  ;==== DRecords ====
  ;==================
  defunion drecid (RecId) :
    ValId: (package:symbol, name:symbol)
    TypeId: (package:symbol, name:symbol)
    FnId: (package:symbol, name:symbol, ntargs:int, ncargs:int, a1:tuple(dtype))

  defunion drec (Rec) :
    ValRec: (id:drecid as ValId, type:dtype, mutable?:bool, lostanza?:bool)
    FnRec: (id:drecid as FnId, a2:dtype, lostanza?:bool, tail?:bool)
    MultiRec: (id:drecid as FnId, a2:dtype)
    ExternFnRec: (id:drecid as FnId, a2:dtype, lbl:symbol)
    ExternRec: (id:drecid as ValId, type:dtype, lbl:symbol)
    StructRec: (id:drecid as TypeId, ntargs:int, parent:opt<DType>(dtype), base:tuple(structfield), items:opt<StructField>(structfield))
    TypeRec: (id:drecid as TypeId, ntargs:int, parent:opt<DType>(dtype), children:tuple(child))
    TypeDecl: (id:drecid as TypeId, ntargs:int, parent:opt<DType>(dtype))

  defunion structfield (StructField) :
    StructField: (name:symbol, type:dtype)

  defunion child (Child) :
    Child: (id:drecid as TypeId, ntargs:int, parent:dtype as DOf)

  ;==========================
  ;==== VM Datastructure ====
  ;==========================
  defunion vmpackage (VMPackage) :
    VMPackage: (packageio:packageio, init:opt<Int>(int), globals:tuple(vmglobal),
                datas:tuple(vmdata), consts:tuple(vmconst), classes:tuple(vmclass),
                funcs:tuple(vmdefn), methods:tuple(vmmethod), externs:tuple(vmextern),
                extern-defns:tuple(vmexterndefn))

  defunion vmimm (VMImm) :
    Local: (index:int)
    NumConst: (value:lit)
    Marker: (typeid:int)
    Tag: (typeid:int)
    CodeId: (id:int)
    ExternId: (id:int)
    ExternDefnId: (id:int)
    GlobalId: (id:int)
    DataId: (id:int)
    ConstId: (id:int)
    VoidMarker: ()

  defunion vmtype (VMType) :
    VMByte: ()
    VMInt: ()
    VMLong: ()
    VMFloat: ()
    VMDouble: ()
    VMRef: ()

  defunion vmfunc (VMFunction) :
    VMMultifn: (arg:int, funcs:tuple(func-entry), default:vmfunc as VMFunc)
    VMFunc: (args:tuple(func-arg), defs:tuple(vmdef), ins:tuple(vmins))

  defatom func-arg (x:Local|VMType) :
    writer :
      match(x) :
        (x:Local) :
          write-byte(0Y)
          write-vmimm(x)
        (x:VMType) :
          write-byte(1Y)
          write-vmtype(x)
    reader :
      defn read-local () :
        match(read-vmimm()) :
          (x:Local) : x
          (x) : throw(DeserializeException())
      switch(read-byte()) :
        0Y : read-local()
        1Y : read-vmtype()
        else : throw(DeserializeException())

  defatom func-entry (x:KeyValue<Int,VMFunc>) :
    writer :
      write-int(key(x))
      write-vmfunc(value(x))
    reader :
      val k = read-int()
      val f = read-vmfunc()
      throw(DeserializeException()) when f is-not VMFunc
      k => f as VMFunc

  defunion vmextern (VMExtern) :
    VMExtern: (id:int, name:symbol)

  defunion vmglobal (VMGlobal):
    VMGlobal: (id:int, size:int, roots:tuple(int))

  defunion vmdata (VMData):
    VMData: (id:int, data:bytearray)

  defunion vmconst (VMConst):
    VMConst: (id:int, value:lit)

  defunion vmdef (VMDef):
    VMDef: (id:int, type:vmtype, local:int)

  defunion vmdefn (VMDefn):
    VMDefn: (id:int, dependencies:tuple(int), func:vmfunc)

  defunion vmexterndefn (VMExternDefn):
    VMExternDefn: (lbl:symbol, fid:int, a1:tuple(vmtype), a2:vmtype)

  defunion vmmethod (VMMethod):
    VMMethod: (instance?:bool, multi:int, types:tuple(typeset), fid:int)

  defunion vmclass (VMClass) :
    VMArrayClass: (id:int, dependencies:tuple(int), parents:tuple(int),
                   base-size:int, item-size:int, base-roots:tuple(int), item-roots:tuple(int))
    VMLeafClass: (id:int, dependencies:tuple(int), parents:tuple(int), size:int, roots:tuple(int))
    VMAbstractClass: (id:int, parents:tuple(int), children:tuple(int))

  defunion vmins (VMIns) :
    CallIns: (xs:tuple(func-arg), f:vmimm, ys:tuple(vmimm), info:opt<FileInfo>(info))
    CallClosureIns: (xs:tuple(func-arg), f:vmimm, ys:tuple(vmimm), info:opt<FileInfo>(info))
    TCallIns: (f:vmimm, ys:tuple(vmimm))
    TCallClosureIns: (f:vmimm, ys:tuple(vmimm))
    CallCIns: (xs:tuple(func-arg), f:vmimm, ys:tuple(vmimm), info:opt<FileInfo>(info))
    YieldIns: (enter?:bool, xs:tuple(func-arg), f:vmimm, ys:tuple(vmimm), info:opt<FileInfo>(info))
    SetIns: (x:vmimm as Local, y:vmimm)
    Op0Ins: (x:vmimm as Local, op:vmop)
    Op1Ins: (x:vmimm as Local, op:vmop, y:vmimm)
    Op2Ins: (x:vmimm as Local, op:vmop, y:vmimm, z:vmimm)
    LabelIns: (n:int)
    GotoIns: (n:int)
    Branch0Ins: (n1:int, n2:int, op:vmop)
    Branch1Ins: (n1:int, n2:int, op:opt<VMOp>(vmop), x:vmimm)
    Branch2Ins: (n1:int, n2:int, op:vmop, x:vmimm, y:vmimm)
    DispatchIns: (ys:tuple(vmimm), branches:tuple(vmbranch), default:int, amb:int)
    MatchIns: (ys:tuple(vmimm), branches:tuple(vmbranch), default:int)
    MethodDispatchIns: (multi:int, ys:tuple(vmimm), zs:tuple(vmimm), default:int, amb:int)
    AllocIns: (xs:tuple(vmimm as Local), types:tuple(int), sizes:tuple(vmimm), info:opt<FileInfo>(info))
    StoreIns: (x:vmimm, y:opt<VMImm>(vmimm), offset:int, z:vmimm, class:opt<Int>(int))
    LoadIns: (x:vmimm as Local, y:vmimm, z:opt<VMImm>(vmimm), offset:int, class:opt<Int>(int))
    ReturnIns: (xs:tuple(vmimm))
    DumpIns: (xs:tuple(vmimm as Local))
    RecordLiveIns: (live:tuple(vmimm as Local))
    LiveIns: (xs:tuple(vmimm))
    CommentIns: (message:string)
    UnreachableIns: ()

  defunion vmbranch (VMBranch) :
    VMBranch: (types:tuple(typeset), n:int)

  defunion vmop (VMOp) :
    IntAddOp: ()
    IntSubOp: ()
    IntMulOp: ()
    IntDivOp: ()
    IntModOp: ()
    IntAndOp: ()
    IntOrOp: ()
    IntXorOp: ()
    IntNotOp: ()
    IntShlOp: ()
    IntShrOp: ()
    IntAshrOp: ()
    IntLtOp: ()
    IntGtOp: ()
    IntLeOp: ()
    IntGeOp: ()
    IntNegOp: ()
    AddOp: ()
    SubOp: ()
    MulOp: ()
    DivOp: ()
    ModOp: ()
    AndOp: ()
    OrOp: ()
    XorOp: ()
    NotOp: ()
    ShlOp: ()
    ShrOp: ()
    AshrOp: ()
    NegOp: ()
    EqOp: ()
    NeOp: ()
    LtOp: ()
    GtOp: ()
    LeOp: ()
    GeOp: ()
    UleOp: ()
    UltOp: ()
    UgtOp: ()
    UgeOp: ()
    FlushVMOp: ()
    GCOp: ()
    ClassNameOp: ()
    PrintStackTraceOp: ()
    InstanceofOp: (type:typeset)
    TagOp: (type:int)
    DetagOp: (type:int)
    ConvOp: ()
    InterpretOp: ()
    DerefOp: ()


  ;========================
  ;==== Assembly Types ====
  ;========================
  defunion asm-type (ASMType) :
    ByteT: ()
    IntT: ()
    LongT: ()
    FloatT: ()
    DoubleT: ()

  ;=============================
  ;==== Assembly Operations ====
  ;=============================
  defunion op (Op) :
    asm-AddOp: ()
    asm-SubOp: ()
    asm-MulOp: ()
    asm-DivOp: ()
    asm-ModOp: ()
    asm-AndOp: ()
    asm-OrOp: ()
    asm-XorOp: ()
    asm-ShlOp: ()
    asm-ShrOp: ()
    asm-AshrOp: ()
    asm-EqOp: ()
    asm-NeOp: ()
    asm-LtOp: ()
    asm-GtOp: ()
    asm-LeOp: ()
    asm-GeOp: ()
    asm-UleOp: ()
    asm-UltOp: ()
    asm-UgtOp: ()
    asm-UgeOp: ()
    asm-NotOp: ()
    asm-NegOp: ()
    asm-DivModOp: ()
    asm-BitSetOp: ()
    asm-BitNotSetOp: ()
    asm-TypeofOp: (tag:typeset)

  ;=============================
  ;==== Assembly Immediates ====
  ;=============================
  defunion imm (Imm) :
    IntImm: (value:lit as Byte|Int|Long)
    Mem: (n:int, offset:int)
    ExMem: (lbl:symbol, offset:int)
    LocalMem: (n:int)
    TagImm: (n:int, marker?:bool)
    LinkId: (id:int)
    StackMap: (size:int, indices:tuple(int))
    RegSP: ()
    Reg: (n:int)
    FReg: (n:int)

  defatom loc (x:Loc) :
    writer :
      write-imm(x)
    reader :
      match(read-imm()) :
        (x:Loc) : x
        (x) : throw(DeserializeException())

  ;===============================
  ;==== Assembly Instructions ====
  ;===============================
  defunion ins (Ins) :
    asm-XchgIns: (x:loc, y:loc)
    asm-SetIns: (type:asm-type, x:loc, y:imm)
    asm-ConvertIns: (xtype:asm-type, x:loc, ytype:asm-type, y:imm)
    asm-InterpretIns: (xtype:asm-type, x:loc, ytype:asm-type, y:imm)
    asm-UnaOp: (type:asm-type, x:loc, op:op, y:imm)
    asm-BinOp: (type:asm-type, x:loc, op:op, y:imm, z:imm)
    asm-DualOp: (type:asm-type, x1:loc, x2:loc, op:op, y:imm, z:imm)
    asm-Load: (type:asm-type, x:loc, y:imm, offset:int)
    asm-Store: (type:asm-type, x:imm, y:imm, offset:int)
    asm-Call: (x:imm)
    asm-Return: ()
    asm-Goto: (x:imm)
    asm-Break: (type:asm-type, x:imm, op:op, y:imm, z:imm)
    asm-Label: (n:int, info:opt<FileInfo>(info))
    asm-LinkLabel: (id:int)
    asm-ExLabel: (name:symbol)
    asm-Match: (xs:list(imm), branches:list(branch), no-branch:imm)
    asm-Dispatch: (xs:list(imm), branches:list(branch), no-branch:imm, amb-branch:imm)
    asm-MethodDispatch: (multi:int, num-header-args:int, no-branch:imm, amb-branch:imm)
    asm-DefData: ()
    asm-DefText: ()
    asm-DefByte: (value:byte)
    asm-DefInt: (value:int)
    asm-DefLong: (value:long)
    asm-DefFloat: (value:float)
    asm-DefDouble: (value:double)
    asm-DefString: (value:string)
    asm-DefBytes: (value:bytearray)
    asm-DefSpace: (size:int)
    asm-DefLabel: (n:int)

  defunion branch (Branch) :
    Branch: (tags:list(typeset), dst:imm)

  ;=================
  ;==== Typeset ====
  ;=================
  defunion typeset (TypeSet) :
    AndType: (types:tuple(typeset))
    OrType: (types:tuple(typeset))
    SingleType: (type:int)
    TopType: ()

  ;=====================
  ;==== Combinators ====
  ;=====================
  reader defn read-vector<?T> (f: () -> ?T) :
    val n = read-int()
    to-vector<T>(repeatedly(f, n))

  writer defn write-vector<?T> (f: T -> False, xs:Vector<?T>) :
    write-int(length(xs))
    do(f, xs)

  reader defn read-tuple<?T> (f: () -> ?T) :
    val n = read-int()
    to-tuple(repeatedly(f, n))

  writer defn write-tuple<?T> (f: T -> False, xs:Tuple<?T>) :
    write-int(length(xs))
    do(f, xs)

  reader defn read-list<?T> (f: () -> ?T) :
    val n = read-int()
    to-list(repeatedly(f, n))

  writer defn write-list<?T> (f: T -> False, xs:List<?T>) :
    write-int(length(xs))
    do(f, xs)

  reader defn read-opt<T> (f: () -> T) :
    val n = read-byte()
    f() when n == 1Y

  writer defn write-opt<T> (f: T -> False, x:T|False) :
    match(x) :
      (x:False) :
        write-byte(0Y)
      (x:T) :
        write-byte(1Y)
        f(x)

  ;===============
  ;==== Atoms ====
  ;===============
  defunion info (FileInfo) :
    FileInfo: (filename:string, line:int, column:int)

  defatom bool (x:True|False) :
    writer :
      match(x) :
        (x:True) : put(out, 1Y)
        (x:False) : put(out, 0Y)
    reader :
      switch(get-byte(in)) :
        1Y : true
        0Y : false
        else : throw(DeserializeException())

  defatom int (x:Int) :
    writer :
      to-var-int(x, put{out, _})
    reader :
      from-var-int(read-byte)

  defatom long (x:Long) :
    writer :
      put(out, x)
    reader :
      match(get-long(in)) :
        (x:Long) : x
        (x:False) : throw(DeserializeException())

  defatom float (x:Float) :
    writer :
      put(out, x)
    reader :
      match(get-float(in)) :
        (x:Float) : x
        (x:False) : throw(DeserializeException())

  defatom double (x:Double) :
    writer :
      put(out, x)
    reader :
      match(get-double(in)) :
        (x:Double) : x
        (x:False) : throw(DeserializeException())

  defatom byte (x:Byte) :
    writer :
      put(out, x)
    reader :
      match(get-byte(in)) :
        (x:Byte) : x
        (x:False) : throw(DeserializeException())

  defatom char (x:Char) :
    writer :
      print(out, x)
    reader :
      match(get-char(in)) :
        (x:Char) : x
        (x:False) : throw(DeserializeException())

  defatom string (x:String) :
    writer :
      write-int(length(x))
      print(out, x)
    reader :
      val n = read-int()
      String(repeatedly(read-char, n))

  defatom symbol (x:Symbol) :
    writer :
      write-string(to-string(x))
    reader :
      to-symbol(read-string())

  defatom bytearray (x:ByteArray) :
    writer :
      write-int(length(x))
      do(write-byte, x)
    reader :
      val n = read-int()
      val x = ByteArray(n)
      for i in 0 to n do : x[i] = read-byte()
      x
