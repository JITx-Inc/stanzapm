;See License.txt for details about licensing

defpackage stz/dec-table2 :
  import core
  import collections
  import stz/kl2-ir
  import stz/tgt-ir
  import stz/pl-ir
  import stz/tl-ir
  import stz/utils
  import stz/padder
  import stz/ids

;============================================================
;==================== Interface =============================
;============================================================
public deftype DecTable
defmulti get (t:DecTable, n:Int) -> DecEntry
defmulti key? (t:DecTable, n:Int) -> True|False
defmulti set (t:DecTable, n:Int, e:DecEntry) -> False
defmulti structs (t:DecTable) -> Seqable<Int>

;============================================================
;==================== Construction ==========================
;============================================================
public defn DecTable () :
  val entries = IntTable<DecEntry>()
  new DecTable :
    defmethod get (this, n:Int) : entries[n]
    defmethod key? (this, n:Int) : key?(entries, n)
    defmethod set (this, n:Int, e:DecEntry) : entries[n] = e
    defmethod structs (this) :
      seq(key, filter({value(_) is StructEntry}, entries))
    defmethod print (o:OutputStream, this) :
      print(o, "DecTable:")
      for entry in entries do :
        print(o, "\n  %_ : %_" % [key(entry), value(entry)])

;============================================================
;=================== Public Queries =========================
;============================================================

public defn global? (t:DecTable, n:Int) :
  key?(t,n) and global?(t[n])

public defn function? (t:DecTable, n:Int) :
  t[n] is FnEntry|MultifnEntry

public defn guarded? (t:DecTable, n:Int) :
  guard?(t[n] as FnEntry|VarEntry)

public defn arity (t:DecTable, n:Int) :
  length(a1(t[n] as FnEntry))

public defn tail? (t:DecTable, n:Int) :
  tail?(t[n] as FnEntry)

public defn fn-types (t:DecTable, n:Int) -> [List<KType>, KType] :
  val e = t[n] as FnEntry
  [a1(e), a2(e)]

public defn fn-types (t:DecTable, n:Int, type-args:List<KType>) ->
                      [List<KType>, KType] :
  val e = t[n] as FnEntry                        
  val sub-table = to-hashtable<Int,KType>(targs(e), type-args)
  val a1* = map(replace-tvars{_, sub-table}, a1(e))
  val a2* = replace-tvars(a2(e), sub-table)
  [a1*, a2*]

public defn var-type (t:DecTable, n:Int) -> KType :
  match(t[n]) :
    (e:VarEntry) : type(e) as KType
    (e:FnEntry|MultifnEntry) : KOf(FN-TYPE-ID)

public defn mutable? (t:DecTable, n:Int) :
  match(t[n]) :
    (e:VarEntry) : mutable?(e)
    (e) : false

public defn initialized? (t:DecTable, n:Int) :
  initialized?(t[n] as VarEntry)

;public defn voidable? (t:DecTable, n:Int) -> True|False :
;  if key?(t, n) :
;    match(t[n]) :
;      (e:LSVarEntry|VarEntry) :
;        global?(e) or
;        (mutable?(e) and not initialized?(e))
;      (e:FnEntry|LSFnEntry|MultifnEntry) :
;        false
;
;public defn mutable? (t:DecTable, n:Int) -> True|False :
;  if key?(t,n) :
;    match(t[n]) :
;      (e:LSVarEntry|VarEntry) :
;        mutable?(t[n] as LSVarEntry|VarEntry)
;      (e:FnEntry|LSFnEntry|MultifnEntry) :
;        false
;
;public defn extern-label (t:DecTable, n:Int) -> False|Symbol :
;  match(t[n]) :
;    (e:LSFnEntry|LSVarEntry) : lbl(e)
;    (e:FnEntry|VarEntry|MultifnEntry) : false
;
;defn analyzed-fentry (t:DecTable, n:Int) -> FieldEntry :
;  val e = t[n] as FieldEntry
;  match(index(e)) :
;    (i:Int) :
;      e
;    (i:False) :
;      analyze(t)
;      t[n] as FieldEntry
;
;public defn field-type (t:DecTable, n:Int) -> KLSType :
;  type(analyzed-fentry(t,n))
;
;public defn field-index (t:DecTable, n:Int) -> Int :
;  index(analyzed-fentry(t,n)) as Int
;
;public defn field-offset (t:DecTable, n:Int) -> Int :
;  offset(analyzed-fentry(t,n)) as Int
;
;public defn field-size (t:DecTable, n:Int) -> Int :
;  size(t, type(analyzed-fentry(t, n)))
;
;defn analyzed-sentry (t:DecTable, n:Int) -> StructEntry :
;  val e = t[n] as StructEntry
;  match(size(e)) :
;    (s:Int) :
;      e
;    (s:False) :
;      analyze(t)
;      t[n] as StructEntry
;
;public defn size (t:DecTable, n:Int) -> Int :
;  size(analyzed-sentry(t,n)) as Int
;public defn size (dt:DecTable, t:KLSType) -> Int :
;  match(t:KStructT) : size(dt,n(t))
;  else : prim-size(t)
;
;public defn rest-size (t:DecTable, n:Int) -> Int :
;  val rf = rfield(analyzed-sentry(t,n)) as Int
;  field-size(t, rf)
;
;public defn length (t:DecTable, n:Int) -> Int :
;  length(analyzed-sentry(t,n)) as Int
;public defn length (dt:DecTable, t:KLSType) -> Int :
;  match(t:KStructT) : length(dt,n(t))
;  else : 1
;
;public defn alignment (t:DecTable, n:Int) -> Int :
;  alignment(analyzed-sentry(t,n)) as Int
;public defn alignment (dt:DecTable, t:KLSType) -> Int :
;  match(t:KStructT) : alignment(dt,n(t))
;  else : prim-size(t)
;
;public defn tgt-types (t:DecTable, n:Int) -> List<TGType> :
;  tgt-types(analyzed-sentry(t,n))
;public defn tgt-types (dt:DecTable, t:KLSType) -> List<TGType> :
;  match(t:KStructT) : tgt-types(dt,n(t))
;  else : List(prim-tgt-type(t))
;
;public defn field-offsets (t:DecTable, n:Int) -> List<Int> :
;  for f in fields(analyzed-sentry(t, n)) seq-append :
;    val o = field-offset(t, f)
;    val os = field-offsets(t, field-type(t, f))
;    map({o + _}, os)
;public defn field-offsets (dt:DecTable, t:KLSType) -> List<Int> :
;  match(t:KStructT) : field-offsets(dt,n(t))
;  else : List(0)
;
;public defn field+rest-offsets (t:DecTable, n:Int) -> Seqable<Int> :
;  val base-offsets = field-offsets(t, n)
;  match(rfield(analyzed-sentry(t,n))) :
;    (rf:Int) :
;      val r-offset = field-offset(t, rf)                 ;Rest field offset
;      val r-offsets = field-offsets(t, field-type(t,rf)) ;Rest field offsets
;      val r-size = field-size(t,rf)                      ;Rest field size
;      cat(
;        base-offsets
;        for base in r-offset to false by r-size seq-cat :
;          seq({base + _}, r-offsets))
;    (rf:False) :
;      base-offsets
;
;public defn name (t:DecTable, n:Int) -> String :
;  name(t[n] as StructEntry|TypeEntry)
;
public defn info (t:DecTable, n:Int) -> False|FileInfo :
  info(t[n] as FnEntry)

;============================================================
;===================== Entries ==============================
;============================================================

deftype DecEntry
defstruct FnEntry <: DecEntry :
  lbl: False|Symbol
  global?: True|False with: (as-method => true)
  guard?: True|False
  tail?: True|False
  targs: List<Int>
  a1: List<KType>
  a2: KType
  info: False|FileInfo

defstruct VarEntry <: DecEntry :
  lbl: False|Symbol
  global?: True|False with: (as-method => true)
  guard?: True|False
  mutable?: True|False
  initialized?: True|False
  type: False|KType

defstruct MultifnEntry <: DecEntry

defstruct TypeEntry <: DecEntry :
  name: String

defstruct StructEntry <: DecEntry :
  name: String
  fields: List<Int>
  rfield: False|Int
  size: Int|False
  alignment: Int|False
  length: Int|False
  tgt-types: List<TGType>

defstruct FieldEntry <: DecEntry :
  type: KType
  index: Int|False
  offset: Int|False

defmulti global? (e:DecEntry) -> True|False
defmethod global? (e:MultifnEntry) : true
defmethod global? (e:TypeEntry) : true
defmethod global? (e:StructEntry) : true
defmethod global? (e:FieldEntry) : false

;============================================================
;===================== Printers =============================
;============================================================

defmethod print (o:OutputStream, e:DecEntry) :
  print{o, _} $ match(e) :
    (e:FnEntry) : "Fn(%_, %_, %_, %_, %_, %_, %_, %_)" % [
      lbl(e), global?(e), guard?(e), tail?(e), targs(e), a1(e), a2(e), info(e)]
    (e:VarEntry) : "Var(%_, %_, %_, %_, %_, %_)" % [
      lbl(e), global?(e), guard?(e), mutable?(e), initialized?(e), type(e)]
    (e:MultifnEntry) : "Multifn"
    (e:TypeEntry) : "Type(%_)" % [name(e)]
    (e:StructEntry) : "Struct(%_, %_, %_, %_, %_, %_, %_" % [
      name(e), fields(e), rfield(e), size(e),
      alignment(e), length(e), tgt-types(e)]
    (e:FieldEntry) : "FieldEntry(%_, %_, %_)" % [
      type(e), index(e), offset(e)]

;============================================================
;===================== KForm Registration ===================
;============================================================

public defn register (t:DecTable, c:KTExp) :
  match(c) :
    (c:KDef*) :
      t[n(c)] = VarEntry(false, true, true, false, true, type(c))
    (c:KDefVar*) :
      t[n(c)] = VarEntry(false, true, true, true, true, type(c))
    (c:KDefConst) :
      t[n(c)] = VarEntry(false, true, false, false, true, KTop())
    (c:KDefmethod*) :
      false
    (c:KDef) :
      t[n(c)] = VarEntry(false, true, false, false, true, type(c))
    (c:KDefVar) :
      t[n(c)] = VarEntry(false, true, false, true, true, type(c))
    (c:KDefn) :
      t[n(c)] = match(value(c)) :
        (v:KFn*) : FnEntry(false, true, true, tail?(v), targs(v), a1(v), a2(v), info(v))
        (v:KFn) : FnEntry(false, true, false, tail?(v), targs(v), a1(v), a2(v), info(v))
        (v:KMultifn) : MultifnEntry()
    (c:KDefmulti) :
      t[n(c)] = FnEntry(false, true, true, tail?(c), targs(c), a1(c), a2(c), info(c))
    (c:KDefmethod) :
      t[n(c)] = match(value(c)) :
        (v:KFn*) : FnEntry(false, true, true, tail?(v), targs(v), a1(v), a2(v), info(v))
        (v:KFn) : FnEntry(false, true, false, tail?(v), targs(v), a1(v), a2(v), info(v))
    (c:KDefType) :
      t[n(c)] = TypeEntry(name(c))
    (c:KDefStruct) :
      ;Constructing a field entry
      defn field-entry (f:KStructField) :
        val e = FieldEntry(type(f), false, false)
        t[n(f)] = e
        n(f)
      defn field-entry (f:False) :
        false
      ;Register a struct entry
      t[n(c)] = StructEntry(name(c), map(field-entry,fields(c)), field-entry(rfield(c)),
                   false, false, false, List())
    (c:KExternFn) :
      t[n(c)] = match(value(c)) :
        (v:KFn*) : FnEntry(lbl(c), true, true, tail?(v), targs(v), a1(v), a2(v), info(v))
        (v:KFn) : FnEntry(lbl(c), true, false, tail?(v), targs(v), a1(v), a2(v), info(v))
    (c:KExtern) :
      t[n(c)] = VarEntry(lbl(c), true, false, true, true, type(c))
    (c:KInit) :
      false

public defn register (table:DecTable, e:KExp) :
  defn reg-val (n:Int, t:False|KType) :
    table[n] = VarEntry(false, false, false, false, true, t)
  defn reg-var (n:Int, t:KType, e:KExp|False) :
    table[n] = VarEntry(false, false, false, true, e is KExp, t)
  defn reg-var* (n:Int, t:KType, e:KExp|False) :
    table[n] = VarEntry(false, false, true, true, e is KExp, t)
  defn reg-func (n:Int, f:KExp) :
    table[n] = match(f) :
      (f:KFn*) : FnEntry(false, false, true, tail?(f), targs(f), a1(f), a2(f), info(f))
      (f:KFn) : FnEntry(false, false, false, tail?(f), targs(f), a1(f), a2(f), info(f))
  match(e) :
    (e:KFn*|KFn) : do(reg-val, args(e), a1(e))
    (e:KLet*) : reg-val(n(e), false)
    (e:KLet) : reg-val(n(e), false)
    (e:KLetVar*) : reg-var*(n(e), type(e), value(e))
    (e:KLetVar) : reg-var(n(e), type(e), value(e))
    (e:KLetRec) : do(reg-func, ns(e), values(e))
    (e:KBranch|KBranch*) : do(reg-val, args(e), types(e))
    (e:KBlock) : do(reg-val, args(e), types(e))
    (e) : false

;============================================================
;==================== ID Registration =======================
;============================================================
;
;public defn register (t:DecTable, d:Declare) :
;  ;Register
;  defn R (e:DecEntry) : t[n(d)] = e
;
;  match(id(d)) :
;    (id:ValId) :
;      R $ VarEntry(true, false, true, to-ktag(type(id)))
;    (id:VarId) :
;      R $ VarEntry(true, true, false, to-ktag(type(id)))
;    (id:LSValId) :
;      R $ LSVarEntry(false, true, false, true, to-ktype(type(id)))
;    (id:LSVarId) :
;      R $ LSVarEntry(false, true, true, false, to-ktype(type(id)))
;    (id:LSExternId) :
;      R $ LSVarEntry(lbl(id), true, true, false, to-ktype(type(id)))
;    (id:FnId) :
;      R $ FnEntry(true, length(a1(id)), tail?(id),
;            append(targs(id), cargs(id)), map(to-ktag, a1(id)),
;            to-ktag(a2(id)), info(d))
;    (id:MultiId) :
;      R $ FnEntry(true, length(a1(id)), tail?(id),
;            append(targs(id), cargs(id)), map(to-ktag, a1(id)),
;            to-ktag(a2(id)), info(d))
;    (id:LSFnId) :
;      R $ LSFnEntry(false, length(a1(id)), tail?(id),
;            append(targs(id), cargs(id)), map(to-ktype, a1(id)),
;            to-ktype(a2(id)), info(d))
;    (id:LSExternFnId) :
;      R $ LSFnEntry(lbl(id), length(a1(id)), false,
;            List(), map(to-ktype, a1(id)),
;            to-ktype(a2(id)), info(d))
;    (id:TypeId) :
;      R $ TypeEntry(to-string(name(id)))
;    (id:LSTypeId) :
;      defn field-entry (f:FieldDec) :
;        val e = FieldEntry(to-ktype(type(f)), false, false)
;        t[n(f)] = e
;        n(f)
;      defn rfield-entry (f:FieldDec) :
;        val ft = type(f) as RestT
;        val e = FieldEntry(to-ktype(type(ft)), false, false)
;        t[n(f)] = e
;        n(f)
;      defn rest-field? (f:FieldDec) :
;        type(f) is RestT
;
;      ;Finite struct
;      if empty?(fields(id)) or
;         not rest-field?(last(fields(id))) :
;        val fs = map(field-entry, fields(id))
;        R $ StructEntry(to-string(name(id)), fs, false, false, false, false, List())
;      ;Variable struct
;      else :
;        val fs = map(field-entry, but-last(fields(id)))
;        val rf = rfield-entry(last(fields(id)))
;        R $ StructEntry(to-string(name(id)), fs, rf, false, false, false, List())
;    (id) :
;      false

;============================================================
;===================== Analysis =============================
;============================================================
;
;defn analyze (t:DecTable) :
;  ;Cached records
;  defn type-record (n:Int) :
;    val e = t[n] as StructEntry
;    match(size(e):False) :
;      val e* = analyze(e)
;      t[n] = e*
;      e*
;    else : e
;  defn type-alignment (t:KLSType) :
;    match(t:KStructT) : alignment(type-record(n(t))) as Int
;    else : prim-size(t)
;  defn type-length (t:KLSType) :
;    match(t:KStructT) : length(type-record(n(t))) as Int
;    else : 1
;  defn type-size (t:KLSType) :
;    match(t:KStructT) : size(type-record(n(t))) as Int
;    else : prim-size(t)
;  defn type-tgt-types (t:KLSType) :
;    match(t:KStructT) : tgt-types(type-record(n(t)))
;    else : List(prim-tgt-type(t))
;
;  ;Analyzed records
;  defn analyze (e:StructEntry) :
;    val offset-counter = Counter(0)
;    val index-counter = Counter(0)
;    defn fentry (n:Int) :
;      t[n] as FieldEntry
;    defn ftypes (n:Int) :
;      type-tgt-types(type(fentry(n)))
;    defn annotate (n:Int) :
;      val f = fentry(n)
;      val o = next(offset-counter, type-size(type(f)))
;      val i = next(index-counter, type-length(type(f)))
;      t[n] = FieldEntry(type(f), i, o)
;    defn annotate (e:Padding) :
;      next(offset-counter, size(e))
;
;    match(rfield(e)) :
;      (rf:False) :
;        val [fs, aln] = pad(
;          type-alignment{type(fentry(_))}
;          type-size{type(fentry(_))}
;          fields(e)
;          1)
;        do(annotate, fs)
;        val size = value(offset-counter)
;        val length = value(index-counter)
;        val ts = seq-append(ftypes, fields(e))
;        StructEntry(name(e), fields(e), false, size, aln, length, ts)
;      (rf:Int) :
;        defn not-rest? (e:Padding|Int) :
;          match(e:Int) : e != rf
;          else : true
;        val [fs, aln] = pad(
;          type-alignment{type(fentry(_))}
;          type-size{type(fentry(_))}
;          append(fields(e), List(rf))
;          1)
;        do(annotate, take-while(not-rest?, fs))
;        val size = value(offset-counter)
;        val length = value(index-counter)
;        annotate(next(fs))
;        val ts = seq-append(ftypes, fields(e))
;        StructEntry(name(e), fields(e), rf, size, aln, length, ts)
;
;  ;Analyze all
;  do(type-record, structs(t))
;
