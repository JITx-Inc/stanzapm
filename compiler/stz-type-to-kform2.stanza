;See License.txt for details about licensing

defpackage stz/type-to-kform2 :
  import core
  import collections
  import stz/namemap
  import stz/ids
  import stz/tl-ir
  import stz/kl2-ir
  import stz/tgt-ir
  import stz/pl-ir with :
    prefix(Private, Protected, Public) => P
  import stz/type-calculus
  import stz/primitives
  import stz/utils
  import stz/params

public defn to-kform (p:TProg, nm:NameMap) -> List<KPkgComm> :
  ;Using hierarchy and namemap (TODO)
  set-current-hierarchy(hier(p))
  CURRENT-NAMEMAP = nm

  ;Compute declarations
  val all-decls = IntTable<Declare>()
  val package-decls = HashTable<Symbol,List<Declare>>()
  for pkg in packages(p) do :  
    val name = name(pkg as TPackage|TGPackage|KPackage)
    val decls = match(pkg) :
      (pkg:TPackage) : to-declarations(comms(pkg), nm)
      (pkg:TGPackage|KPackage) : declarations(ids(pkg))
    for d in decls do :
      all-decls[n(d)] = d
    package-decls[name] = decls

  ;Compute imports
  defn compute-imports (pkg:Symbol, imports:List<Symbol>) :
    val imported = IntTable<Import>()
    val grouped = HashTable<Symbol,List<Import>>(List())
    defn record-import (pkg:Symbol, i:Import) :
      imported[n(i)] = i
      update(grouped, cons{i, _}, pkg)

    defn import (n:Int) :
      if not key?(imported, n) :
        if key?(nm, n) :
          val e = nm[n]
          if package(e) != pkg :
            val id = id(all-decls[n])
            record-import(package(e), Import(n, id))
            do-ids(import, id)
    do({grouped[_] = List()}, imports)
    do(import, used())    

    to-list $ for entry in grouped seq :
      ImportPackage(key(entry), value(entry))

  ;Translate to KPackage
  defn to-kpackage (pkg:TPackage) :
    val comms* = accumulate-used(to-texps{comms(pkg)})
    val imports* = compute-imports(name(pkg), imports(pkg))
    val ids = PkgIds(STANZA-VERSION, OUTPUT-PLATFORM, package-decls[name(pkg)], imports*)
    KPackage(name(pkg), ids, comms*, false)

  ;Translate all packages
  for pkg in packages(p) map :
    match(pkg) :
      (pkg:TPackage) : to-kpackage(pkg)
      (pkg:TGPackage|KPackage) : pkg

;============================================================
;====================== Namemap =============================
;============================================================
;TODO: Won't be necessary after labels are included with extern
;definitions.

var CURRENT-NAMEMAP : False|NameMap = false
defn current-namemap () : CURRENT-NAMEMAP as NameMap

;============================================================
;=================== Declarations ===========================
;============================================================

;TODO: Declarations/Imports should be computed by type level IR
;since they are done using HiStanza types anyway.
public defn to-declarations (cs:List<TComm>, nm:NameMap) -> List<Declare> :
  accumulate<Declare> $ fn (emit) :
    defn declare-targ (n:Int) :
      val e = nm[n]
      emit(Declare(n, TArgId(name(e)), info(e)))
    defn declare-targs (ns:Seqable<Int>) :
      do(declare-targ, ns)
    defn declare-field (n:Int) :
      val e = nm[n]
      emit(Declare(n, FieldId(name(e)), info(e)))

    defn norm (t:Type) : normalize(t)
    defn norm (t:LSType) : normalize(t)
    defn norm (t:False) : false
    defn norm (ts:List<Type>) : map(norm, ts)
    defn norm (ts:List<LSType>) : map(norm, ts)    

    for c in cs do :
      match(c) :
        ;HiStanza Commands
        (c:TDefType) :
          declare-targs(args(c))
          do(declare-targs{args(_)}, children(c))
          val e = nm[n(c)]
          val cs = for child in children(c) map :
            ChildDec(n(child), args(child), norm(parent(child)))
          val id = TypeId(name(e), args(c), norm(parent(c)), cs, to-visibility(visibility(e)))
          emit(Declare(n(c), id, info(e)))
        (c:TDef) :
          val e = nm[n(c)]
          val id = ValId(name(e), norm(type(c) as Type), to-visibility(visibility(e)))
          emit(Declare(n(c), id, info(e)))
        (c:TDefVar) :
          val e = nm[n(c)]
          val id = VarId(name(e), norm(type(c) as Type), to-visibility(visibility(e)))
          emit(Declare(n(c), id, info(e)))
        (c:TDefTuple) :
          for (n in ns(c), t in types(c)) do :
            val e = nm[n]
            val id = ValId(name(e), norm(t as Type), to-visibility(visibility(e)))
            emit(Declare(n, id, info(e)))
        (c:TDefn) :
          declare-targs(cat(targs(c), cargs(c)))
          val e = nm[n(c)]
          val id = FnId(name(e), tail?(c), targs(c), cargs(c),
                        norm(a1(c) as List<Type>), norm(a2(c) as Type),
                        to-visibility(visibility(e)))
          emit(Declare(n(c), id, info(e)))
        (c:TDefmulti) :
          declare-targs(cat(targs(c), cargs(c)))
          val e = nm[n(c)]
          val id = MultiId(name(e), false, targs(c), cargs(c),
                           norm(a1(c) as List<Type>), norm(a2(c) as Type),
                           to-visibility(visibility(e)))
          emit(Declare(n(c), id, info(e)))
        (c:TDefmethod) :
          false
        (c:TInit) :
          false
          
        ;LoStanza commands
        (c:TLDefType) :
          declare-targs(args(c))
          val e = nm[n(c)]
          val fs = for f in fields(c) map :
            declare-field(n(f))
            FieldDec(n(f), name(f), norm(type(f)))
          val id = LSTypeId(name(e), args(c), norm(parent(c)), fs, to-visibility(visibility(e)))
          emit(Declare(n(c), id, info(e)))          
        (c:TLDef) :
          val e = nm[n(c)]
          val id = LSValId(name(e), norm(type(c) as LSType), to-visibility(visibility(e)))
          emit(Declare(n(c), id, info(e)))
        (c:TLDefVar) :
          val e = nm[n(c)]
          val id = LSVarId(name(e), norm(type(c) as LSType), to-visibility(visibility(e)))
          emit(Declare(n(c), id, info(e)))
        (c:TLDefn) :
          declare-targs(cat(targs(c), cargs(c)))
          val e = nm[n(c)]
          val id = LSFnId(name(e), tail?(c), targs(c), cargs(c),
                          norm(a1(c)), norm(a2(c)),
                          to-visibility(visibility(e)))
          emit(Declare(n(c), id, info(e)))
        (c:TLDefmethod) :
          false
        (c:TLInit) :
          false
          
        ;External commands  
        (c:TLExternFn) :
          val e = nm[n(c)]
          val id = LSExternFnId(name(e), name(e), norm(a1(c)), norm(a2(c)), to-visibility(visibility(e)))
          emit(Declare(n(c), id, info(e)))
        (c:TExtern) :
          val e = nm[n(c)]
          val id = LSExternId(name(e), name(e), norm(type(c)), to-visibility(visibility(e)))
          emit(Declare(n(c), id, info(e)))

defn to-visibility (v:Vis) :
  match(v) :
    (v:Private) : PPrivate()
    (v:Protected) : PProtected()
    (v:Public) : PPublic()

;============================================================
;=================== Usages =================================
;============================================================

val USAGE-SET = IntSet()
defn used () : to-vector<Int>(USAGE-SET)
defn record-use (n:Int) : add(USAGE-SET,n)

defn accumulate-used<?T> (f: () -> ?T) -> T :
  clear(USAGE-SET)
  f()

;============================================================
;================= Conversion Functions =====================
;============================================================

defn to-texps (c:TComm) -> List<KTExp> :
  defn rec (n:Int) : (record-use(n), n)
  wrap-in-list<KTExp> $ match(c) :
    (c:TDefType) :
      val name = to-string(name(current-namemap()[n(c)]))
      KDefType(n(c), name, to-type?(parent(c)), to-children(children(c)))
    (c:TDef) :
      KDef*(n(c), to-type!(type(c)), to-exp(value(c)), info(c))
    (c:TDefVar) :
      KDefVar*(n(c), to-type!(type(c)), to-exp?(value(c)), info(c))
    (c:TDefTuple):
      to-tuple-defs(ns(c), types(c), value(c), info(c))
    (c:TDefn) :
      val func = KFn*(tail?(c), append(targs(c), cargs(c)),
        to-types!(a1(c)), to-type!(a2(c)), args(c), to-exp(body(c)), info(c))
      KDefn(n(c), func)
    (c:TDefmulti) :
      KDefmulti(n(c), false, append(targs(c), cargs(c)),
        to-types!(a1(c)), to-type!(a2(c)), info(c))
    (c:TDefmethod) :
      val func = KFn*(tail?(c), append(targs(c), cargs(c)),
        to-types!(a1(c)), to-type!(a2(c)), args(c), to-exp(body(c)), info(c))
      val [multi, targs] = multi-args(multi(c))
      KDefmethod*(rec(multi), to-types!(targs), func)
    (c:TInit) :
      KInit(to-exp(exp(c)))
    (c:TLDefType) :
      val p = to-type?(parent(c))
      val [fs, rf] = to-fields(fields(c))
      val name = to-string(name(current-namemap()[n(c)]))
      KDefStruct(n(c), name, p, fs, rf)
    (c:TLDef) :
      KDef(n(c), to-type!(type(c)), to-exp-upcast(value(c), type(c)))
    (c:TLDefVar) :
      KDefVar(n(c), to-type!(type(c)), to-exp-upcast?(value(c), type(c)))
    (c:TLDefn) :
      val body = with-return-type(a2(c), to-exp{body(c)})
      val func = KFn(tail?(c), append(targs(c), cargs(c)),
        to-types!(a1(c)), to-type!(a2(c)), args(c), body, info(c))
      KDefn(n(c), func)
    (c:TLDefmethod) :
      val body = with-return-type(a2(c), to-exp{body(c)})
      val func = KFn*(tail?(c), append(targs(c), cargs(c)), to-types!(a1(c)),
        to-type!(a2(c)), args(c), body, info(c))
      val [multi, targs] = multi-args(multi(c))
      KDefmethod*(rec(multi), to-types!(targs), func)
    (c:TLInit) :
      KInit(to-exp(comm(c)))
    (c:TLExternFn) :
      val e = current-namemap()[n(c)]
      val body = with-return-type(a2(c), to-exp{body(c)})
      val func = KFn(false, List(), to-types!(a1(c)), to-type!(a2(c)),
        args(c), body, info(c))
      KExternFn(n(c), name(e), func)
    (c:TExtern) :
      val e = current-namemap()[n(c)]
      KExtern(n(c), name(e), to-type(type(c)))

defn to-exp (e:TExp) -> KExp :
  defn rec (n:Int) : (record-use(n), n)
  match(e) :
    (e:TLet) :
      KLet*(rec(n(e)), to-type!(ntype(e)), to-exp(value(e)), to-exp(body(e)), info(e))
    (e:TLetVar) :
      KLetVar*(rec(n(e)), to-type!(ntype(e)), to-exp?(value(e)), to-exp(body(e)), info(e))
    (e:TLetTuple) :
      val defs = to-tuple-defs(ns(e), ntypes(e), value(e), info(e))
      reduce-right{_, defs, to-exp(body(e))} $ fn (def, body) :
        KLet(n(def), value(def), body)
    (e:TLetRec) :
      val defns = to-texps(defns(e)) as List<KDefn>
      KLetRec(map(n,defns), map(value,defns), to-exp(body(e)))
    (e:TSeq) :
      KSeq(to-exp(a(e)), to-exp(b(e)))
    (e:TMatch) :
      KMatch(to-exps(args(e)),
             to-exps(branches(e)),
             info(e))
    (e:TBranch) :
      KBranch*(args(e), to-types!(atypes(e)), to-exp(body(e)), info(e))
    (e:TFn) :
      KFn*(tail?(e), List(),
           to-types!(a1(e)), to-type!(a2(e)),
           args(e), to-exp(body(e)), info(e))
    (e:TMulti) :
      KMultifn(to-exps(funcs(e)))
    (e:TNew) :
      val tag = to-type(class(e))
      val ms = for m in methods(e) map :
        val f = KFn*(tail?(m), append(targs(m), cargs(m)),
          to-types!(a1(m)), to-type!(a2(m)),
          args(m), to-exp(body(m)), info(m))
        val [multi, targs] = multi-args(multi(m))
        KMethod*(rec(multi), to-types(targs), thisn(m) as Int, f)
      KNew(tag, object-name(tag), ms, info(e))
    (e:TRef) :
      KVar*(rec(n(e)), info(e))
    (e:TCast|TUpCast) :
      KCheck(
        to-exp(exp(e)),
        to-type(targ(e)),
        CAST-ERROR-TYPE,
        info(e))
    (e:TSet) :
      KSet*(
        to-exp(ref(e))
        to-type!(type(ref(e)))
        to-exp(value(e))
        info(e))
    (e:TDo) :
      val a1 = to-types!(map(type{ctxt(_) as CExp}, args(e)))
      val a2 = to-type!(type(e))
      val args = to-exps(args(e))
      val f = to-exp(func(e))
      KDo*(f, args, a1, a2, info(e))
    (e:TLiteral) :
      KLiteral(value(e))
    (e:TTupleExp) :
      KTuple(to-exps(exps(e)), info(e))
    (e:TMix) :
      val exps* = select-all(sel(e) as SSel, exps(e))
      if length(exps*) == 1 : to-exp(head(exps*))
      else : KMix(to-exps(exps*))
    (e:TCurry) :
      KCurry(rec(n(ref(e))), to-types!(append(targs(e), cargs(e))))
    (e:TPrim) :
      KPrim(op(e), to-exps(args(e)))

defn to-exp (e:LSExp) -> KExp :
  defn rec (n:Int) : (record-use(n), n)
  match(e) :
    (e:LSVar) :
      KVar(rec(n(e)))
    (e:LSNew) :
      val [fts, rft] = field-rest-types(n(e))
      match(rft:LSType) :
        val args* = to-exps-upcast(args(e), cat(fts, repeat(rft)))
        KArray(rec(n(e)), head(args*), tail(args*), info(e))
      else :
        KObject(rec(n(e)), to-exps-upcast(args(e), fts), info(e))
    (e:LSStruct) :
      val fts = field-types!(n(e), TGradual())
      KStruct(rec(n(e)), to-exps-upcast(args(e), fts))
    (e:LSAddr) :
      KPtr(to-exp(exp(e)))
    (e:LSDeref) :
      match(type(exp(e))) :
        (t:PtrT) : KDeptr(to-exp(exp(e)))
        (t:RefT) : KDeref(to-exp(exp(e)))
    (e:LSField) :
      val base = deref-all(exp(e))
      val n = rec(n(type(base) as StructT))
      KField(to-exp(base), field-n(n, name(e)))
    (e:LSSlot) :
      val ptr = match(type(exp(e))) :
        (t:RestT) : KPtr(to-exp(exp(e)))
        (t:PtrT) : to-exp(exp(e))
      KSlot(ptr, to-exp-long(index(e)), to-type!(type(e)))
    (e:LSDo) :
      val ft = type(func(e)) as FnT
      val [a1, a2] = fn-types(args(e), ft)
      val f* = to-exp(func(e))
      val args* = to-args(args(e), ft)
      match(f*) :
        (f*:KDeref) : KDo(exp(f*), args*, to-type!(type(e)), info(e))
        (f*) : KDo(f*, args*, to-type!(type(e)), info(e))
    (e:LSCallC) :
      val ft = type(func(e)) as FnT
      val args* = to-args(args(e), ft)
      val f* = to-exp(func(e))
      val num-std-args = length(a(ft))
      val std-args = headn(args*, num-std-args)
      val var-args = tailn(args*, num-std-args)
      KDoC(f*, std-args, var-args, to-type!(type(e)))
    (e:LSCast) :
      val et = type(exp(e)) as LSType
      if reinterpret?(et, targ(e)) as True|False :
        KInterpret(to-exp(exp(e)), to-type(targ(e)))
      else :
        KConv(to-exp(exp(e)), to-type(targ(e)))
    (e:LSLiteral) :
      KLSLiteral(value(e))
    (e:LSAnd) :
      KAndExp(to-exp-long(a(e)), to-exp-long(b(e)))
    (e:LSOr) :
      KOrExp(to-exp-long(a(e)), to-exp-long(b(e)))
    (e:LSMix) :
      val exps* = select-all(sel(e) as SSel, exps(e))
      if length(exps*) == 1 : to-exp(head(exps*))
      else : KMix(map(to-exp, exps*))
    (e:LSCurry) :
      KCurry(rec(n(ref(e))), to-types(targs(e)))
    (e:LSFn) :
      to-exp(ref(e))
    (e:LSSizeof) :
      KSizeof(to-type(targ(e)))
    (e:LSTagof) :
      KTagof(rec(n(e)))
    (e:LSPrim) :
      defn args-any () :
        KPrim(op(e), to-exps(args(e)))
      defn args-max () :
        val t = max(seq(type, args(e)) as Seqable<LSType>)
        KPrim(op(e), to-exps-upcast(args(e), t))
      defn args-ptr-or-max () :
        if any?({type(_) is PtrT|RefT}, args(e)) :
          val args* = for a in args(e) map :
            match(type(a):PtrT|RefT) : to-exp(a)
            else : to-exp-long(a)
          KPrim(op(e), args*)
        else :
          args-max()
      defn args-cmp () :
        val e* = args-max()
        match(type(head(args(e))):ByteT|PtrT) :
          KPrim(unsigned(op(e)), args(e*))
        else : e*
      match(op(e)) :
        (op:GetterPrimitive|AddrPrimitive|SetterPrimitive) :
          args-any()
        (op) :
          switch(op) :
            LS-ADD-OP : args-ptr-or-max()
            LS-SUB-OP : args-ptr-or-max()
            LS-MUL-OP : args-max()
            LS-DIV-OP : args-max()
            LS-MOD-OP : args-max()
            LS-AND-OP : args-max()
            LS-OR-OP : args-max()
            LS-XOR-OP : args-max()
            LS-SHL-OP : args-max()
            LS-SHR-OP : args-max()
            LS-ASHR-OP : args-max()
            LS-EQ-OP : args-ptr-or-max()
            LS-NE-OP : args-ptr-or-max()
            LS-LT-OP : args-cmp()
            LS-GT-OP : args-cmp()
            LS-LE-OP : args-cmp()
            LS-GE-OP : args-cmp()
            LS-ULT-OP : args-max()
            LS-UGT-OP : args-max()
            LS-ULE-OP : args-max()
            LS-UGE-OP : args-max()
            ;Unary
            LS-NOT-OP : args-any()
            LS-NEG-OP : args-any()
            LS-BITS-OP : args-any()
            LS-FNUM-OP : args-any()
            LS-YIELD-OP : args-any()
            LS-NEW-STACK-OP : args-any()
            LS-LAST-STACK-OP : args-any()

defn to-exp (c:LSComm) -> KExp :
  defn translate (c:LSComm) -> KExp :
    match(c) :
      (c:LSSeq) :
        translate(a(c), translate(b(c)))
      (c:LSCall) :
        to-exp(exp(c))
      (c:LSSet) :
        val et = type(exp(c)) as LSType
        KSet*(to-exp(exp(c)), to-type(et), to-exp-upcast(value(c),et), info(c))
      (c:LSLabels) :
        for b in blocks(c) do :
          set-block-types(n(b), atypes(b))
        KLabels(map(translate,blocks(c)))
      (c:LSLabeledBlock) :
        KBlock(n(c), args(c), to-types(atypes(c)), translate(body(c)))
      (c:LSGoto) :
        KGoto(n(c), to-exps-upcast(args(c), block-types(n(c))))
      (c:LSReturn) :
        KReturn(to-exp-upcast(exp(c), return-type()))
      (c:LSIf) :
        KIf(to-exp-long(pred(c)), translate(conseq(c)), translate(alt(c)))
      (c:LSMatch) :
        KMatch(to-exps(args(c)), map(translate,branches(c)), info(c))
      (c:LSBranch) :
        KBranch(args(c), to-types!(atypes(c)), translate(body(c)))
      (c:LSSkip) :
        KLiteral(false)

  defn translate (c:LSComm, body:KExp) -> KExp :
    match(c) :
      (c:LSDef) :
        val dt = type(c) as LSType
        val v = to-exp-upcast(value(c), dt)
        KLet(n(c), v, body)
      (c:LSDefVar) :
        val dt = type(c) as LSType
        val v = to-exp-upcast?(value(c), dt)
        KLetVar(n(c), to-type(dt), v, body)
      (c:LSSkip) : body
      (c:LSSeq) : translate(a(c), translate(b(c), body))
      (c) : KSeq(to-exp(c), body)

  with-block-types(translate{c})

defn to-type (t:Type) -> KType :
  defn rec (n:Int) : (record-use(n), n)
  match(t) :
    (t:TCap|TVar) : KTVar(n(t))
    (t:TOf) : KOf(rec(n(t)))
    (t:TTuple) : KOf(rec(TUPLE-TYPE-ID))
    (t:TOr) : KOr(to-type(a(t)), to-type(b(t)))
    (t:TAnd) : KAnd(to-type(a(t)), to-type(b(t)))
    (t:TArrow) : KOf(rec(FN-TYPE-ID))
    (t:TGradual) : KTop()
    (t:TBot) : KBot()

defn to-type (t:LSType) -> KType :
  defn rec (n:Int) : (record-use(n), n)
  match(t) :
    (t:ByteT) : KByteT()
    (t:IntT) : KIntT()
    (t:LongT) : KLongT()
    (t:FloatT) : KFloatT()
    (t:DoubleT) : KDoubleT()
    (t:UnknownT) : KUnknownT()
    (t:PtrT) : KPtrT(to-type(type(t)))
    (t:RefT) : to-type(type(t))
    (t:FnT) : KFnT(to-types(a(t)), to-type?(r(t)), to-type(b(t)))
    (t:StructT) : KStructT(rec(n(t)))


;============================================================
;================= Conversion Shorthands ====================
;============================================================

defn to-type? (t:False|Type|LSType) : attempt: to-type(t as? Type|LSType)
defn to-types (ts:List<Type>) : map(to-type, ts)
defn to-types (ts:List<LSType>) : map(to-type, ts)
defn to-type! (t:False|LSType|Type) : to-type(t as LSType|Type)
defn to-types! (ts:List<False|LSType|Type>) : map(to-type!, ts)

defn to-texps (cs:List<TComm>) : seq-append(to-texps, cs)

defn to-exp? (e:False|LSExp|TExp) : attempt: to-exp(e as? LSExp|TExp)
defn to-exp-long (e:LSExp) : to-exp-upcast(e, LongT())
defn to-exps (es:List<LSExp>) : map(to-exp, es)
defn to-exps (es:List<TExp>) : map(to-exp, es)
defn to-exps (es:List<LSComm>) : map(to-exp, es)
defn to-exp-upcast? (e:False|LSExp, t:LSType) : attempt: to-exp-upcast(e as? LSExp,t)
defn to-exps-upcast (es:List<LSExp>, t:LSType) : map(to-exp-upcast{_, t}, es)
defn to-exps-upcast (es:List<LSExp>, ts:Seqable<LSType>) : map(to-exp-upcast, es, ts)

defn to-children (cs:List<Child>) : map(to-child,cs)

;============================================================
;================= Conversion Utilities =====================
;============================================================

var RETURN-TYPE:False|LSType = false
var BLOCK-TYPES:False|HashTable<Int,List<LSType>> = false

defn return-type () : RETURN-TYPE as LSType
defn block-types (n:Int) :
  (BLOCK-TYPES as HashTable<Int,List<LSType>>)[n]
defn set-block-types (n:Int, ts:List<LSType>) :
  (BLOCK-TYPES as HashTable<Int,List<LSType>>)[n] = ts

defn with-return-type<?T> (t:LSType, f:() -> ?T) -> T :
  let-var RETURN-TYPE = t : f()
defn with-block-types<?T> (f:() -> ?T) :
  let-var BLOCK-TYPES = HashTable<Int,List<LSType>>() : f()

defn to-args (es:List<LSExp>, t:FnT) :
  val [a, b] = fn-types(es, t)
  to-exps-upcast(es, a)

defn to-child (c:Child) -> KChild :
  defn rec (n:Int) : (record-use(n), n)
  KChild(rec(n(c)), to-type(parent(c)))

defn to-exp-upcast (e:LSExp, t:LSType) :
  val et = type(e) as LSType
  val e* = to-exp(e)
  if implicit-upcast?(et,t) : KConv(e*, to-type!(t))
  else : e*

defn to-tuple-defs (ns:List<Int>, ntypes:List<False|Type>, value:TExp, info:False|FileInfo) :
  ;Define the tuple
  val value* = KEnsureLength(to-exp(value), length(ntypes), info)
  val def1 = KDef*(fresh-id(), KOf(TUPLE-TYPE-ID), value*, info)
  ;Destructure the tuple
  val def2 = let :
    val tuple = KVar(n(def1))
    for (n in ns, t in ntypes, i in 0 to false) map :
      KDef*(n, to-type!(t), KTupleGet(tuple, i), info)
  ;Translate let
  cons(def1, def2)

defn to-field (f:Field) :
  KStructField(n(f), to-type(type(f)))
  
defn to-rfield (f:Field) :
  val t = type(type(f) as RestT)
  KStructField(n(f), to-type(t))

defn to-fields (fs:List<Field>) -> [List<KStructField>, False|KStructField] :
  if empty?(fs) :
    [List(), false]
  else if type(last(fs)) is RestT :
    [map(to-field, but-last(fs)), to-rfield(last(fs))]
  else :
    [map(to-field, fs), false]

;============================================================
;================= General Utilities ========================
;============================================================

defn select-1<?T> (ss:SSel, xs:List<?T>) -> T :
  for (x in xs, s in sels(ss)) find! :
    s is-not False

defn select-all<?T> (ss:SSel, xs:List<?T>) -> List<T> :
  to-list $
  for (x in xs, s in sels(ss)) filter :
    s is-not False

defn object-name (t:KType) :
  string-join{_, "&"} $
    let loop (t:KType = t) :
      match(t) :
        (t:KOf) : [name(current-namemap()[n(t)])]
        (t:KAnd) : cat(loop(a(t)), loop(b(t)))

defn field-n (sn:Int, fname:Symbol) :
  val e = current-hierarchy()[sn] as LSHEntry
  for f in fields(e) first! :
    if name(f) == fname : One(n(f))
    else : None()

defn field-rest-types (n:Int) -> [List<LSType>, False|LSType] :
  val fs = field-types!(n, TGradual())
  if empty?(fs) :
    [List(), false]
  else :
    match(last(fs)) :
      (f:RestT) : [but-last(fs), type(f)]
      (f) : [fs, false]

defn max-cast (x:LSType, y:LSType) :
  y when implicit-upcast?(x, y) else x

defn max (xs:Seqable<LSType>) :
  reduce(max-cast, xs)

defn unsigned (op:LSPrimitive) :
  switch(op) :
    LS-LT-OP : LS-ULT-OP
    LS-GT-OP : LS-UGT-OP
    LS-LE-OP : LS-ULE-OP
    LS-GE-OP : LS-UGE-OP

defn multi-args (e:TExp) -> [Int, List<Type>] :
  match(e) :
    (e:TRef) : [n(e), List()]
    (e:TCurry) : [n(ref(e)), append(targs(e), cargs(e)) as List<Type>]
    (e:TMix) : multi-args(select-1(sel(e) as SSel, exps(e)))

defn* deref-all (e:LSExp) :
  match(type(e)) :
    (et:PtrT) :
      deref-all(LSDeref(e, type(et), false, false, info(e)))
    (et:RefT) :
      val t = type(et) as TOf
      val t* = StructT(n(t), type(t))
      deref-all(LSDeref(e, t*, false, false, info(e)))
    (et) :
      e

defn fn-types (args:List<LSExp>, t:FnT) -> [List<LSType>, LSType] :
  defn ex (ts:List<LSType>, r:False|LSType) :
    match(r:LSType) : cat(ts, repeat(r))
    else : ts
  val a* = to-list(take-n(length(args), ex(a(t), r(t))))
  [a*, b(t)]