;See License.txt for details about licensing.

defpackage stz/kl-ir :
  import core
  import collections
  import stz/tl-ir
  import stz/pl-ir
  import stz/primitives
  import stz/ids
  import stz/tgt-ir

;Use utilities for defining ASTs quickly.
#use-added-syntax(stz-ast-lang, stz-printer-lang)

;============================================================
;===================== Structures ===========================
;============================================================

public defast :
  ;Tags
  deftype KTag <: Hashable & Equalable
  defnodes KTag :
    KOf :
      n: Int
    KTVar :
      n: Int
    KAnd :
      a: KTag
      b: KTag
    KOr :
      a: KTag
      b: KTag
    KTop
    KBot
  
  ;Commands
  deftype KComm
  defnodes KComm :
    KDef :
      n: Int
      tag: KTag
      value: KExp
      info: False|FileInfo
    KDefVar :
      n: Int
      tag: KTag
      value: False|KExp
      info: False|FileInfo
    KDefn :
      n: Int
      value: KFunc
    KDefmulti :
      n: Int
      tail?: True|False
      targs: List<Int>
      a1: List<KTag>
      a2: KTag
      info: False|FileInfo
    KDefmethod :
      multi: Int
      targs: List<KTag>
      thisn: False|Int
      value: KFunc
    KDefTag :
      n: Int
      parent: False|KTag
      children: List<KChild>
    KInit :
      exp: KExp

    KLSDef :
      n: Int
      type: KLSType
      value: KLSExp
    KLSDefVar :
      n: Int
      type: KLSType
      value: False|KLSExp
    KLSDefn :
      n: Int
      value: KLSFunc
    KLSDefmethod :
      multi: Int
      targs: List<KTag>
      value: KLSFunc
    KLSDefStruct :
      n: Int
      parent: False|KTag
      fields: List<KStructField>
      rfield: False|KStructField
    KLSExternFn :
      n: Int
      lbl: Symbol
      value: KLSFunc
    KLSExtern :
      n: Int
      lbl: Symbol
      type: KLSType      
    KLSInit :
      comm: KLSComm

    ;[Type Reification]  
    KDefConst :
      n: Int
      value: ?
    KDefTypeObject :
      n: Int
      args: List<Int>
      tag: KTag
    ;[Object Lifting]  
    KDefObject :
      n: Int
      parent: KTag
      arity: Int

  ;Expressions
  deftype KExp
  defnodes KExp :
    KSet :
      n: Int
      tag: KTag
      value: KExp
    KCast :
      exp: KExp
      tag: KTag
      info: False|FileInfo
      elidable?: True|False
    KLet :
      def: KDef|KDefVar
      body: KExp
    KLetRec :
      defs: List<KDefn>
      body: KExp
    KSeq :
      a: KExp
      b: KExp
    KMatch :
      args: List<KExp>
      branches: List<KBranch>
      info: False|FileInfo
    KNew :
      tag: KTag
      methods: List<KDefmethod>
      info: False|FileInfo
    KDo :
      func: KExp
      args: List<KExp>
      a1: List<KTag>
      a2: KTag
      info: False|FileInfo
    KVar :
      n: Int
      info: False|FileInfo
    KLiteral :
      value: ?
    KTuple :
      exps: List<KExp>
      info: False|FileInfo
    KTupleGet :
      exp: KExp
      index: Int
    KEnsureLength :
      exp: KExp
      length: Int
      info: False|FileInfo
    KMix :
      exps: List<KCurry|KVar>
    KCurry :
      n: Int
      targs: List<KTag>
    KAFn :
      value: KFunc
    KPrim :
      op: Primitive
      args: List<KExp>

    ;[Mix Conversion]
    KDispatch :
      args: List<KExp>
      branches: List<KBranch>
      info: False|FileInfo
    ;[Boundary Guards]  
    KEnsureSet :
      exp: KExp
      info: False|FileInfo
    KDo! :
      arity: Int
      func: KExp
      args: List<KExp>
      info: False|FileInfo
    ;[Type Reification]
    KTypeObject :
      n: Int
      args: List<KExp>
    KReifiedCast :
      exp: KExp
      tag: KTag
      info: False|FileInfo
    ;[Mutable Boxing]
    KBox :
      value: False|KExp
    KBoxSet :
      exp: KExp
      value: KExp
    KBoxGet :
      exp: KExp
    ;[Object Lifting]
    KObjectGet :
      exp: KExp
      index: Int
    KObject :
      n: Int
      args: List<KExp>
      info: False|FileInfo
    ;[Closure Lifting]
    KCall :
      arity: Int
      func: Int
      args: List<KExp>
      info: False|FileInfo
    KClosure :
      n: Int
      args: List<KExp>
      info: False|FileInfo
    KLetClosures :
      ns: List<Int>
      closures: List<KClosure>
      body: KExp
    KClosureGet :
      exp: KExp
      index: Int
    ;[Type Inference]
    KTypedExp :
      exp: KExp
      tag: KTag
      
  ;LoStanza Types
  deftype KLSType
  defnodes KLSType :
    KByteT
    KIntT
    KLongT
    KFloatT
    KDoubleT
    KUnknownT
    KPtrT :
     type: KLSType
    KRefT :
     tag: KTag
    KFnT :
     a: List<KLSType>
     r: False|KLSType
     b: KLSType
    KStructT :
     n: Int
      
  ;LoStanza Commands
  deftype KLSComm
  defnodes KLSComm :
    KLSExec :
      exp: KLSExp
    KLSSet :
      loc: KLoc
      type: KLSType
      value: KLSExp
    KLSLabels :
      blocks: List<KLSLabeledBlock>
    KLSGoto :
      n: Int
      args: List<KLSExp>
    KLSReturn :
      exp: KLSExp
    KLSDefLocal :
      n: Int
      type: KLSType
      value: KLSExp
    KLSDefLocalVar :
      n: Int
      type: KLSType
      value: False|KLSExp
    KLSSeq :
      a: KLSComm
      b: KLSComm
    KLSIf :
      pred: KLSExp
      conseq: KLSComm
      alt: KLSComm
    KLSMatch :
      args: List<KLSExp>
      branches: List<KLSBranch>
      info: False|FileInfo
    KLSSkip
    
  ;LoStanza Locations
  deftype KLoc
  defnodes KLoc :
    KValue :
      exp: KLSExp
    KDeref :
      exp: KLSExp
    KDeptr :
      exp: KLSExp
    KField :
      exp: KLoc
      n: Int
    KSlot :
      exp: KLoc
      type: KLSType
      index: KLSExp
    KVarLoc :
      n: Int
      
  ;LoStanza Expressions
  deftype KLSExp
  defnodes KLSExp :
    KLSVar :
      n: Int
    KLSRef :
      n: Int
      args: List<KLSExp>
      info: False|FileInfo
    KLSArray :
      n: Int
      args: List<KLSExp>
      info: False|FileInfo
    KLSStruct :
      n: Int
      args: List<KLSExp>
    KLSPtr :
      loc: KLoc      
    KLSRead :
      loc: KLoc
      type: KLSType
    KLSDo :
      func: KLSExp
      args: List<KLSExp>
      a1: List<KLSType>
      a2: KLSType
      info: False|FileInfo
    KLSDoC :
      func: KLSExp
      args: List<KLSExp>
      varargs: List<KLSExp>
      type: KLSType
    KLSLiteral :
      value: ?
    KLSMix :
      exps: List<KLSCurry|KLSVar>
    KLSCurry :
      n: Int
      targs: List<KTag>
    KLSCast :
      exp: KLSExp
      type: KLSType
    KLSAnd :
      a: KLSExp
      b: KLSExp
    KLSOr :
      a: KLSExp
      b: KLSExp
    KLSPrim :
      op: LSPrimitive
      args: List<KLSExp>
    KLSSizeof :
      type: KLSType
    KLSTagof :
      n: Int
    ;[Boundary Guards]  
    KLSGuard :
      exp: KLSExp
      tag: KTag
      info: False|FileInfo
    ;[For closure creation]
    KLSAFn :
      value: KFunc
    ;[For mix conversion]
    KLSLet :
      n: Int
      type: KLSType
      value: KLSExp
      body: KLSExp
    KLSDispatch :
      args: List<KLSExp>
      branches: List<KLSBranchExp>
      info: False|FileInfo
    ;[Type Reification]  
    KLSTypeObject :
      n: Int
      args: List<KLSExp>
    KLSDo! :
      arity: Int
      func: KLSExp
      args: List<KLSExp>
      type: KLSType
      info: False|FileInfo
    ;[Closure Lifting]
    KLSClosure :
      n: Int
      args: List<KLSExp>
      info: False|FileInfo
    ;[Primitive Tagging]
    KDetagPrim :
      n: Int
      exp: KLSExp
    KTagPrim :
      n: Int
      exp: KLSExp


  ;==========================
  ;==== Mapper Functions ====
  ;==========================
  ;KLSExp
  defmapper (f:KLSExp -> KLSExp) :
    (x:KLSExp) : f(x)
    (x:List<KLSExp>) : map(f, x)
    (x:False|KLSExp) : match(x:KLSExp) : f(x)
    (x:List<KLSCurry|KLSVar>) : map({f(_) as KLSCurry|KLSVar}, x)
    (x:List<KLSBranchExp>) : map(map{f, _}, x)
  defdoer (f:KLSExp -> ?) :
    (x:KLSExp) : f(x)
    (x:List<KLSExp>) : do(f, x)
    (x:False|KLSExp) : match(x:KLSExp) : f(x)
    (x:List<KLSCurry|KLSVar>) : do(f, x)
    (x:List<KLSBranchExp>) : do(do{f, _}, x)
    
  ;KLSComm
  defmapper (f:KLSComm -> KLSComm) :
    (x:KLSComm) : f(x)
    (x:List<KLSBranch>) : map(map{f, _}, x)
    (x:List<KLSLabeledBlock>) : map(map{f, _}, x)
    (x:KLSFunc) : map(f, x)
  defdoer (f:KLSComm -> ?) :  
    (x:KLSComm) : f(x)
    (x:List<KLSBranch>) : do(do{f, _}, x)
    (x:List<KLSLabeledBlock>) : do(do{f, _}, x)
    (x:KLSFunc) : do(f, x)
    
  ;KLoc
  defmapper (f:KLoc -> KLoc) :
    (x:KLoc) : f(x)
  defdoer (f:KLoc -> ?) :
    (x:KLoc) : f(x)
    
  ;KExp
  defmapper (f:KExp -> KExp) :
    (x:KExp) : f(x)
    (x:False|KExp) : match(x:KExp) : f(x)
    (x:List<KExp>) : map(f, x)
    (x:List<KClosure>) : map({f(_) as KClosure}, x)
    (x:KFunc) : map(f, x)
    (x:List<KBranch>) : map(map{f, _}, x)
    (x:List<KCurry|KVar>) : map({f(_) as KCurry|KVar}, x)
  defdoer (f:KExp -> ?) :
    (x:KExp) : f(x)
    (x:False|KExp) : match(x:KExp) : f(x)
    (x:List<KExp>) : do(f, x)
    (x:List<KClosure>) : do(f, x)
    (x:KFunc) : do(f, x)
    (x:List<KBranch>) : do(do{f, _}, x)
    (x:List<KCurry|KVar>) : do(f, x)

  ;KComm
  defmapper (f:KComm -> KComm) :
    (x:KDef|KDefVar) : f(x) as KDef|KDefVar
    (x:List<KDefn>) : map({f(_) as KDefn}, x)
    (x:List<KDefmethod>) : map({f(_) as KDefmethod}, x)
    (x:List<KComm>) : map(f, x)
  defdoer (f:KComm -> ?) :
    (x:KDef|KDefVar) : f(x)
    (x:List<KDefn>) : do(f, x)
    (x:List<KDefmethod>) : do(f, x)
    (x:List<KComm>) : do(f, x)

  ;KTag
  defmapper (f:KTag -> KTag) :
    (x:KTag) : f(x)
    (x:List<KTag>) : map(f, x)
    (x:False|KTag) : match(x:KTag) : f(x)
    (x:List<KChild>) : map(map{f, _}, x)
    (x:KFunc) : map(f, x)
    (x:List<KBranch>) : map(map{f, _}, x)
    (x:List<KLSBranch>) : map(map{f, _}, x)
    (x:List<KLSBranchExp>) : map(map{f, _}, x)
  defdoer (f:KTag -> ?) :
    (x:KTag) : f(x)
    (x:List<KTag>) : do(f, x)
    (x:False|KTag) : match(x:KTag) : f(x)
    (x:List<KChild>) : do(do{f, _}, x)
    (x:KFunc) : do(f, x)
    (x:List<KBranch>) : do(do{f, _}, x)
    (x:List<KLSBranch>) : do(do{f, _}, x)
    (x:List<KLSBranchExp>) : do(do{f, _}, x)

  ;KLSType
  defmapper (f:KLSType -> KLSType) :
    (x:KLSType) : f(x)
    (x:List<KLSType>) : map(f, x)
    (x:False|KLSType) : match(x:KLSType) : f(x)
    (x:False|KStructField) : match(x:KStructField) : map(f, x)
    (x:List<KStructField>) : map(map{f, _}, x)
  defdoer (f:KLSType -> ?) :
    (x:KLSType) : f(x)
    (x:List<KLSType>) : do(f, x)
    (x:False|KLSType) : match(x:KLSType) : f(x)
    (x:False|KStructField) : match(x:KStructField) : do(f, x)
    (x:List<KStructField>) : do(do{f, _}, x)

  ;Other
  ignore :
    ?
    Symbol
    True|False
    Int
    List<Int>
    False|Int
    Primitive
    LSPrimitive
    False|FileInfo

  ;=================
  ;==== Mappers ====
  ;=================
  ;KExp
  make-mapper(f:KExp -> KExp, e:KExp)
  make-doer(f:KExp -> ?, e:KExp)
  make-mapper(f:KComm -> KComm, e:KExp)
  make-doer(f:KComm -> ?, e:KExp)
  make-mapper(f:KTag -> KTag, e:KExp)
  make-doer(f:KTag -> ?, e:KExp)

  ;KComm
  make-mapper(f:KExp -> KExp, c:KComm)
  make-doer(f:KExp -> ?, c:KComm)
  make-mapper(f:KLSExp -> KLSExp, c:KComm)
  make-doer(f:KLSExp -> ?, c:KComm)
  make-mapper(f:KLSComm -> KLSComm, c:KComm)
  make-doer(f:KLSComm -> ?, c:KComm)
  make-mapper(f:KTag -> KTag, c:KComm)
  make-doer(f:KTag -> ?, c:KComm)
  make-mapper(f:KLSType -> KLSType, c:KComm)
  make-doer(f:KLSType -> ?, c:KComm)

  ;KLSExp
  make-mapper(f:KLSExp -> KLSExp, e:KLSExp)
  make-doer(f:KLSExp -> ?, e:KLSExp)
  make-mapper(f:KLSComm -> KLSComm, e:KLSExp)
  make-doer(f:KLSComm -> ?, e:KLSExp)
  make-mapper(f:KLoc -> KLoc, e:KLSExp)
  make-doer(f:KLoc -> ?, e:KLSExp)
  make-mapper(f:KTag -> KTag, e:KLSExp)
  make-doer(f:KTag -> ?, e:KLSExp)
  make-mapper(f:KLSType -> KLSType, e:KLSExp)
  make-doer(f:KLSType -> ?, e:KLSExp)
  make-mapper(f:KExp -> KExp, e:KLSExp)
  make-doer(f:KExp -> ?, e:KLSExp)

  ;KLSComm
  make-mapper(f:KLSExp -> KLSExp, c:KLSComm)
  make-doer(f:KLSExp -> ?, c:KLSComm)
  make-mapper(f:KLSComm -> KLSComm, c:KLSComm)
  make-doer(f:KLSComm -> ?, c:KLSComm)
  make-mapper(f:KLoc -> KLoc, c:KLSComm)
  make-doer(f:KLoc -> ?, c:KLSComm)
  make-mapper(f:KLSType -> KLSType, c:KLSComm)
  make-doer(f:KLSType -> ?, c:KLSComm)
  make-mapper(f:KTag -> KTag, c:KLSComm)
  make-doer(f:KTag -> ?, c:KLSComm)

  ;KLoc
  make-mapper(f:KLSExp -> KLSExp, l:KLoc)
  make-doer(f:KLSExp -> ?, l:KLoc)
  make-mapper(f:KLoc -> KLoc, l:KLoc)
  make-doer(f:KLoc -> ?, l:KLoc)
  make-mapper(f:KLSType -> KLSType, l:KLoc)
  make-doer(f:KLSType -> ?, l:KLoc)

  ;KTag
  make-mapper(f:KTag -> KTag, t:KTag)
  make-doer(f:KTag -> ?, t:KTag)
  
  ;KLSType
  make-mapper(f:KTag -> KTag, t:KLSType)
  make-doer(f:KTag -> ?, t:KLSType)
  make-mapper(f:KLSType -> KLSType, t:KLSType)
  make-doer(f:KLSType -> ?, t:KLSType)  
  
      
;Children
public defstruct KChild :
  n: Int
  parent: KTag

;Functions
public deftype KFunc
public defmulti freevars? (f:KFunc) -> False|List<Int>
public defn freevars (f:KFunc) : freevars?(f) as List<Int>

public defstruct KFn <: KFunc :
  tail?: True|False
  targs: List<Int>
  a1: List<KTag>
  a2: KTag
  args: List<Int>
  body: KExp
  info: False|FileInfo

public defstruct KMultifn <: KFunc :
  funcs: List<KFunc>
  freevars?: False|List<Int> with: (as-method => true)
public defn KMultifn (funcs:List<KFunc>) :
  KMultifn(funcs, false)
  
public defstruct KFn! <: KFunc :
  tail?: True|False
  arity: Int
  a1: List<KTag>
  a2: KTag
  args: List<Int>
  body: KExp
  info: False|FileInfo
  freevars?: False|List<Int> with: (as-method => true)
public defn KFn! (tail?:True|False, arity:Int,
                  a1:List<KTag>, a2:KTag, args:List<Int>, body:KExp,
                  info:False|FileInfo) :
  KFn!(tail?, arity, a1, a2, args, body, info, false)

;LoStanza Functions
public deftype KLSFunc

public defstruct KLSFn <: KLSFunc :
  tail?: True|False
  targs: List<Int>
  a1: List<KLSType>
  a2: KLSType
  args: List<Int>
  body: KLSComm
  info: False|FileInfo

public defstruct KLSFn! <: KLSFunc :
  new-stack?: True|False
  tail?: True|False
  arity: Int
  a1: List<KLSType>
  a2: KLSType
  args: List<Int>
  body: KLSComm
  info: False|FileInfo
  
;Branches
public defstruct KBranch :
  args: List<Int>
  tags: List<KTag>
  body: KExp
  info: False|FileInfo

public defstruct KLSBranch :
  args: List<Int>
  tags: List<KTag>
  body: KLSComm

public defstruct KLSBranchExp :
  args: List<Int>
  tags: List<KTag>
  exp: KLSExp

public defstruct KLSLabeledBlock :
  n: Int
  args: List<Int>
  types: List<KLSType>
  body: KLSComm

public defstruct KStructField :
  n: Int
  type: KLSType    

public deftype KPkgComm :
  TGPackage <: KPkgComm

public defstruct KPackage <: KPkgComm :
  name: Symbol
  ids: PkgIds
  comms: List<KComm>

;============================================================
;====================== Mappers =============================
;============================================================

;KPackage
public defn map (f:KComm -> KComm, pkg:KPackage) :
  KPackage(name(pkg), ids(pkg), map(f, comms(pkg)))
public defn do (f:KComm -> ?, pkg:KPackage) :
  do(f, comms(pkg))

;KLSBranch
public defn map (f:KLSComm -> KLSComm, b:KLSBranch) :
  KLSBranch(args(b), tags(b), f(body(b)))
public defn do (f:KLSComm -> ?, b:KLSBranch) :
  f(body(b))
public defn map (f:KTag -> KTag, b:KLSBranch) :
  KLSBranch(args(b), map(f,tags(b)), body(b))
public defn do (f:KTag -> ?, b:KLSBranch) :
  do(f, tags(b))

;KLSBranchExp
public defn map (f:KLSExp -> KLSExp, b:KLSBranchExp) :
  KLSBranchExp(args(b), tags(b), f(exp(b)))
public defn do (f:KLSExp -> ?, b:KLSBranchExp) :
  f(exp(b))
public defn map (f:KTag -> KTag, b:KLSBranchExp) :
  KLSBranchExp(args(b), map(f,tags(b)), exp(b))
public defn do (f:KTag -> ?, b:KLSBranchExp) :
  do(f, tags(b))

;KBranch
public defn map (f:KExp -> KExp, b:KBranch) :
  KBranch(args(b), tags(b), f(body(b)), info(b))
public defn do (f:KExp -> ?, b:KBranch) :
  f(body(b))
public defn map (f:KTag -> KTag, b:KBranch) :
  KBranch(args(b), map(f,tags(b)), body(b), info(b))
public defn do (f:KTag -> ?, b:KBranch) :
  do(f, tags(b))

;KLSLabeledBlock
public defn map (f:KLSType -> KLSType, b:KLSLabeledBlock) :
  KLSLabeledBlock(n(b), args(b), map(f,types(b)), body(b))
public defn do (f:KLSType -> ?, b:KLSLabeledBlock) :
  do(f,types(b))
public defn map (f:KLSComm -> KLSComm, b:KLSLabeledBlock) :
  KLSLabeledBlock(n(b), args(b), types(b), f(body(b)))
public defn do (f:KLSComm -> ?, b:KLSLabeledBlock) :
  f(body(b))

;Func
public defn map<?T> (f:KExp -> KExp, x:?T&KFunc) -> T :
  {_ as T&KFunc} $ match(x) :
    (x:KFn) :
      KFn(tail?(x), targs(x), a1(x), a2(x), args(x), f(body(x)), info(x))
    (x:KFn!) :
      KFn!(tail?(x), arity(x), a1(x), a2(x), args(x), f(body(x)), info(x), freevars?(x))
    (x:KMultifn) :
      KMultifn(map(map{f, _}, funcs(x)), freevars?(x))
public defn do (f:KExp -> ?, x:KFunc) :
  match(x) :
    (x:KFn) :
      f(body(x))
    (x:KFn!) :
      f(body(x))
    (x:KMultifn) :
      do(do{f, _}, funcs(x))

public defn map<?T> (f:KTag -> KTag, x:?T&KFunc) -> T :
  {_ as T&KFunc} $ match(x) :
    (x:KFn) :
      KFn(tail?(x), targs(x), map(f,a1(x)), f(a2(x)), args(x), body(x), info(x))
    (x:KFn!) :
      KFn!(tail?(x), arity(x), map(f,a1(x)), f(a2(x)), args(x), body(x), info(x), freevars?(x))
    (x:KMultifn) :
      KMultifn(map(map{f, _}, funcs(x)), freevars?(x))
public defn do (f:KTag -> ?, x:KFunc) :
  match(x) :
    (x:KFn) :
      do(f, a1(x))
      f(a2(x))
    (x:KFn!) :
      do(f, a1(x))
      f(a2(x))
    (x:KMultifn) :
      do(do{f, _}, funcs(x))

;KLSFn
public defn map<?T> (f:KLSComm -> KLSComm, x:?T&KLSFunc) :
  {_ as T&KLSFunc} $ match(x) :
    (x:KLSFn) :
      KLSFn(tail?(x), targs(x), a1(x), a2(x), args(x), f(body(x)), info(x))
    (x:KLSFn!) :
      KLSFn!(new-stack?(x), tail?(x), arity(x), a1(x), a2(x), args(x), f(body(x)), info(x))      
public defn do (f:KLSComm -> ?, x:KLSFunc) :
  match(x) :
    (x:KLSFn) : f(body(x))
    (x:KLSFn!) : f(body(x))

public defn map<?T> (f:KLSType -> KLSType, x:?T&KLSFunc) :
  {_ as T&KLSFunc} $ match(x) :
    (x:KLSFn) :
      KLSFn(tail?(x), targs(x), map(f,a1(x)), f(a2(x)), args(x), body(x), info(x))
    (x:KLSFn!) :
      KLSFn!(new-stack?(x), tail?(x), arity(x), map(f,a1(x)), f(a2(x)), args(x), body(x), info(x))
public defn do (f:KLSType -> ?, x:KLSFunc) :
  match(x) :
    (x:KLSFn|KLSFn!) :
      do(f, a1(x))
      f(a2(x))

;StructField
public defn map (f:KLSType -> KLSType, s:KStructField) :
  KStructField(n(s), f(type(s)))
public defn do (f:KLSType -> ?, s:KStructField) :
  f(type(s))

;KChild
public defn map (f:KTag -> KTag, c:KChild) :
  KChild(n(c), f(parent(c)))
public defn do (f:KTag -> ?, c:KChild) :
  f(parent(c))

;============================================================
;=================== Recursive Mappers ======================
;============================================================

public defn map-all (f:KTag|KLSType -> KTag|KLSType,
                     x:KTag|KLSType) :
  defn ft (x:KTag) : f(x) as KTag
  defn flt (x:KLSType) : f(x) as KLSType  
  match(x) :
    (x:KTag) : map(ft, x)
    (x:KLSType) : map(ft, map(flt, x))

public deftype KNode :
  KComm <: KNode
  KExp <: KNode
  KLSComm <: KNode
  KLSExp <: KNode
  KLoc <: KNode

public defn map-all (f:KNode -> KNode, x:KNode) :
  defn fc (x:KComm) : f(x) as KComm
  defn fe (x:KExp) : f(x) as KExp
  defn flc (x:KLSComm) : f(x) as KLSComm
  defn fle (x:KLSExp) : f(x) as KLSExp
  defn fl (x:KLoc) : f(x) as KLoc
  match(x) :
    (x:KComm) : map(fe, map(flc, map(fle, x)))
    (x:KExp) : map(fc, map(fe, x))
    (x:KLSComm) : map(flc, map(fle, map(fl, x)))
    (x:KLSExp) : map(fe, map(fle, map(fl, x)))
    (x:KLoc) : map(fle, map(fl, x))

public defn do-all (f:KNode -> ?, x:KNode) :
  defn fc (x:KComm) : f(x)
  defn fe (x:KExp) : f(x)
  defn flc (x:KLSComm) : f(x)
  defn fle (x:KLSExp) : f(x)
  defn fl (x:KLoc) : f(x)
  match(x) :
    (x:KComm) : (do(fe,x), do(flc,x), do(fle,x))
    (x:KExp) : (do(fc,x), do(fe,x))
    (x:KLSComm) : (do(flc,x), do(fle,x), do(fl,x))
    (x:KLSExp) : (do(fe,x), do(fle,x), do(fl,x))
    (x:KLoc) : (do(fle,x), do(fl,x))

public defn map-all (f:KTag|KLSType -> KTag|KLSType, x:KNode) :
  defn ft (x:KTag) : f(x) as KTag
  defn flt (x:KLSType) : f(x) as KLSType
  match(x) :
    (x:KComm) : map(ft, map(flt, x))
    (x:KExp) : map(ft, x)
    (x:KLSComm) : map(ft, map(flt, x))
    (x:KLSExp) : map(ft, map(flt, x))
    (x:KLoc) : map(flt, x)

public defn do-all (f:KTag|KLSType -> ?, x:KNode) :
  defn ft (x:KTag) : f(x)
  defn flt (x:KLSType) : f(x)
  match(x) :
    (x:KComm) : (do(ft,x), do(flt,x))
    (x:KExp) : do(ft, x)
    (x:KLSComm) : (do(ft,x), do(flt,x))
    (x:KLSExp) : (do(ft,x), do(flt,x))
    (x:KLoc) : do(flt, x)

;============================================================
;===================== Type Matching ========================
;============================================================

defmethod hash (t:KTag) :
  hash $ match(t) :
    (t:KOf) : [0, n(t)]
    (t:KTVar) : [1, n(t)]
    (t:KAnd) : [2, a(t), b(t)]
    (t:KOr) : [3, a(t), b(t)]
    (t:KTop) : [4]
    (t:KBot) : [5]

defmethod equal? (x:KTag, y:KTag) :
  match(x, y) :
    (x:KOf, y:KOf) : n(x) == n(y)
    (x:KTVar, y:KTVar) : n(x) == n(y)
    (x:KAnd, y:KAnd) : a(x) == a(y) and b(x) == b(y)
    (x:KOr, y:KOr) : a(x) == a(y) and b(x) == b(y)
    (x:KTop, y:KTop) : true
    (x:KBot, y:KBot) : true
    (x, y) : false

;============================================================
;=================== KTag Utilities =========================
;============================================================

public defn has-var? (t:KTag) :
  match(t) :
    (t:KTVar) : true
    (t) : any?(has-var?, t)

public defn any? (f: KTag -> True|False, type:KTag) :
  var accum = false
  for t in type do :
    (accum = true) when f(t)
  accum

;============================================================
;============== Convenient Constructors/Getters =============
;============================================================

public defn KVar (n:Int) :
  KVar(n, false)

public defn KOr (ts:List<KTag>) :
  if empty?(ts) : KBot()
  else : reduce(KOr, ts)

public defn KCast (e:KExp, tag:KTag, info:False|FileInfo) :
  KCast(e, tag, info, true)

public defn KDef (n:Int, tag:KTag, value:KExp) :
  KDef(n, tag, value, false)

public defn KLSLet (d:KLSDefLocal, e:KLSExp) :
  KLSLet(n(d), type(d), value(d), e)

public defn KLSLet (defs:Seqable<KLSDefLocal>, e:KLSExp) :
  reduce-right(KLSLet, defs, e)

public defn KLet (es:Seqable<KDef|KDefVar>, e:KExp) :
  reduce-right(KLet, es, e)

public defn KSeq (es:Seqable<KExp>, e:KExp) :
  reduce-right(KSeq, es, e)

public defn KTops (xs:List) :
  map(KTop{}, xs)

public defn KVars (xs:List<Int>) :
  map(KVar, xs)

public defn KLSVars (xs:List<Int>) :
  map(KLSVar, xs)

public defn KRefTs (xs:List<KTag>) :
  map(KRefT, xs)

public defn KCurry? (n:Int, targs:List<KTag>) :
  if empty?(targs) : KVar(n)
  else : KCurry(n, targs)

public defn KLSSeq (es:Seqable<KLSComm>, e:KLSComm) :
  reduce-right(KLSSeq, es, e)

public defn KLSSeq? (a:KLSComm, b:KLSComm) :
  match(a, b) :
    (a:KLSSkip, b) : b
    (a, b:KLSSkip) : a
    (a, b) : KLSSeq(a, b)

public defn tag! (t:KLSType) :
  tag(t as KRefT)

public defn tags! (ts:List<KLSType>) :
  map(tag!, ts)

;============================================================
;===================== Type Size ============================
;============================================================

public defn prim-size (t:KLSType) :
  match(t) :
    (t:KByteT) : 1
    (t:KIntT) : 4
    (t:KLongT) : 8
    (t:KFloatT) : 4
    (t:KDoubleT) : 8
    (t:KPtrT) : 8
    (t:KRefT) : 8
    (t) : fatal("Not a primitive type: %_" % [t])

;============================================================
;================= Type Simplification ======================
;============================================================

;Trivial Simplifications
public defn trivial-simplify (t:KTag) :
  match(map(trivial-simplify, t)) :
    (t:KAnd) :
      match(a(t), b(t)) :
        (a:KBot, b) : a
        (a, b:KBot) : b
        (a:KTop, b) : b
        (a, b:KTop) : a
        (a:KTVar, b:KTVar) : a when a == b else t
        (a, b) : t
    (t:KOr) :
      match(a(t), b(t)) :
        (a:KBot, b) : b
        (a, b:KBot) : a
        (a:KTop, b) : a
        (a, b:KTop) : b
        (a:KTVar, b:KTVar) : a when a == b else t
        (a, b) : t
    (t) : t

;============================================================
;==================== TVar Replacement ======================
;============================================================

public defn replace-tvars (t:KTag, entries:Table<Int,KTag>) :
  defn ft (t:KTag) :
    match(t:KTVar) : get?(entries, n(t), t)
    else : map(ft,t)
  trivial-simplify(ft(t))

public defn replace-tvars (t:KLSType, entries:Table<Int,KTag>) :
  defn ft (t:KLSType|KTag) :
    match(t) :
      (t:KTag) : replace-tvars(t, entries)
      (t:KLSType) : map-all(ft, t)
  ft(t) as KLSType

;============================================================
;===================== Type Conversions =====================
;============================================================

public defn to-ktag (t:Type) -> KTag :
  match(t) :
    (t:TCap|TVar) : KTVar(n(t))
    (t:TOf) : KOf(n(t))
    (t:TTuple) : KOf(TUPLE-TYPE-ID)
    (t:TOr) : KOr(to-ktag(a(t)), to-ktag(b(t)))
    (t:TAnd) : KAnd(to-ktag(a(t)), to-ktag(b(t)))
    (t:TArrow) : KOf(FN-TYPE-ID)
    (t:TGradual) : KTop()
    (t:TBot) : KBot()
    (t) : fatal("No equivalent tag: %_" % [t])

public defn to-ktype (t:LSType) -> KLSType :
  defn to-ktype? (t:False|LSType) :
    match(t:LSType) : to-ktype(t)
  match(t) :
    (t:ByteT) : KByteT()
    (t:IntT) : KIntT()
    (t:LongT) : KLongT()
    (t:FloatT) : KFloatT()
    (t:DoubleT) : KDoubleT()
    (t:UnknownT) : KUnknownT()
    (t:PtrT) : KPtrT(to-ktype(type(t)))
    (t:RefT) : KRefT(to-ktag(type(t)))
    (t:FnT) : KFnT(map(to-ktype,a(t)), to-ktype?(r(t)), to-ktype(b(t)))
    (t:StructT) : KStructT(n(t))
    (t) : fatal("Type cannot be converted to KLSType: %~" % [t])  

;============================================================
;====================== Printers ============================
;============================================================

defprinter (p:KPackage) :
  KPackage :
    ($package name ids comms ...)

defprinter (f:KFunc) :
  KFn :
    if tail?(f) : ($fn* (targs ...) (a1 ...) a2 (args ...) body)
    else : ($fn (targs ...) (a1 ...) a2 (args ...) body)
  KFn! :
    if tail?(f) : ($fn!* arity (a1 ...) a2 (args ...) body freevars?)
    else : ($fn! arity (a1 ...) a2 (args ...) body freevars?)
  KMultifn :
    ($multi freevars? funcs ...)

defprinter (f:KLSFunc) :
  KLSFn :
    if tail?(f) : ($fn* (targs ...) (a1 ...) a2 (args ...) body)
    else : ($fn (targs ...) (a1 ...) a2 (args ...) body)
  KLSFn! :
    if tail?(f) : ($fn!* arity (a1 ...) a2 (args ...) body)
    else : ($fn! arity (a1 ...) a2 (args ...) body)

defprinter (b:KBranch) :
  KBranch :
    ($branch (args ...) (tags ...) body)

defprinter (b:KLSBranch) :
  KLSBranch :
    ($branch (args ...) (tags ...) body)

defprinter (b:KLSBranchExp) :
  KLSBranchExp :
    ($branch (args ...) (tags ...) exp)

defprinter (b:KLSLabeledBlock) :
  KLSLabeledBlock :
    ($block n (args ...) (types ...) body)

defprinter (c:KChild) :
  KChild :
    ($child n parent)

defprinter (f:KStructField) :
  KStructField :
    ($field n type)

defprinter (t:KTag) :
  KOf :
    custom{"$T%_" % [n(t)]}
  KTVar :
    custom{"$V%_" % [n(t)]}
  KAnd :
    ($and a b)
  KOr :
    ($or a b)
  KTop :
    custom{"$top"}
  KBot :
    custom{"$bot"}

defprinter (t:KLSType) :
  KByteT :
    custom{"$byte"}
  KIntT :
    custom{"$int"}
  KLongT :
    custom{"$long"}
  KFloatT :
    custom{"$float"}
  KDoubleT :
    custom{"$double"}
  KUnknownT :
    custom{"$?"}
  KPtrT :
    ($ptr type)
  KRefT :
    ($ref tag)
  KFnT :
    ($fn a r b)
  KStructT :
    custom{"$T%_" % [n(t)]}

defprinter (c:KComm) :
  KDef :
   ($def n tag value)
  KDefVar :
   if value(c) is False : ($defvar n tag)
   else : ($defvar n tag value)
  KDefn :
    ($defn n value)
  KDefmulti :
    if tail?(c) : ($defmulti* n (targs ...) (a1 ...) a2)
    else : ($defmulti n (targs ...) (a1 ...) a2)
  KDefmethod :
    ($defmethod multi (targs ...) thisn value)
  KDefTag :
    ($deftag n parent children ...)
  KInit :
    custom{exp(c)}

  KLSDef :
    ($lsdef n type value)
  KLSDefVar :
    ($lsdefvar n type value)
  KLSDefn :
    ($lsdefn n value)
  KLSDefmethod :
    ($lsdefmethod multi (targs ...) value)
  KLSDefStruct :
    ($lsdefstruct n parent (fields ...) rfield)    
  KLSInit :
    custom{comm(c)}
  KLSExternFn :
    ($defexfn n lbl value)
  KLSExtern :
    ($extern n lbl type)

  KDefConst :
    ($defconst n value)
  KDefTypeObject :
    ($deftypeobj n (args ...) tag)
  KDefObject :
    ($defobject n parent arity)

defprinter (c:KLSComm) :
  KLSExec :
    custom{exp(c)}
  KLSSet :
    ($set loc type value)
  KLSLabels :
    ($labels blocks ...)
  KLSGoto :
    ($goto n args ...)
  KLSReturn :
    ($return exp)
  KLSDefLocal :
    ($def n type value)
  KLSDefLocalVar :
    ($defvar n type value)
  KLSSeq :
    ($seq a b)
  KLSIf :
    ($if pred conseq alt)
  KLSMatch :
    ($match (args ...) branches ...)
  KLSSkip :
    ($skip)

defprinter (e:KExp) :
  KSet :
    ($set n tag value)
  KCast :
    ($cast exp tag)
  KLet :
    ($let def body)
  KLetRec :
    ($letrec (defs ...) body)
  KSeq :
    ($seq a b)
  KMatch :
    ($match (args ...) branches ...)
  KNew :
    ($new tag methods ...)
  KDo :
    ($do (a1 ...) a2 func args ...)
  KVar :
    custom{"$v%_" % [n(e)]}
  KLiteral :
    ($value value)
  KTuple :
    ($tuple exps ...)
  KTupleGet :
    ($tuple-get exp index)
  KEnsureLength :
    ($ensure-length exp length)      
  KMix :
    ($mix exps ...)
  KCurry :
    ($curry n (targs ...))
  KAFn :
    ($afn value)
  KPrim :
    ($prim op args ...)
  ;Working  
  KDispatch :
    ($dispatch (args ...) branches ...)
  KEnsureSet :
    ($ensure-set exp)
  KDo! :
    ($do! func args ...)
  KTypeObject :
    ($typeobj n args ...)
  KReifiedCast :
    ($rcast exp tag)
  KBox :
    ($box value)
  KBoxSet :
    ($box-set exp value)
  KBoxGet :
    ($box-get exp)
  KObjectGet :
    ($object-get exp index)
  KObject :
    ($object n args ...)
  KCall :
    ($call arity func args ...)
  KClosure :
    ($closure n args ...)
  KLetClosures :
    ($let-closures (ns ...) (closures ...) body)
  KClosureGet :
    ($closure-get exp index)
  KTypedExp :
    ($typed exp tag)

defprinter (l:KLoc) :
  KValue :
    custom{exp(l)}
  KDeref :
    ($deref exp)
  KDeptr :
    ($deptr exp)
  KSlot :
    ($slot exp type index)
  KField :
    ($field exp n)
  KVarLoc :
    ($varloc n)

defprinter (e:KLSExp) :
  KLSVar :
    custom{"$v%_" % [n(e)]}
  KLSRef :
    ($ref n args ...)
  KLSArray :
    ($array n args ...)
  KLSStruct :
    ($struct n args ...)
  KLSPtr :
    ($ptr loc)
  KLSRead :
    ($read loc type)
  KLSDo :
    ($do func (args ...) (a1 ...) a2)
  KLSDoC :
    ($do-c func (args ...) (varargs ...) type)
  KLSLiteral :
    custom{value(e)}
  KLSMix :
    ($mix exps ...)
  KLSCurry :
    ($curry n (targs ...))
  KLSCast :
    ($cast exp type)
  KLSAnd :
    ($and a b)
  KLSOr :
    ($or a b)
  KLSPrim :
    ($prim op args ...)
  KLSSizeof :
    ($sizeof type)
  KLSTagof :
    ($tagof n)
  ;Working
  KLSGuard :
    ($guard exp tag)
  KLSAFn :
    ($afn value)
  KLSLet :
    ($let n type value body)
  KLSDispatch :
    ($dispatch (args ...) branches ...)
  KLSTypeObject :
    ($typeobj n args ...)
  KLSDo! :
    ($do! arity func (args ...) type)
  KLSClosure :  
    ($closure n args ...)
  KDetagPrim :
    ($detag n exp)
  KTagPrim :
    ($tag n exp)

