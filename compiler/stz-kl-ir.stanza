;See License.txt for details about licensing.

defpackage stz/kl-ir :
  import core with :
    prefix(Seq, Tuple) => C
  import collections
  import stz/tl-ir with :
    prefix(Child, TVar) => T

;Use utilities for defining ASTs quickly.
#use-added-syntax(stz-ast-lang, stz-printer-lang)

;============================================================
;===================== Structures ===========================
;============================================================

public defast :
   ;Tags
   deftype Tag
   defnodes Tag :
     Of :
       n: Int
     TVar :
       n: Int
     And :
       a: Tag
       b: Tag
     Or :
       a: Tag
       b: Tag
     Top
     Bot
   
   ;Commands
   deftype Comm
   defnodes Comm :
     Def :
       n: Int
       tag: Tag
       value: Exp
     DefVar :
       n: Int
       tag: Tag
       value: False|Exp
     Defn :
       n: Int
       value: Fn
     Defmulti :
       n: Int
       tail?: True|False
       targs: List<Int>
       a1: List<Tag>
       a2: Tag
     Defmethod :
       multi: Int
       targs: List<Tag>
       thisn: False|Int
       value: Fn
     DefTag :
       n: Int
       parent: False|Tag
       children: List<Child>
     Init :
       exp: Exp

   ;Expressions
   deftype Exp
   defnodes Exp :
     Set :
       n: Int
       tag: Tag
       value: Exp
     Cast :
       exp: Exp
       tag: Tag
     Let :
       def: Def|DefVar
       body: Exp
     LetRec :
       defs: List<Defn>
       body: Exp
     Seq :
       a: Exp
       b: Exp
     Match :
       args: List<Exp>
       branches: List<Branch>
     New :
       tag: Tag
       methods: List<Defmethod>
     Do :
       func: Exp
       args: List<Exp>
       a1: List<Tag>
       a2: Tag
     Var :
       n: Int
     Literal :
       value: ?
     Tuple :
       exps: List<Exp>
     TupleGet :
       exp: Exp
       index: Int
     EnsureLength :
       exp: Exp
       length: Int
     Mix :
       exps: List<Curry>
     Curry :
       n: Int
       targs: List<Tag>
       a1: List<Tag>
       a2: Tag
     AFn :
       value: Func       

;Children
public defstruct Child :
  n: Int
  parent: Tag

;Functions
public deftype Func

public defstruct Fn <: Func :
  tail?: True|False
  targs: List<Int>
  a1: List<Tag>
  a2: Tag
  args: List<Int>
  body: Exp
public defstruct Multifn <: Func :
  funcs: List<Fn>

;Branches
public defstruct Branch :
  args: List<Int>
  tags: List<Tag>
  body: Exp


;============================================================
;====================== Printers ============================
;============================================================

defprinter (f:Func) :
  Fn :
    if tail?(f) : ($fn* (targs ...) (a1 ...) a2 (args ...) body)
    else : ($fn (targs ...) (a1 ...) a2 (args ...) body)
  Multifn :
    ($multi funcs ...)

defprinter (b:Branch) :
  Branch :
    ($branch (args ...) (tags ...) body)

defprinter (c:Child) :
  Child :
    ($child n parent)

defprinter (t:Tag) :
  Of :
    custom{"$T%_" % [n(t)]}
  TVar :
    custom{"$V%_" % [n(t)]}
  And :
    ($and a b)
  Or :
    ($or a b)
  Top :
    custom{"$top"}
  Bot :
    custom{"$bot"}

defprinter (c:Comm) :
  Def :
   ($def n tag value)
  DefVar :
   if value(c) is False : ($defvar n tag)
   else : ($defvar n tag value)
  Defn :
    ($defn n value)
  Defmulti :
    if tail?(c) : ($defmulti* n (targs ...) (a1 ...) a2)
    else : ($defmulti n (targs ...) (a1 ...) a2)
  Defmethod :
    ($defmethod multi (targs ...) thisn value)
  DefTag :
    ($deftag n parent children ...)
  Init :
    custom{exp(c)}

defprinter (e:Exp) :
  Set :
    ($set n tag value)
  Cast :
    ($cast exp tag)
  Let :
    ($let def body)
  LetRec :
    ($letrec (defs ...) body)
  Seq :
    ($seq a b)
  Match :
    ($match (args ...) branches ...)
  New :
    ($new tag methods ...)
  Do :
    ($do (a1 ...) a2 func args ...)
  Var :
    custom{"$v%_" % [n(e)]}
  Literal :
    ($value value)
  Tuple :
    ($tuple exps ...)
  TupleGet :
    ($tuple-get exp index)
  EnsureLength :
    ($ensure-length exp length)      
  Mix :
    ($mix exps ...)
  Curry :
    ($curry n (targs ...) (a1 ...) a2)
  AFn :
    ($afn value)