;See License.txt for details about licensing.

defpackage stz/kl-ir :
  import core
  import collections
  import stz/tl-ir
  import stz/pl-ir
  import stz/primitives  

;Use utilities for defining ASTs quickly.
#use-added-syntax(stz-ast-lang, stz-printer-lang)

;============================================================
;===================== Structures ===========================
;============================================================

public defast :
  ;Tags
  deftype KTag
  defnodes KTag :
    KOf :
      n: Int
    KTVar :
      n: Int
    KAnd :
      a: KTag
      b: KTag
    KOr :
      a: KTag
      b: KTag
    KTop
    KBot
  
  ;Commands
  deftype KComm
  defnodes KComm :
    KDef :
      n: Int
      tag: KTag
      value: KExp
    KDefVar :
      n: Int
      tag: KTag
      value: False|KExp
    KDefn :
      n: Int
      value: KFn
    KDefmulti :
      n: Int
      tail?: True|False
      targs: List<Int>
      a1: List<KTag>
      a2: KTag
    KDefmethod :
      multi: Int
      targs: List<KTag>
      thisn: False|Int
      value: KFn
    KDefTag :
      n: Int
      parent: False|KTag
      children: List<KChild>
    KInit :
      exp: KExp

    KLSDef :
      n: Int
      type: KLSType
      value: KLSExp
    KLSDefVar :
      n: Int
      type: KLSType
      value: False|KLSExp
    KLSDefn :
      n: Int
      value: KLSFn
    KLSDefmethod :
      multi: Int
      targs: List<KTag>
      value: KLSFn      
    KLSDefStruct :
      n: Int
      parent: False|KTag
      fields: List<KStructField>
      rfield: False|KStructField
    KLSExternFn :
      n: Int
      lbl: Symbol
      value: KLSFn
    KLSExtern :
      n: Int
      lbl: Symbol
      type: KLSType      
    KLSInit :
      comm: KLSComm

  ;Expressions
  deftype KExp
  defnodes KExp :
    KSet :
      n: Int
      tag: KTag
      value: KExp
    KCast :
      exp: KExp
      tag: KTag
    KLet :
      def: KDef|KDefVar
      body: KExp
    KLetRec :
      defs: List<KDefn>
      body: KExp
    KSeq :
      a: KExp
      b: KExp
    KMatch :
      args: List<KExp>
      branches: List<KBranch>
    KNew :
      tag: KTag
      methods: List<KDefmethod>
    KDo :
      func: KExp
      args: List<KExp>
      a1: List<KTag>
      a2: KTag
    KVar :
      n: Int
    KLiteral :
      value: ?
    KTuple :
      exps: List<KExp>
    KTupleGet :
      exp: KExp
      index: Int
    KEnsureLength :
      exp: KExp
      length: Int
    KMix :
      exps: List<KExp>
    KCurry :
      n: Int
      targs: List<KTag>
    KAFn :
      value: KFunc
    KPrim :
      op: Primitive
      args: List<KExp>
      
  ;LoStanza Types
  deftype KLSType
  defnodes KLSType :
    KByteT
    KIntT
    KLongT
    KFloatT
    KDoubleT
    KUnknownT
    KPtrT :
     type: KLSType
    KRefT :
     tag: KTag
    KFnT :
     a: List<KLSType>
     r: False|KLSType
     b: KLSType
    KStructT :
     n: Int
      
  ;LoStanza Commands
  deftype KLSComm
  defnodes KLSComm :
    KLSExec :
      exp: KLSExp
    KLSSet :
      loc: KLoc
      value: KLSExp
    KLSLabels :
      blocks: List<KLSLabeledBlock>
    KLSGoto :
      n: Int
      args: List<KLSExp>
    KLSReturn :
      exp: KLSExp
    KLSDefLocal :
      n: Int
      type: KLSType
      value: KLSExp
    KLSDefLocalVar :
      n: Int
      type: KLSType
      value: False|KLSExp
    KLSSeq :
      a: KLSComm
      b: KLSComm
    KLSIf :
      pred: KLSExp
      conseq: KLSComm
      alt: KLSComm
    KLSMatch :
      args: List<KLSExp>
      branches: List<KLSBranch>
    KLSSkip
    
  ;LoStanza Locations
  deftype KLoc
  defnodes KLoc :
    KValue :
      exp: KLSExp
    KDeref :
      exp: KLSExp
      type: KLSType
    KDeptr :
      exp: KLSExp
      type: KLSType
    KSlot :
      exp: KLSExp
      type: KLSType
      index: KLSExp
    KField :
      exp: KLoc
      n: Int
      
  ;LoStanza Expressions
  deftype KLSExp
  defnodes KLSExp :
    KLSVar :
      n: Int
    KLSRef :
      n: Int
      args: List<KLSExp>
    KLSArray :
      n: Int
      args: List<KLSExp>
    KLSStruct :
      n: Int
      args: List<KLSExp>
    KLSPtr :
      loc: KLoc      
    KLSRead :
      loc: KLoc
    KLSCall :
      func: KLSExp
      args: List<KLSExp>
      type: KLSType      
    KLSCallC :
      func: KLSExp
      args: List<KLSExp>
      varargs: List<KLSExp>
      type: KLSType
    KLSLiteral :
      value: ?
    KLSMix :
      exps: List<KLSExp>
    KLSCurry :
      n: Int
      targs: List<KTag>
    KLSCast :
      exp: KLSExp
      type: KLSType
    KLSAnd :
      a: KLSExp
      b: KLSExp
    KLSOr :
      a: KLSExp
      b: KLSExp
    KLSPrim :
      op: LSPrimitive
      args: List<KLSExp>
    KLSSizeof :
      type: KLSType
    KLSTagof :
      n: Int
      
;Children
public defstruct KChild :
  n: Int
  parent: KTag

;Functions
public deftype KFunc

public defstruct KFn <: KFunc :
  tail?: True|False
  targs: List<Int>
  a1: List<KTag>
  a2: KTag
  args: List<Int>
  body: KExp
public defstruct KMultifn <: KFunc :
  funcs: List<KFn>

;Branches
public defstruct KBranch :
  args: List<Int>
  tags: List<KTag>
  body: KExp

public defstruct KLSBranch :
  args: List<Int>
  tags: List<KTag>
  body: KLSComm

public defstruct KLSLabeledBlock :
  n: Int
  args: List<Int>
  types: List<KLSType>
  body: KLSComm

public defstruct KLSFn :
  tail?: True|False
  targs: List<Int>
  a1: List<KLSType>
  a2: KLSType
  args: List<Int>
  body: KLSComm

public defstruct KStructField :
  n: Int
  type: KLSType    

public defstruct KPackage :
  name: Symbol
  ids: PkgIds
  comms: List<KComm>

;============================================================
;====================== Printers ============================
;============================================================

defprinter (p:KPackage) :
  KPackage :
    ($package name ids comms ...)

defprinter (f:KFunc) :
  KFn :
    if tail?(f) : ($fn* (targs ...) (a1 ...) a2 (args ...) body)
    else : ($fn (targs ...) (a1 ...) a2 (args ...) body)
  KMultifn :
    ($multi funcs ...)

defprinter (f:KLSFn) :
  KLSFn :
    if tail?(f) : ($fn* (targs ...) (a1 ...) a2 (args ...) body)
    else : ($fn (targs ...) (a1 ...) a2 (args ...) body)

defprinter (b:KBranch) :
  KBranch :
    ($branch (args ...) (tags ...) body)

defprinter (b:KLSBranch) :
  KLSBranch :
    ($branch (args ...) (tags ...) body)

defprinter (b:KLSLabeledBlock) :
  KLSLabeledBlock :
    ($block n (args ...) (types ...) body)

defprinter (c:KChild) :
  KChild :
    ($child n parent)

defprinter (f:KStructField) :
  KStructField :
    ($field n type)

defprinter (t:KTag) :
  KOf :
    custom{"$T%_" % [n(t)]}
  KTVar :
    custom{"$V%_" % [n(t)]}
  KAnd :
    ($and a b)
  KOr :
    ($or a b)
  KTop :
    custom{"$top"}
  KBot :
    custom{"$bot"}

defprinter (t:KLSType) :
  KByteT :
    custom{"$byte"}
  KIntT :
    custom{"$int"}
  KLongT :
    custom{"$long"}
  KFloatT :
    custom{"$float"}
  KDoubleT :
    custom{"$double"}
  KUnknownT :
    custom{"$?"}
  KPtrT :
    ($ptr type)
  KRefT :
    ($ref tag)
  KFnT :
    ($fn a r b)
  KStructT :
    custom{"$T%_" % [n(t)]}

defprinter (c:KComm) :
  KDef :
   ($def n tag value)
  KDefVar :
   if value(c) is False : ($defvar n tag)
   else : ($defvar n tag value)
  KDefn :
    ($defn n value)
  KDefmulti :
    if tail?(c) : ($defmulti* n (targs ...) (a1 ...) a2)
    else : ($defmulti n (targs ...) (a1 ...) a2)
  KDefmethod :
    ($defmethod multi (targs ...) thisn value)
  KDefTag :
    ($deftag n parent children ...)
  KInit :
    custom{exp(c)}

  KLSDef :
    ($lsdef n type value)
  KLSDefVar :
    ($lsdefvar n type value)
  KLSDefn :
    ($lsdefn n value)
  KLSDefmethod :
    ($lsdefmethod multi (targs ...) value)
  KLSDefStruct :
    ($lsdefstruct n parent (fields ...) rfield)    
  KLSInit :
    custom{comm(c)}
  KLSExternFn :
    ($defexfn n lbl value)
  KLSExtern :
    ($extern n lbl type)

defprinter (c:KLSComm) :
  KLSExec :
    custom{exp(c)}
  KLSSet :
    ($set loc value)
  KLSLabels :
    ($labels blocks ...)
  KLSGoto :
    ($goto n args ...)
  KLSReturn :
    ($return exp)
  KLSDefLocal :
    ($def n type value)
  KLSDefLocalVar :
    ($defvar n type value)
  KLSSeq :
    ($seq a b)
  KLSIf :
    ($if pred conseq alt)
  KLSMatch :
    ($match (args ...) branches ...)
  KLSSkip :
    ($skip)

defprinter (e:KExp) :
  KSet :
    ($set n tag value)
  KCast :
    ($cast exp tag)
  KLet :
    ($let def body)
  KLetRec :
    ($letrec (defs ...) body)
  KSeq :
    ($seq a b)
  KMatch :
    ($match (args ...) branches ...)
  KNew :
    ($new tag methods ...)
  KDo :
    ($do (a1 ...) a2 func args ...)
  KVar :
    custom{"$v%_" % [n(e)]}
  KLiteral :
    ($value value)
  KTuple :
    ($tuple exps ...)
  KTupleGet :
    ($tuple-get exp index)
  KEnsureLength :
    ($ensure-length exp length)      
  KMix :
    ($mix exps ...)
  KCurry :
    ($curry n (targs ...))
  KAFn :
    ($afn value)
  KPrim :
    ($prim op args ...)

defprinter (l:KLoc) :
  KValue :
    custom{exp(l)}
  KDeref :
    ($deref exp type)
  KDeptr :
    ($deptr exp type)
  KSlot :
    ($slot exp type index)
  KField :
    ($field exp n)

defprinter (e:KLSExp) :
  KLSVar :
    custom{"$v%_" % [n(e)]}
  KLSRef :
    ($ref n args ...)
  KLSArray :
    ($array n args ...)
  KLSStruct :
    ($struct n args ...)
  KLSPtr :
    ($ptr loc)
  KLSRead :
    custom{loc(e)}
  KLSCall :
    ($call func (args ...) type)
  KLSCallC :
    ($callc func (args ...) (varargs ...) type)
  KLSLiteral :
    custom{value(e)}
  KLSMix :
    ($mix exps ...)
  KLSCurry :
    ($curry n (targs ...))
  KLSCast :
    ($cast exp type)
  KLSAnd :
    ($and a b)
  KLSOr :
    ($or a b)
  KLSPrim :
    ($prim op args ...)
  KLSSizeof :
    ($sizeof type)
  KLSTagof :
    ($tagof n)