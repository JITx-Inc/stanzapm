;See License.txt for details about licensing.

defpackage stz/kl-ir :
  import core with :
    prefix(Seq, Tuple) => C
  import collections
  import stz/tl-ir with :
    prefix(Child) => T

;Use utilities for defining ASTs quickly.
#use-added-syntax(stz-ast-lang, stz-printer-lang)

public defast :
   ;Definitions
   deftype Comm
   defnodes Comm :
     Def :
       n: Int
       type: Type
       value: Exp
     DefVar :
       n: Int
       type: Type
       value: False|Exp
     Defn :
       n: Int
       value: Fn
     Defmulti :
       n: Int
       targs: List<Int>
       a1: List<Type>
       a2: Type
     Defmethod :
       multi: Int
       targs: List<Type>
       thisn: Int
       value: Fn
     DefType :
       n: Int
       parent: False|Type
       children: List<Child>
     Init :
       exp: Exp

   ;Expressions
   deftype Exp
   defnodes Exp :
     Set :
       n: Int
       value: Exp
     Cast :
       n: Int
       type: Type
     Let :
       def: Def|DefVar
       body: Exp
     LetRec :
       defs: List<Defn>
       body: Exp
     Seq :
       a: Exp
       b: Exp
     Dispatch :
       args: List<Exp>
       branches: List<Branch>
     Match :
       args: List<Exp>
       branches: List<Branch>
     New :
       class: Type
       methods: List<Defmethod>
     Do :
       func: Exp
       args: List<Exp>
       a1: List<Type>
       a2: Type
     Var :
       n: Int
     Literal :
       value: ?
     Tuple :
       exps: List<Exp>
     TupleGet :
       exp: Exp
       index: Int
     EnsureLength :
       exp: Exp
       length: Int
     Mix :
       exps: List<Curry>
     Curry :
       n: Int
       targs: List<Type>
       a1: List<Type>
       a2: Type
     AFn :
       value: Func       

;Children
defstruct Child :
  n: Int
  parent: Type

;Functions
public deftype Func
public defmulti info (f:Func) -> False|FileInfo

defstruct Fn <: Func :
  tail?: True|False
  targs: List<Int>
  a1: List<Type>
  a2: Type
  args: List<Int>
  body: Exp
defstruct Multifn <: Func :
  funcs: List<Fn>

;Branches
public defstruct Branch :
  args: List<Int>
  types: List<Type>
  body: Exp
