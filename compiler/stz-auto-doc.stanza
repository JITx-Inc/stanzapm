defpackage stz/auto-doc :
  import core
  import collections
  import stz/namemap
  import stz/compiler
  import stz/front-end
  import stz/visibility
  import stz/il-ir
  import stz/pkg
  import stz/dl-ir
  import stz/algorithms
  import stz/proj-manager

defn public-definitions (ipackage:IPackage) -> Seq<IExp> :
  generate<IExp> :
    defn loop (e:IExp) :
      defn* loop-public (e:IExp) :
        match(e) :
          (e:IBegin) :
            do(loop-public, exps(e))
          (e:IDefn|IDef|IDefChild|IDefType|IDefVar|IDefmulti|IDefmethod|ILSDefn|ILSDefType|ILSDefmethod|IDoc) :
            yield(e)
          (e) :
            false
      match(e) :
        (e:IBegin) :
          do(loop, exps(e))
        (e:IDoc) :
          yield(e)
        (e:IDefmethod|ILSDefmethod) :
          yield(e)
        (e:IVisibility) :
          loop-public(exp(e)) when visibility(e) is Public
        (e) :
          false
    for e in exps(ipackage) do :
      loop(e)

defn lookup (nm:NameMap, e:IExp) :
  match(e) :
    (e:VarN) : name(nm[n(e)])
    (e) : e

defn lookup-and-link (nm:NameMap, e:IExp) :
  match(e) :
    (e:VarN) : "[`%_`](#V%_)" % [name(nm[n(e)]), n(e)]
    (e) : e

defn print-anchor (o:OutputStream, e:IExp) :
  match(e:VarN) :
    print(o, "<a name=\"V%_\"></a>" % [n(e)])

defn pretty-targs (nm:NameMap, targs:List<IExp>) :
  "" when empty?(targs) else ("<%,>" % [pretties(nm, targs)])

defn pretty (nm:NameMap, e:IExp) :
  match(e) :
    (e:IOf) : "%_%_" % [pretty(nm, class(e)), pretty-targs(nm, args(e))]
    (e:IAnd) : "%_&%_" % [pretty(nm, a(e)), pretty(nm, b(e))]
    (e:IOr) : "%_|%_" % [pretty(nm, a(e)), pretty(nm, b(e))]
    (e:IArrow) : "%_ -> %_" % [pretties(nm, a1(e)), pretty(nm, a2(e))]
    (e:IGradual) : "?"
    (e:IVoid) : "void"
    (e:INone) : "none"
    (e:ITuple) : "[%,]" % [pretties(nm, exps(e))]
    (e:IVar) : name(e)
    (e:ICap) : "?%_" % [pretty(nm, name(e))]
    (e:ILSOfT) : "%_%_" % [pretty(nm, class(e)), pretty-targs(nm, args(e))]
    (e:ILSRefT) : "ref<%_>" % [pretty(nm, type(e))]
    (e:VarN) : lookup(nm, e)
    (e:Raw) : pretty(nm, class(e))
    (e) : e

defn pretties (nm:NameMap, e:List<IExp>) :
  map(pretty{nm, _}, e)

defn pretty-arg-type (nm:NameMap, a:IExp, t:IExp) :
  "%_:%_" % [lookup(nm, a), pretty(nm, t)]

defn pretty-return-type (nm:NameMap, t:IExp) :
  "" when t is INone else (" -> %_" % [pretty(nm, t)])

defn pretty-parent (nm:NameMap, t:IExp) :
  "" when t is INone else (" <: %_" % [pretty(nm, t)])

defn pretty-type (nm:NameMap, t:IExp) :
  "" when t is INone else (" : %_" % [pretty(nm, t)])

defn pretty-args (nm:NameMap, targs:List<IExp>, args:List<IExp>, a1:List<IExp>, a2:IExp) :
  "%_ (%,)%_" % [pretty-targs(nm, targs), map(pretty-arg-type{nm, _, _}, args, a1), pretty-return-type(nm, a2)]

defn pretty-args (nm:NameMap, targs:List<IExp>, a1:List<IExp>, a2:IExp) :
  "%_ (%,)%_" % [pretty-targs(nm, targs), pretties(nm, a1), pretty-return-type(nm, a2)]

defn print-definition (o:OutputStream, nm:NameMap, e:IExp) :
  match(e) :
    (e:ILSDefType) :
      print-anchor(o, name(e))   
      println(o, "`lostanza deftype %_%_%_`" % [lookup(nm, name(e)) pretty-targs(nm, args(e)) pretty-parent(nm, parent(e))])
    (e:ILSDefn) :
      println(o, "`lostanza defn %_%_`" % [lookup(nm, name(e)) pretty-args(nm, targs(e), args(e), a1(e) a2(e))])
    (e:ILSDefmethod) :
      println(o, "`lostanza defmethod `%_`%_`" % [lookup-and-link(nm, multi(e)) pretty-args(nm, targs(e), args(e), a1(e) a2(e))])
    (e:IDefType) :
      print-anchor(o, class(e))   
      println(o, "`deftype %_%_%_`" % [lookup(nm, class(e)) pretty-targs(nm, args(e)) pretty-parent(nm, parent(e))])
    (e:IDef) :
      println(o, "`val %_%_`" % [lookup(nm, name(e)) pretty-type(nm, type(e))])
    (e:IDefVar) :
      println(o, "`var %_%_`" % [lookup(nm, name(e)) pretty-type(nm, type(e))])
    (e:IDefn) :
      println(o, "`defn %_%_`" % [lookup(nm, name(e)) pretty-args(nm, targs(e), args(e), a1(e) a2(e))])
    (e:IDefmulti) :
      print-anchor(o, name(e))   
      println(o, "`defmulti %_%_`" % [lookup(nm, name(e)) pretty-args(nm, targs(e), a1(e) a2(e))])
    (e:IDefmethod) :
      println(o, "`defmethod `%_`%_`" % [lookup-and-link(nm, multi(e)) pretty-args(nm, targs(e), args(e), a1(e) a2(e))])
    (e:IDoc) :
      println(o, "%_" % [value(string(e) as ILiteral)])
    (e) :
      false

defn print-defpackage (o:OutputStream, nm:NameMap, ipackage:IPackage) :
  println(o, "```") 
  println(o, "defpackage %_" % [name(ipackage)])
  for imp in imports(ipackage) do :
    println(o, "  import %_" % [package(imp)])
  println(o, "```") 

defn breakup<?T> (break?:T -> True|False, s:Seqable<?T>) -> Seqable<Tuple<T>> :
  generate<Tuple<T>> :
    val ss = to-seq(s)
    val v = Vector<T>()
    let loop () :
      if empty?(ss) :
        yield(to-tuple(v)) when length(v) > 0
      else :
        val e = next(ss)
        if break?(e) :
          yield(to-tuple(v)) when length(v) > 0
          clear(v)
        add(v, e)
        loop()

public defn gen-doc (o:OutputStream, nm:NameMap, all-ipackages:Seqable<IPackage>) :
  for ipackage in all-ipackages do :
    val definitions = to-tuple $ public-definitions(ipackage)
    ;; println(";;; FILENAME %_" % [filename])
    println(exps(ipackage))
    print-defpackage(o, nm, ipackage)
    for d in definitions do :
      print-definition(o, nm, d)
      println(o, "")
    ; val groups = breakup(fn (d) : d is IDefType|ILSDefType|IPackage, definitions)
    ; var code? = false
    ; for group in groups do :
    ;   for def in group do :
    ;     val to-code? = not def is IDoc
    ;     if to-code? == true and code? == false :
    ;       println(o, "```") 
    ;     else if to-code? == false and code? == true :
    ;       println(o, "```") 
    ;     code? = to-code?
    ;     print-definition(o, nm, def)
    ;   println(o, "```") when code?
    ;   code? = false
    println(o, "")

public defn auto-doc (settings:BuildSettings, output:String|False) :
  val dep-result = dependencies(settings, true)
  val file = match(output:String) : FileOutputStream(output)
             else : STANDARD-OUTPUT-STREAM as FileOutputStream
  gen-doc(file, namemap(dep-result), filter-by<IPackage>(packages(dep-result)))
  match(output:String) : close(file)
