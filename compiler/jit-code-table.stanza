#use-added-syntax(dot-operator)
defpackage stz/jit-code-table :
  import core
  import collections
  import stz/vm-ir
  import stz/code-table
  import stz/backend
  import stz/utils
  import stz/asmjit
  import stz/jit-encoder
  import stz/vm-structures
  import stz/branch-dag
  import stz/trie-table
  import stz/ptr-buffer

;============================================================
;================= Struct Definition ========================
;============================================================

public defstruct JITCodeTable <: CodeTable :
  runtime: JitRuntime
  stubs: JITStubs
  funcs: Vector<Func|False> with:
    init => Vector<Func|False>()
  dag-funcs: Vector<Func|False> with:
    init => Vector<Func|False>()
  dag-tables: PtrBuffer with:
    init => PtrBuffer(8, autofree? = false)
with:
  constructor => #JITCodeTable

;Represents all the support assembly stubs needed by the JIT.
public defstruct JITStubs :
  launcher:Func
  extend-stack:Func

;============================================================
;================== Constructor =============================
;============================================================

public defn JITCodeTable (resolver:EncodingResolver, backend:Backend) -> JITCodeTable :
  val runtime = jit-runtime-new()
  val stubs = make-jit-stubs(runtime, resolver, backend)  
  #JITCodeTable(runtime, stubs)

;============================================================
;================= Function Loading =========================
;============================================================

defmethod load-function (table:JITCodeTable,
                         fid:Int,
                         vmfunc:VMFunction,
                         externfn?:True|False,
                         resolver:EncodingResolver,
                         backend:Backend) -> LoadedFunction :
  ;Encode the function using the JIT encoder.
  val encoded-function = encode(vmfunc, externfn?, table.stubs, table.runtime, resolver, backend)

  ;If there is already a function at that location, then
  ;delete it.
  val oldf = table.funcs.get?(fid)
  match(oldf:Func) :
    table.runtime.release(oldf)
  
  ;Add the function into the table so that we can release them later.
  table.funcs.put(fid, encoded-function.func)

  ;Return the loaded function
  LoadedFunction(encoded-function.func.value, encoded-function.trace-entries)

;============================================================
;================== Branches/Dispatching ====================
;============================================================

;Encode and store the DAG  as Trie for performing the given DAG dispatch.
defmethod encode-branch-dag (t:JITCodeTable, dag:BranchDag, resolver:EncodingResolver, backend:Backend) -> False :
  ;t.dag-tables.add(dag)

  ;Release the old DAG function if being overwritten.
  val old-func = t.dag-funcs.get?(dag.id)
  match(old-func:Func) : t.runtime.release(old-func)

  ;Compile the new DAG function and store it in the table.
  val func = compile-dag(dag, t.runtime, resolver, backend)
  t.dag-funcs.put(dag.id, func)
  t.dag-tables.store-in-table(dag.id, func)

;Store the given Func pointer into the PtrBuffer.
lostanza defn store-in-table (table:ref<PtrBuffer>, id:ref<Int>, func:ref<Func>) -> ref<False> :
  set(table, id.value, func.value)
  return false

;Returns the address of the DAG table.
defmethod dag-table (t:JITCodeTable) -> Long :
  t.dag-tables.data-address

;============================================================
;================== Launch ==================================
;============================================================

lostanza defmethod launch (vmstate-address:ref<Long>, table:ref<JITCodeTable>, func-id:ref<Int>) -> ref<False> :
  val launch = launcher(stubs(table)).value
  val fptr = launch as ptr<( (ptr<VMState>, long, long) -> int )>
  val vmstate = vmstate-address.value as ptr<VMState>
  call-c [fptr](vmstate, call-prim crsp() as long, func-id.value)
  return false    

;============================================================
;===================== Free =================================
;============================================================

defmethod free (table:JITCodeTable) :
  val all-funcs = [table.stubs.launcher
                   table.stubs.extend-stack].cat(
                   filter-by<Func>(table.funcs))
  for f in all-funcs do :
    table.runtime.release(f)
  table.runtime.delete

;============================================================
;============= Dummy Instructions Pointer ===================
;============================================================

defmethod instructions (table:JITCodeTable) : 0L

;============================================================
;========================= Utility ==========================
;============================================================

defn put<?T> (xs:Vector<?T|False>, k:Int, v:T) -> False :
  if k >= xs.length :
    xs.lengthen(k + 1, false)
  xs[k] = v
  
defn get?<?T> (xs:Vector<?T>, k:Int) -> T|False :
  if k < xs.length : xs[k]
