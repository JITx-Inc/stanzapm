defpackage stz/tgt-utils :
  import core
  import collections
  import stz/kl-ir
  import stz/tgt-ir
  import stz/ids

;============================================================
;====================== Emitter =============================
;============================================================

public var EMITTER : TGIns -> False =
  fn (i) : fatal("No emitter set.")

public defn emit (i:TGIns) :
  EMITTER(i)

public defn emit-to-buffer (f:() -> ?) -> Vector<TGIns> :
  val buffer = Vector<TGIns>()
  let-var EMITTER = add{buffer, _} :
    f()
  buffer

;============================================================
;==================== Make Variable =========================
;============================================================

public defn make-var (t:TGType) :
  val n = fresh-id()
  emit(TGDef(n, t))
  TGVar(n)

;============================================================
;====================== Typeof ==============================
;============================================================
public defn compile-typeof (x:TGImm, t:KTag, true-lbl:Int, false-lbl:Int,
                            TypeVar: Int -> TGImm) :
  defn TGIf (t:KTag, true-lbl:Int, false-lbl:Int) :
    val true-branch = TGBranch(List(t), true-lbl)
    TGMatch(List(x), List(true-branch), false-lbl)

  defn typeof (t:KTag, true-lbl:Int, false-lbl:Int) :
    match(t) :
      (t:KTVar) :
        ;Load code
        val code = make-var(TGLongT())
        emit(TGLoad(code, TypeVar(n(t)), TYPE-CODE-OFFSET - REF-TAG-BITS))
        ;Call code
        val result = make-var(TGLongT())
        emit(TGCall(1, List(result), code, List(TypeVar(n(t)), x), false, false))
        ;Branch on result
        emit(TGBinCmp(false-lbl, TGEqOp(), result, TGLong(0L)))
        emit(TGGoto(true-lbl))
      (t:KOf) :
        emit(TGIf(t, true-lbl, false-lbl))
      (t:KAnd) :
        if has-var?(t) :
          val next-lbl = fresh-id()
          typeof(a(t), next-lbl, false-lbl)
          emit(TGLabel(next-lbl))
          typeof(b(t), true-lbl, false-lbl)
        else :
          emit(TGIf(t, true-lbl, false-lbl))
      (t:KOr) :
        if has-var?(t) :
          val next-lbl = fresh-id()
          typeof(a(t), true-lbl, next-lbl)
          emit(TGLabel(next-lbl))
          typeof(b(t), true-lbl, false-lbl)
        else :
          emit(TGIf(t, true-lbl, false-lbl))
      (t:KTop) :
        emit(TGGoto(true-lbl))
      (t:KBot) :
        emit(TGGoto(false-lbl))

  typeof(trivial-simplify(t), true-lbl, false-lbl)

defn has-var? (t:KTag) :
  match(t) :
    (t:KTVar) : true
    (t) : any?(has-var?, t)

defn any? (f: KTag -> True|False, type:KTag) :
  var accum = false
  for t in type do :
    (accum = true) when f(t)
  accum