Core Stanza Language
====================

Tags :
  Of :
    n: Int
  TVar :
    n: Int
  And :
    a: Tag
    b: Tag
  Or :
    a: Tag
    b: Tag
  Top
  Bot

Commands :
  Def :
    n: Int
    tag: Tag
    value: Exp
  DefVar :
    n: Int
    tag: Tag
    value: False|Exp
  Defn :
    n: Int
    value: Func
  Defmulti :
    n: Int
    tail?: True|False
    targs: List<Int>
    a1: List<Tag>
    a2: Tag
  Defmethod :
    multi: Int
    targs: List<Tag>
    thisn: False|Int
    value: Func
  DefTag :
    n: Int
    parent: False|Tag
    children: List<Child>
  Init :
    exp: Exp

Expressions :
  Set :
    n: Int
    tag: Tag
    value: Exp
  Cast :
    exp: Exp
    tag: Tag
  Let :
    def: Def|DefVar
    body: Exp
  LetRec :
    defs: List<Defn>
    body: Exp
  Seq :
    a: Exp
    b: Exp
  Match :
    args: List<Exp>
    branches: List<Branch>
  New :
    tag: Tag
    methods: List<Defmethod>
  Do :
    func: Exp
    args: List<Exp>
    a1: List<Tag>
    a2: Tag
  Var :
    n: Int
  Literal :
    value: ?
  Tuple :
    exps: List<Exp>
  TupleGet :
    exp: Exp
    index: Int
  EnsureLength :
    exp: Exp
    length: Int
  Mix :
    exps: List<Curry>
  Curry :
    n: Int
    targs: List<Tag>
  AFn :
    value: Func

Side Structures:
  Child :
    n: Int
    parent: Tag

  Branch :
    args: List<Int>
    tags: List<Tag>
    body: Exp

  Functions :
    Fn :
      tail?: True|False
      targs: List<Int>
      a1: List<Tag>
      a2: Tag
      args: List<Int>
      body: Exp

    Multifn :
      funcs: List<Fn>

Prototype Information
=====================

  PkgIds :
    declarations: List<Declare>
    imports: List<ImportPackage>

  Declare :
    n: Int
    id: Id
    info: FileInfo

  ImportPackage :
    package: Symbol
    imports: List<Import>

  Import :
    n: Int
    id: Id

  Visibility :
    Private
    Protected
    Public

  Id :
    ValId :
      name: Symbol
      type: Type
      visibility: Visibility
    VarId :
      name: Symbol
      type: Type
      visibility: Visibility
    FnId :
      name: Symbol
      tail?: True|False
      targs: List<Int>
      cargs: List<Int>
      a1: List<Type>
      a2: Type
      visibility: Visibility
    MultiId :
      name: Symbol
      tail?: True|False
      targs: List<Int>
      cargs: List<Int>
      a1: List<Type>
      a2: Type
      visibility: Visibility
    TypeId :
      name: Symbol
      args: List<Int>
      parent: False|Type
      children: List<ChildDec>
      visibility: Visibility
    TArgId :
      name: Symbol

  ChildDec :
    n: Int
    args: List<Int>
    parent: Type

Note that TArgId cannot be imported individually.

Adding LoStanza Prototype Information
=====================================

  Id :
    ...
    LSValId :
      name: Symbol
      type: LSType
      visibility: Visibility
    LSVarId :
      name: Symbol
      type: LSType
      visibility: Visibility
    LSFnId :
      name: Symbol
      tail?: True|False
      targs: List<Int>
      cargs: List<Int>
      a1: List<LSType>
      a2: LSType
      visibility: Visibility
    LSTypeId :
      name: Symbol
      args: List<Int>
      parent: False|Type
      fields: List<FieldDec>
      visibility: Visibility
    FieldId :
      name: Symbol

  FieldDec :
    n: Int
    type: LSType

Note that FieldId cannot be imported individually.

HiStanza Primitives
===================

New expression definition for primitives

  Expressions :
    ...
    Prim :
      op: Primitive
      args: List<Exp>

LoStanza Support
================

  LoStanza Top Level Commands :
    LSDef :
      n: Int
      type: LSType
      value: LSExp
    LSDefVar :
      n: Int
      type: LSType
      value: False|LSExp
    LSDefn :
      n: Int
      value: LSFunc
    LSDefmethod :
      multi: Int
      targs: List<Tag>
      value: LSFunc    
    LSDefStruct :
      n: Int
      parent: False|Tag
      fields: List<StructField>
      rfield: False|StructField      
    LSInit :
      comm: LSComm

  LoStanza Types :
    TByte
    TInt
    TLong
    TFloat
    TDouble
    TUnknown
    TPtr :
      type: LSType
    TRef :
      tag: Tag
    TFn :
      a: List<LSType>
      r: False|LSType
      b: LSType
    TStruct :
      n: Int

  LoStanza Commands :
    LSExec :
      exp: LSExp
    LSSet :
      loc: Loc
      value: LSExp
    LSLabels :
      blocks: List<LSLabeledBlock>
    LSGoto :
      n: Int
      args: List<LSExp>
    LSReturn :
      exp: LSExp
    LSDefLocal :
      n: Int
      type: LSType
      value: LSExp
    LSDefLocalVar :
      n: Int
      type: LSType
      value: False|LSExp
    LSSeq :
      a: LSComm
      b: LSComm
    LSIf :
      pred: LSExp
      conseq: LSComm
      alt: LSComm
    LSMatch :
      args: List<LSExp>
      branches: List<LSBranch>
    LSSkip

  LoStanza Locations :
    Value :
      exp: LSExp
    Deref :
      exp: LSExp
      type: LSType
    Deptr :
      exp: LSExp
      type: LSType
    Slot :
      exp: LSExp
      type: LSType
      index: LSExp
    Field :
      exp: Loc
      n: Int

  LoStanza Expressions :
    LSVar :
      n: Int
    LSRef :
      n: Int
      args: List<LSExp>
    LSArray :
      n: Int
      args: List<LSExp>
    LSStruct :
      n: Int
      args: List<LSExp>
    LSPtr :
      loc: Loc      
    LSRead :
      loc: Loc
    LSCall :
      func: LSExp
      args: List<LSExp>
      a1: List<LSType>
      a2: LSType
    LSCallC :
      func: LSExp
      args: List<LSExp>
      varargs: List<LSExp>
      type: LSType
    LSLiteral :
      value: ?
    LSMix :
      exps: List<LSCurry>
    LSCurry :
      n: Int
      targs: List<Tag>
    LSCast :
      exp: LSExp
      type: LSType
    LSAnd :
      a: LSExp
      b: LSExp
    LSOr :
      a: LSExp
      b: LSExp

  LSLabeledBlock :
    n: Int
    args: List<Int>
    types: List<LSType>
    body: LSComm

  LSBranch :
    args: List<Int>
    tags: List<Tag>
    body: LSComm

  LSFn :
    tail?: True|False
    targs: List<Int>
    a1: List<LSType>
    a2: LSType
    args: List<Int>
    body: LSComm

  StructField :
    n: Int
    type: LSType

Notes:
  The Value location wraps an expression (not a var) because of the
  possibility of expressions such as "f(x).y".
  The Deref/Deptr/Slot expressions require the resultant type because
  that determines the number of bytes to load from memory.
  The Field expression does not indicate the type of the field as
  there are a number of field-related statistics needed, such as
  offset, index, size, etc.

Support for Extern Functions/Values
===================================

  Top Level Commands :
    ...
    KLSExternFn :
      n: Int
      lbl: Symbol
      value: KLSFunc
    KLSExtern :
      n: Int
      lbl: Symbol
      type: KLSType

  Id :
    ...
    LSExternFnId :
      name: Symbol
      lbl: Symbol
      a1: List<LSType>
      a2: LSType
      visibility: Visibility
    LSExternId :
      name: Symbol
      lbl: Symbol
      type: LSType
      visibility: Visibility

Support for LoStanza Primitives
===============================

  LoStanza Expressions :
    ...
    KLSPrim :
      op: LSPrimitive
      args: List<KLSExp>

Support for Remaining LoStanza Expressions
==========================================

  LoStanza Expressions :
    ...
    KLSSizeof :
      type: KLSType
    KLSTagof :
      n: Int

Support for Stack Extension
===========================

  LoStanza Primitives :
    LS-YIELD-OP
    LS-NEW-STACK-OP

Note: LS-NEW-STACK-OP must be called as first command in a LoStanza function. 
    
File Information
================

File information is added to everything that could possibly error with
a stack trace.

  Defmulti : Dispatch error
  Set : Cast error
  Cast : Cast error
  Dispatch : Dispatch error
  Match : No branch error
  New : Heap error
  Do : Guard error
  Var : Uninitialized variable error
  Tuple : Heap error
  EnsureLength : Length error
  Mix : Dispatch error
  Curry : Guard error
  Branch : Guard error
  Fn : Function entry error
  Multifn : Arity error
