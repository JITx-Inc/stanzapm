Method Targ Mapping
===================

Closure Creation
================

Introduces:

  LoStanza Expressions :
    KLSAFn :
      value: KFunc

Mix Conversion
==============

Introduces:

  Stanza Expressions :
    KDispatch :
      args: List<KExp>
      branches: List<KBranch>
      
  LoStanza Expressions :
    KLSLet :
      n: Int
      type: KLSType
      value: KLSExp
      body: KLSExp
    KLSDispatch :
      args: List<KLSExp>
      branches: List<KLSBranchExp>

  KLSBranchExp :
    args: List<Int>
    tags: List<KTag>
    exp: KLSExp

Boundary Guards
===============

Introduces:

  Stanza Expressions :
    KEnsureSet :
      exp: KExp
    KDo! :
      func: KExp
      args: List<KExp>

Type Reification
================

Introduces:

  Top Level Commands :
    KDefConst :
      n: Int
      value
    KDefTypeObject :
      n: Int
      args: List<Int>
      tag: KTag    
    KDefn! :
      n: Int
      value: KFunc
    KDefmethod! :
      multi: Int
      thisn: False|Int
      value: KFunc
    KLSDefn! :
      n: Int
      value: KLSFn!
    KLSDefmethod! :
      multi: Int
      value: KLSFn!
    KLSExternFn! :
      n: Int
      lbl: Symbol
      value: KLSFn!

  Stanza Expressions :
    KTypeObject :
      n: Int
      args: List<KExp>
    KReifyCast :
      exp: KExp
      tag: KTag
    KNew! :
      tag: KTag
      methods: List<KComm>
      
  LoStanza Expressions :
    KLSTypeObject :
      n: Int
      args: List<KLSExp>
    KLSCall! :
      arity: Int
      func: KLSExp
      args: List<KLSExp>
      type: KLSType

  KFn! :
    arity: Int
    tail?: True|False
    a1: List<KTag>
    a2: KTag
    args: List<Int>
    body: KExp
  KMultifn! :
    funcs: List<KFunc>

  KLSFn! :
    tail?: True|False
    arity: List<Int>
    a1: List<KLSType>
    a2: KLSType
    args: List<Int>
    body: KLSComm
