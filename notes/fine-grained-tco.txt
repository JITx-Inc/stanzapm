# Fine Grained TCO #

## The Standard `Let` Macro ##

Consider the following `let` macro:

  let :
    val msg = "World"
    println("Hello world")
    println(msg)

Which expands into this:

  defn tempfunction () :
    val msg = "World"
    println("Hello world")
    println(msg)
  tempfunction()

Note that the above implementation creates and calls a new function, which results in the creation of a new stackframe.

## Non-Solutions ##

Declaring tempfunction as a TCO function does not solve the problem. Calling `tempfunction` still results in the creation of a new stackframe. Furthermore, the call stack information in `tempfunction` is thrown away. For the example above this means that the line containing `println(msg)` would not appear in the stacktrace. This is not what is desired.

## Optimization ##

There is one situation in which the stackframe can be avoided, and that is when the call `tempfunction()` is in tailcall position. The system will throw away the context in which `tempfunction()` was called but this is not useful information anyway. 


