Bugs
  - The following is not inferable.

     f: (x:A, y:B) -> C
     map: <?T,?S> (f:T -> ?S, x:?T) -> S
     map: <?T,?S> (f:T -> ?S, x:List<?T>) -> List<S>
     x: A
     y: List<B>
     map(f{x, _}, y)

  - defmulti followed by superfluous colon gives strange error
    message.
  - switch with single else clause gives bad parser error.
  - Inference bug:
  
      val flag = get(BLOCK-DEFS, new Int{b.value * v.value})
      println(modulo(BLOCK-DEF-MSG, new Tuple{3, b, v, flag}))
        
    works, but:

      println(modulo(BLOCK-DEF-MSG,
              new Tuple{3, b, v,
                get(BLOCK-DEFS, new Int{b.value * v.value})}))
    gives:
    
      compiler/stz-bb.stanza:937.55: Could not capture type argument T
      for function get of type
        <?T> . (ref<IndexedCollection<?T>>, ref<Int>) -> ref<T>.
      Called with arguments of type (ref<BitArray>, ref<Int>).
      
  - Compiling blank file fails.
  - The following gives a bad error message.
  
      println(~0)

  - core/unique is not reentrant.
  - The following fails to infer.
  
      val t:LSType = ...
      map(ls-rename{pkg, _:LSType},
        map(rename{pkg, _:Type}, t))

Checks
  - Check for overflow for integer operations.
  - Package qualified symbols cannot be used as binders.
  - Public/Protected global variables must have a type.
  - Arguments should not be declared with Void types.
  - LoStanza assignments to HiStanza variables should be checked.

Ecosystem
  - Next Chapter links in Stanza By Example.
  - Separate scroll bar in Stanza.
  - Document development process.
  - Document LoStanza
  - Document exceptions thrown by core functions
  - Document new syntax system
  - Document the multi line comments

Small Feature Requests
  - Hashtable needs update function.
  - Sets
  - IntArray, FloatArray, ByteArray, etc.
  - sum/product for floating point arrays.
  - IntTable
  - Defstruct: Don't gen symbols for parameterized types.
  - Option to retrieve the stanza installation directory.
  - Option to stanza extend with macros.
  - Use package name in addition to .pkg and .stanza files as input to
    stanza compile.
  - equal? for Arrays and other fundamental mutable types.
  - Underscore in binders means to ignore them. (Avoid redundant
    definitions.)
  - Floating point min/max/inf/nan.
  - Conversion to hex/octal/binary strings.
  - Tuple should be Indexable.
  - Make sure STANDARD-OUTPUT-STREAM and STANDARD-INPUT-STREAM are not
    actually FileOutputStreams.
  - let-var with multiple bindings.
  - stanza help option.
  - Range for Long.
  - Directory Handling.
  - Floating point format specifiers.
  - Provide seed function for rand.
  - Function for creating a directory.
  - contains? should work on Range objects.
  - as? should fail() if it does not succeed.
  
Big Feature Requests
  - Type aliases.
  - Bools instead of True|False.
  - Proper support for finalizers. on-finalize for Hi and Lo deftype
    constructs.
  - Weak Arrays and Tables.
  - Object name table and better dynamic error messages.
  - ($if) and ($typeof) expressions. Use it to give some path
    sensitivity.
  - ($ls-not) form. And Compile it appropriately.
  - stanza build option.
  - #include statements that are relative to the file that contains
    it.
  - #for macro.
  - Address of stack allocated locals.
  - Deconstructors.
  - Do not allow calling of extern functions without call-c.
  - Conditional subtyping:
      Tuple<T> <: Equalable if T <: Equalable
  - Fancy conditional subtyping:
      Maybe<T> <: Comparable<Maybe<S>> if T <: Comparable<?S>
  - Fixed point variable type inference.
  - Tuple<T> should be a subtype of [T, T]
  - Say which argument is the wrong type when calling function with
    wrong arguments.
  - ($let-var) form that works on uninitialized variables and is
    efficient and is tail-call optimized.
  - Implement more of the C calling convention.
  - GDB support.
  - Locally declared defmulti and deftype.
  - Bounded type parameters.
  - Keyword arguments.
  - Captured arguments in contravariant return types for currying.

Optimizations
  - Reimplement parser using type aliases.
  - VList
  - LoStanza struct const fields.
  - GC Optimization: Remove need for stack clearing instructions.
    Build a path dependent stack map.
  - Eliminate quadratic ambiguity-list algorithm.
  - Optimize equal? implementation to use machine instruction.
  - Tree shaker.
  - Better inlining transform.
  - Method resolution.

Cleanups
  - Macro support functions should be protected.

Environment
  - QT Main Application + Menubar
  - Example for lexing and writing data file
  - Interpreter inside QT window

Verify
  - How much are we suffering from unbounded growth of type union
    objects? Do we need to limit this using a counter?
  - Double check that [] collapses to Tuple<Void>
  - printf variable arguments should have byte, float upcasted
    appropriately automatically.
