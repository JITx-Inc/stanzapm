- Prevent package qualified symbols from being binders.
- Hashtable needs update function
- Bools instead of True|False
- Figure out why the following is not inferrable:
     f: (x:A, y:B) -> C
     map: <?T,?S> (f:T -> ?S, x:?T) -> S
     map: <?T,?S> (f:T -> ?S, x:List<?T>) -> List<S>
     x: A
     y: List<B>
     map(f{x, _}, y)
- Call primitive special forms should give a proper error if not a
  recognized primitive.
- Weak References : Flag indicates whether the link to the object is
  the only link to the object. (Then toss away the weak reference when
  done).
- Measure statistic: How much are we suffering from unbounded growth
  of type objects? (We can limit this using a counter if necessary).
  e.g. defn* f<T> (...) :
          f<T|Int>(...)
- Need an implementation of Sets.
- Issue proper error messages if defmulti is followed by superfluous
  colon.
- match(s) :
      (s:DefWire|DefMemory) : ...
      (s:DefMemory) : ...
   stanza errors very ungracefully with "Duplicate label gen719903."
- sum/product for Floating point arrays
- Check for overflow
- Switch with single else clause gives strange parser error.
- Public global variables must have a type.
- IntKeyTables
- VLists
- Type Printing
- Const Lostanza struct fields? Cannot assign to fields in primitive
  types.
- For defstruct: Don't need to gen symbols for parameterized types.
- Named let loop.
- Add $ls-not form and consider it when compiling if expressions
- Retrieve the stanza dir
- #include statements should be relative to file that contains it.
- block-copy
- Good runtime error messages.
- Eliminate quadratic ambiguity-list algorithm.
- Macro support functions should be protected.
- Address of Stack allocated locals
- is-equal? for Arrays and other fundamental mutable types. Then
  implement is-equal? for tables/vectors based on them.
- Can't declare argument with Void types.
- Underscore in binders means to ignore. (Avoid redundant definitions).
- LoStanza Assignments to HiStanza variables need to be checked.
- run-garbage-collector should not check for stack extension.
- Add check for calling extern functions without call-c, or vice versa.
- float/double min max inf -inf nan ...
- conversion to hex/octal/binary strings and vice versa
- float arrays / double arrays / int arrays / long arrays
- Fancy subtyping: Tuple<T> <: Equalable if T <: Equalable
- Really Really Fancy subtyping: Maybe<T> <: Comparable<Maybe<S>> if T <: Comparable<?S>
- Fixed Point variable type inference.
- Maybe Tuple<T> a subtype of [T, T]
- Tuple should be Indexable
- reduce(min, 0.0f, xs:seq<Float>)
- Inference bug:
      val flag = get(BLOCK-DEFS, new Int{b.value * v.value})
      println(modulo(BLOCK-DEF-MSG, new Tuple{3, b, v, flag}))
  WORKS, BUT:
      println(modulo(BLOCK-DEF-MSG, new Tuple{3, b, v, get(BLOCK-DEFS, new Int{b.value * v.value})}))
  GIVES:
      compiler/stz-bb.stanza:937.55: Could not capture type argument T for function
      get of type <?T> . (ref<IndexedCollection<?T>>, ref<Int>) -> ref<T>.
      Called with arguments of type (ref<BitArray>, ref<Int>).
- Query stanza installation directory from commandline.
- stanza extend
- Make sure STANDARD-OUTPUT-STREAM and STANDARD-INPUT-STREAM are not
  actually FileOutputStreams.
- Ambiguous branch: Needs MUCH BETTER ERROR MESSAGES!
- Get rid of header words for arrays
- Say which argument is the wrong type when calling function with
  wrong arguments.
- pos(x) = 3  Macro
- x += 3      Macro
- Add: for x:Int in c do : body
- let-var with multiple bindings
- multis should jump to methods for proper tail recursion
- Double check that [] collapses to Tuple<Void>
- dynamic-wind needs to work on uninitialized variables.
- printf variable arguments should have byte, float upcasted appropriately automatically. (CHECK)
- implement more of the C calling convention.
- smaller memory footprint for calling cc.
- PDF version of Stanza By Example.
- Next Chapter links in Stanza By Example.
- Separate scroll bar in Stanza.
- Document development process.
- -help flag.
- on-finalize feature for Hi and Lo deftype constructs. Allows
  tree-shaker to detect which fields can be removed and which
  can't. Also a fair bit simpler to use.
- Main Application + Menubar
- Example for lexing and writing data file
- Interpreter example
- Read line
- Interpreter inside QT window
- Document LoStanza
- Document exceptions thrown by core functions
- Document new syntax system
- Long Range?
- Directory Handling