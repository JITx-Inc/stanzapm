Bugs
  - The following is not inferable.

     f: (x:A, y:B) -> C
     map: <?T,?S> (f:T -> ?S, x:?T) -> S
     map: <?T,?S> (f:T -> ?S, x:List<?T>) -> List<S>
     x: A
     y: List<B>
     map(f{x, _}, y)

  - defmulti followed by superfluous colon gives strange error
    message.
  - switch with single else clause gives bad parser error.
  - Inference bug:
  
      val flag = get(BLOCK-DEFS, new Int{b.value * v.value})
      println(modulo(BLOCK-DEF-MSG, new Tuple{3, b, v, flag}))
        
    works, but:

      println(modulo(BLOCK-DEF-MSG,
              new Tuple{3, b, v,
                get(BLOCK-DEFS, new Int{b.value * v.value})}))
    gives:
    
      compiler/stz-bb.stanza:937.55: Could not capture type argument T
      for function get of type
        <?T> . (ref<IndexedCollection<?T>>, ref<Int>) -> ref<T>.
      Called with arguments of type (ref<BitArray>, ref<Int>).
      
  - The following gives a bad error message.
  
      println(~0)

  - The following fails to infer.
  
      val t:LSType = ...
      map(ls-rename{pkg, _:LSType},
        map(rename{pkg, _:Type}, t))

  - The following fails to mix:
  
    defn f (x, y) :
      minimum(x, y)

    Throws error:

    minimum: <?T> . (Seqable<?T>, (T, T) -> True|False) -> T at core/core.stanza:4808.12
    minimum: <?T> . (Comparable&T, Seqable<?T&Comparable>) -> T at core/core.stanza:4831.12
    minimum: <?T> . (T -> Comparable, Seqable<?T>) -> T at core/core.stanza:4834.12

  - Given the following overloaded functions:

    defn f (x:Int) : x
    defn f (x:String) : x
    val y:Void|Int = 3
    f(y)

    f should not resolve to include the String version.

  - In KForm to Tgt2: what happens when we assign bottom to something?
    i.e. val x = f() where f returns Void.

  - The following does not typecheck:
    compiler/stz-utils.stanza:42.19: No appropriate function sorted-merge for
    arguments of type (List<T&Comparable<T>>, List<T>). Possibilities are:
       sorted-merge: <?T> . (?T&Comparable<T>, List<T>) -> List<T> 
       sorted-merge: <?T> . (List<?T&Comparable<T>>, List<T>) -> List<T>   

  - Simple inline should not inline anonymous functions. This may
    break array initialization code that relies upon no GC code
    happening. 

  - Simple inline should account val declarations as well.

  - Simple inline should be rewritten to not require unreachable-error.

  - exit(n) should run finalizers and wind-outs.

  - Rewrite map(List) and reverse() to not use recursion.

  - The type of the flag variable in the following is not correctly
    inferred. The assignment statements from LoStanza are not properly
    considered.
    
    var flag = false
    extern defn tick () -> int :
      match(flag) :
        (f:ref<True>) :
          println(String("Tick"))
          flag = false
        (f:ref<False>) :
          println(String("Tock"))
          flag = true
      return 0

  - The (=|at) pattern in the following rule definition doesn't work.

    fail-if inst-property! = (?k:#symbol! (=|at) _) :
      RTME(closest-info(), "Unrecognized instance property: '%~'." % [k])

  - See if there's anything that can be done about this bug
    not being caught by the Stanza compiler.
    
    val wt = to-float(cdp-id - id1)/to-float(id2 - id1)

  - The following gives a mutual left recursion error:

    defrule exp4 = (?e:#exp4 . ?f:#id) :
      body
    fail-if exp4 = (?e:#exp4 . ?rest) :
      Exception("Failure")

  - Importing a production that does not exist issues a "Variable Not
    Initialized" error instead of throwing a properly formed message.
    For example, if the user accidentally types the following:

      import (exp4) from core
      import (evar!, pcblayer, exp!) from ir-gen-utils
      
    instead of:
  
      import (exp4, exp!) from core
      import (evar!, pcblayer) from ir-gen-utils
      
  - The following incorrectly reports the following an ambiguity error:

      tests/test-amb.stanza:6.2: Ambiguous call to overloaded function f with arguments of type (?). Possibilities are:
         f: <?T> . ?T&String -> String&T at tests/test-amb.stanza:2.5
         f: Int -> Int at tests/test-amb.stanza:1.5

    The code is:

      defn f (a:Int) : a
      defn f<?T> (b:String&?T) : b

      let :
        var x:? = 3
        f(x)

  - The Stanza compiler chooses a temporary name for a file but does
    not immediately create the file. This causes other instances of
    Stanza to choose the same file, and cause a conflict.

Checks
  - Check for overflow for integer operations.
  - Package qualified symbols cannot be used as binders.
  - Public/Protected global variables must have a type.
  - Arguments should not be declared with Void types.
  - LoStanza assignments to HiStanza variables should be checked.
  - NoMatch parsing error should have causes listed for every case.
  - What is the point of RestT?

Ecosystem
  - Next Chapter links in Stanza By Example.
  - Separate scroll bar in Stanza.
  - Document development process.
  - Document LoStanza
  - Document exceptions thrown by core functions
  - Document new syntax system
  - Document the multi line comments
  - Document Float limits and nan
  - Document #for

Small Feature Requests
  - Defstruct: Don't gen symbols for parameterized types.
  - Option to retrieve the stanza installation directory.
  - Option to stanza extend with macros.
  - equal? for Arrays and other fundamental mutable types.
  - Underscore in binders means to ignore them. (Avoid redundant
    definitions.)
  - Conversion to hex/octal/binary strings.
  - Tuple/String should be Indexable.
  - Make sure STANDARD-OUTPUT-STREAM and STANDARD-INPUT-STREAM are not
    actually FileOutputStreams.
  - Ability to read STANDARD-INPUT-STREAM until EOF.
  - let-var with multiple bindings.
  - stanza help option.
  - Range for Long.
  - Directory Handling.
  - Floating point format specifiers.
  - Provide seed function for rand.
  - Function for creating a directory.
  - proper categorization of exceptions.
  - No-method and Amb-method errors should indicate the name of the multi.
  - Expressions in function-call position should be automatically dereferenced similar to field expressions.
  - generate<T> should allow user-provided name for yield.
  - Have the number of stacks dynamically extend to fill the heap.
  - Have a better error report for when the .stanza configuration file cannot be found.
    Report the locations that we tried looking for it.
  - Check for STANZA_CONFIG or HOME environment variable before creating .stanza file during stanza install.
  - stanza build doesn't rebuild files whose source changes due to different flags during macro expansion.
    Most evident during #if-defined.
  - Implement for block-copy methods for primitive arrays.
  
Big Feature Requests
  - Type aliases.
  - Bools instead of True|False.
  - Proper support for finalizers. on-finalize for Hi and Lo deftype
    constructs.
  - Weak Arrays and Tables.
  - ($if) and ($typeof) expressions. Use it to give some path
    sensitivity.
  - ($ls-not) form. And Compile it appropriately.
  - #include statements that are relative to the file that contains
    it.
  - Address of stack allocated locals.
  - Deconstructors.
  - Do not allow calling of extern functions without call-c.
  - Conditional subtyping:
      Tuple<T> <: Equalable if T <: Equalable
  - Fancy conditional subtyping:
      Maybe<T> <: Comparable<Maybe<S>> if T <: Comparable<?S>
  - Fixed point variable type inference.
  - Tuple<T> should be a subtype of [T, T]
  - Say which argument is the wrong type when calling function with
    wrong arguments.
  - ($let-var) form that works on uninitialized variables and is
    efficient and is tail-call optimized.
  - Implement more of the C calling convention.
  - GDB support.
  - Locally declared defmulti and deftype.
  - Bounded type parameters.
  - Keyword arguments.
  - Captured arguments in contravariant return types for currying.
  - Syntax for creating tuple: new [e1, e2, ...]
  - more complete build feature that computes and walks up the
    dependency graph.
  - hierarchical project build support.

Optimizations
  - Reimplement parser using type aliases.
  - VList
  - LoStanza struct const fields.
  - GC Optimization: Remove need for stack clearing instructions.
    Build a path dependent stack map.
  - Eliminate quadratic ambiguity-list algorithm.
  - Optimize equal? implementation to use machine instruction.
  - Tree shaker.
  - Better inlining transform.
  - Method resolution.
  - Efficient compilation of if/typeof expressions.

Cleanups
  - Macro support functions should be protected.
  - Function preludes are currently repeated in many places. Either
    create an abstract instruction or move to utility function.
  - Closure creation creates small forwarding functions when top-level
    functions are used in first-class positions. This is exactly what
    the defmulti code generator does. Merge these two functions.
  - Move stz/padder to better location. Probably stz/utils.

Environment
  - QT Main Application + Menubar
  - Example for lexing and writing data file
  - Interpreter inside QT window
  - Geolang parallel loops and ranges

Verify
  - How much are we suffering from unbounded growth of type union
    objects? Do we need to limit this using a counter?
  - Double check that [] collapses to Tuple<Void>
  - printf variable arguments should have byte, float upcasted
    appropriately automatically.
