[===== Build System =====]

Use Case:
  1. I am working on a large collection of packages, each in their own
  files. They are constantly in a state of development.

  2. I now write a small program (perhaps a test program) that imports
  a package.

  3. I want to compile the small program with the most up-to-date
  version of its dependencies as possible.

[===== Dynamic Scope =====]

Use Case:
  1. I have two "fibers" that both update a dynamic variable POSITION,
  incrementing and decrementing it to reflect the position of a ball.

  2. I run each fiber within a let-var to reflect that they each have
  their own version of POSITION.

  3. This should run correctly as control flow flip flops between the
  two.

[===== Dynamically Scoped Buffers =====]

Use Case:
  1. I'm writing a utility function that operates on a sequence.

      defn f (xs:Seq) :
        body

  2. The utility function requires using a scratch Vector, but to be a
  little more efficient, I declare the Vector as a global variable and
  clear it each time f is called.

      val VECTOR = Vector<?>()
      defn f (xs:Seq) :
        clear(VECTOR)
        body

  3. This almost always works. The function f works as long as we
  enter and exit it once. The only case where this is not true is if,
  during iteration through xs, the current coroutine, c0, is suspended and
  we start executing another coroutine, c1. Now what if c1 calls f
  again? It will corrupt the state of VECTOR which is still being used
  by the f in c0. Figure out how to efficiently support this corner case.

[===== Inlining of Productions containing != Rules =====]

Use Case:
  1. I have this rule that matches all forms except the x symbol:
  
      defproduction sube
      defrule sube != (x)
      defrule sube = (?x) : x

  2. In the main rule, I then try to read one of these.

      defrule e = (?e:#sube) : e

  3. What is the difference between that and the inline statement?

      defrule e = inline #sube

[===== Conditional Subtyping =====]

Two Desires:
  1. Test whether x is Hashable before calling hash on it. Thus if x
  is Hashable returns true, then calling hash should not crash the
  program.
  
  2. Assume that Apple is not Hashable. Calling hash on a List<Apple>
  should be caught by the compiler, because it will obviously crash
  the program.

Plan:
  There are two key aspects that this feature asks us to understand.
    1. Dynamically check whether an operation will succeed.
    2. Statically check whether an operation will fail.
    
  The first aspect is used by the match expression. Things should
  enter a match expression only if it can/should safely be treated as
  the matched type. Thus, if we use match to test whether x is
  Hashable, then it should enter the branch only if x can safely be
  treated as a Hashable. This is a dynamic test.

  The second aspect is used for checking the legality of calls. If a
  function expects a Hashable, then it should fail only if we can
  statically determine that this call will fail.

  The two aspects are not the same. The key example is a value of
  static type List<?>, but with dynamic type List<Top>. The match
  expression should not allow it to be Hashable, as there is no way to
  guarantee that a List<Top> can be safely treated as Hashable object.
  However, you are still allowed to pass it as an argument to a
  function that expects a Hashable, as we cannot statically verify
  that the call will fail.

  For the dynamic test, we have two checks to make. A value *is* a
  given type if:
    1. It's dynamic type is of the given type OR
    2. It's static type is of the given type.
  The above handles cases where a value is originally created with
  type List<Top>, but it has been casted to List<Int> before the match
  expression. In this case, it *should* be Hashable according to
  programmer intent, and it is a bug otherwise.

  There is a perceived complication with methods. If a method requires
  a Hashable object, should it enter it? This turns out not to be a
  problem as we are disallowing methods to impose additional
  information on the types of its arguments. Therefore, we can derive
  the static properties solely based upon the declared type of the
  multi.

[===== Inheritance of State =====]

Use Case:
  1. As a top-level method, I can write

      defmethod diameter (c:Circle) :
        2.0 * radius(c)

     but I cannot write a memoized version of it.

     I wish to write something like the following :

      defmethods Circle :
        var diameter = false
        defmethod diameter (this) :
          (diameter = 2.0 * radius(this)) when diameter is False
          diameter as Double

     With this ability, we will be able to automatically lock
     sequences so that the original sequence is not touched anymore
     after they go through some sequence operator.

      val xs = filter(pred?, ys)
      next(ys) <-- this will now flag an error.

  NOTE: Be careful about equality. Does it screw that concept up?

[===== Syntax Package Dependency =====]

Use Case:
  1. I have a syntax package called geometry.

  2. The geometry syntax package uses some productions from the shape
  syntax package.

  3. Most importantly, it assumes that the 'exp' production from core
  has been extended with the additional rules found in the shape
  syntax package.

  4. How do I ensure that whenever the geometry syntax is used or
  added, that the shape syntax is also included? In other words, it is
  meaningless to attempt to use the geometry syntax without
  including the shape library rules for 'exp'.

[===== Rule Removing Syntax =====]

Use Case:
  1. I want to design a DSL with the following syntax:

      layer #name on #exp = #exp

     However I cannot naively use the #exp production because the
     assignment operator is defined to be part of the #exp production.
     And so #exp = #exp will parse as a single assignment #exp. Make
     it possible to provide this syntax.

[===== Nested Syntax Packages =====]

Use Case:
  1. I have a set of syntax rules defined in the syntax package
    'shape'.

  2. As a core expression, I want to provide the following syntax:
  
      shape #name = #shape

     where the expression for #shape is allowed to use the additional
     syntax rules defined in the 'shape' package. Make this possible.

[===== Matching on Type Parameters =====]

Use Case:
  1. Filtering a collection by type: filter<String>(xs)

Difficulties: If we allow for matching based on type parameters then
the following needs to be solved:

  1. How are methods with T, and S in their argument types ordered
  with respect to the other methods?
  
  2. How are the types represented? What happens when we create T|S
  types?
  
  3. How do we prevent infinitely big types?

  4. What happens if T is Array<List<String>>? What happens if the
  user calls:

    val xs = filter<Array<List<String>>(xs)
    
  What should xs contain?

[===== Template Functions =====]

Use Case:

  Suppose that my template is:

    val template = `(and he goes modifier(noun and noun and noun).)

  And I want to replace `noun with `on. So the words within the
  modifier(...) section now reads 'on and on and on'.

  Now suppose that I want to pass that section to a function and use
  the result of that function as the final filled form. Suppose that I
  want to convert it to a string, then the full fill-template call
  would look like this:

    fill-template(template, [
      `noun => `on
      `modifier => transform(string-join{_, " "})])

[===== Primitive functions for casting to ref<?> =====]    

Use Case:

  Currently the system allows for the following casts:

    val x: ptr<byte>
    x as ref<A>

    val x: long
    x as ref<A>

    val x: ref<A>
    x as long

  But these casts are really only supposed to be used by Stanza
  implementers. Should they be instead exposed as primitive functions
  only? Then users won't accidentally cast a ref to a long or pointer.

[===== More restrictive Void types =====]

Use Case:

  Void really only means something sensible when used as the return
  type for a function. So disallow declaring:
    1. function/method arguments
    2. struct fields
    3. values and variables
  as the Void type.

  And disallow dereferencing pointers/slots that point to a void type.

  However, this means that the type inference algorithm for values,
  variables, and function arguments should infer ? instead of Void
  when initialized with expressions that return Void.

[===== Uninitialized Structure Fields =====]

Use Case:

  I am declaring a structure with a field that I will initialize
  later, but not immediately upon creation. I promise that the field
  will be initialized before I access it however.

  defstruct Vertex :
    x: Float
    y: Float
    id: Int with: (init => uninitialized)
    
[===== Deftype with Existing Parents =====]

Use Case:

  I am declaring a new type called Identifier, which is guaranteed to
  be Hashable. I would like Int to be an Identifier, which is possible
  because it is already Hashable.

  deftype Identifier <: Hashable :
    Int <: Identifier
  